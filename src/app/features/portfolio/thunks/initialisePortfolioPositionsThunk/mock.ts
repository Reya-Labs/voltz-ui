import { SupportedChainId } from '@voltz-protocol/v1-sdk';

import { PositionMock } from './index';

const randomValue = () => (Math.random() * 100 > 50 ? -1 : 1) * Math.random() * (1e7 - 1e3) + 1e3;
const randomValue2 = () => Math.random() * (1e4 - 100) + 100;
const randomDate = () =>
  new Date('2023-09-01').valueOf() - (Math.random() * (35 - 5) + 5) * 60 * 60 * 24 * 1000;
const randomDate2 = () =>
  new Date('2023-05-01').valueOf() - (Math.random() * (35 - 5) + 5) * 60 * 60 * 24 * 1000;
const randomValue3 = () => parseFloat((Math.random() * 1e2).toFixed(2));
const randomHealth = () => {
  return Math.random() * 100 > 50 ? 'healthy' : Math.random() * 100 > 50 ? 'danger' : 'warning';
};
export const positionMocks: PositionMock[] = [
  {
    type: 'LP',
    id: '1',
    amm: {
      id: '1',
      chainId: SupportedChainId.mainnet,
      market: 'Aave',
      underlyingToken: {
        name: 'eth',
      },
      rateOracle: {
        protocolId: 1,
      },
      termEndTimestampInMS: randomDate(),
      termStartTimestampInMS: randomDate2(),
      isBorrowing: false,
      isAaveV3: true,
      isV2: false,
    },
    notional: randomValue2(),
    margin: randomValue2(),
    status: {
      health: randomHealth(),
      variant: 'matured',
      currentFixed: randomValue3(),
      receiving: randomValue3(),
      paying: randomValue3(),
      fixLow: randomValue3(),
      fixHigh: randomValue3(),
    },
    unrealizedPNL: randomValue(),
    realizedPNLTotal: randomValue(),
    realizedPNLFees: randomValue(),
    realizedPNLCashflow: randomValue(),
    unrealizedPNLUSD: randomValue(),
    realizedPNLTotalUSD: randomValue(),
    realizedPNLFeesUSD: randomValue(),
    realizedPNLCashflowUSD: randomValue(),
  },
  {
    type: 'Variable',
    id: '2',
    amm: {
      id: '2',
      chainId: SupportedChainId.mainnet,
      market: 'Compound',
      underlyingToken: {
        name: 'usdc',
      },
      rateOracle: {
        protocolId: 1,
      },
      termEndTimestampInMS: randomDate(),
      termStartTimestampInMS: randomDate2(),
      isBorrowing: true,
      isAaveV3: false,
      isV2: true,
    },
    notional: randomValue2(),
    margin: randomValue2(),
    status: {
      health: randomHealth(),
      variant: 'active',
      currentFixed: randomValue3(),
      receiving: randomValue3(),
      paying: randomValue3(),
      fixLow: randomValue3(),
      fixHigh: randomValue3(),
    },
    unrealizedPNL: randomValue(),
    realizedPNLTotal: randomValue(),
    realizedPNLFees: randomValue(),
    realizedPNLCashflow: randomValue(),
    unrealizedPNLUSD: randomValue(),
    realizedPNLTotalUSD: randomValue(),
    realizedPNLFeesUSD: randomValue(),
    realizedPNLCashflowUSD: randomValue(),
  },
  {
    type: 'Fixed',
    id: '3',
    amm: {
      id: '3',
      chainId: SupportedChainId.avalanche,
      market: 'Lido',
      underlyingToken: {
        name: 'eth',
      },
      rateOracle: {
        protocolId: 1,
      },
      termEndTimestampInMS: randomDate(),
      termStartTimestampInMS: randomDate2(),
      isBorrowing: false,
      isAaveV3: true,
      isV2: true,
    },
    notional: randomValue2(),
    margin: randomValue2(),
    status: {
      health: randomHealth(),
      variant: 'active',
      currentFixed: randomValue3(),
      receiving: randomValue3(),
      paying: randomValue3(),
      fixLow: randomValue3(),
      fixHigh: randomValue3(),
    },
    unrealizedPNL: randomValue(),
    realizedPNLTotal: randomValue(),
    realizedPNLFees: randomValue(),
    realizedPNLCashflow: randomValue(),
    unrealizedPNLUSD: randomValue(),
    realizedPNLTotalUSD: randomValue(),
    realizedPNLFeesUSD: randomValue(),
    realizedPNLCashflowUSD: randomValue(),
  },
  {
    type: 'Variable',
    id: '4',
    amm: {
      id: '4',
      chainId: SupportedChainId.avalanche,
      market: 'Rocket',
      underlyingToken: {
        name: 'dai',
      },
      rateOracle: {
        protocolId: 1,
      },
      termEndTimestampInMS: randomDate(),
      termStartTimestampInMS: randomDate2(),
      isBorrowing: true,
      isAaveV3: false,
      isV2: false,
    },
    notional: randomValue2(),
    margin: randomValue2(),
    status: {
      health: randomHealth(),
      variant: 'active',
      currentFixed: randomValue3(),
      receiving: randomValue3(),
      paying: randomValue3(),
      fixLow: randomValue3(),
      fixHigh: randomValue3(),
    },
    unrealizedPNL: randomValue(),
    realizedPNLTotal: randomValue(),
    realizedPNLFees: randomValue(),
    realizedPNLCashflow: randomValue(),
    unrealizedPNLUSD: randomValue(),
    realizedPNLTotalUSD: randomValue(),
    realizedPNLFeesUSD: randomValue(),
    realizedPNLCashflowUSD: randomValue(),
  },
  {
    type: 'Fixed',
    id: '5',
    amm: {
      id: '5',
      chainId: SupportedChainId.arbitrum,
      market: 'GMX:GLP',
      underlyingToken: {
        name: 'eth',
      },
      rateOracle: {
        protocolId: 1,
      },
      termEndTimestampInMS: randomDate(),
      termStartTimestampInMS: randomDate2(),
      isBorrowing: true,
      isAaveV3: true,
      isV2: false,
    },
    notional: randomValue2(),
    margin: randomValue2(),
    status: {
      health: randomHealth(),
      variant: 'active',
      currentFixed: randomValue3(),
      receiving: randomValue3(),
      paying: randomValue3(),
      fixLow: randomValue3(),
      fixHigh: randomValue3(),
    },
    unrealizedPNL: randomValue(),
    realizedPNLTotal: randomValue(),
    realizedPNLFees: randomValue(),
    realizedPNLCashflow: randomValue(),
    unrealizedPNLUSD: randomValue(),
    realizedPNLTotalUSD: randomValue(),
    realizedPNLFeesUSD: randomValue(),
    realizedPNLCashflowUSD: randomValue(),
  },
  {
    type: 'LP',
    id: '6',
    amm: {
      id: '6',
      chainId: SupportedChainId.arbitrum,
      market: 'SOFR',
      underlyingToken: {
        name: 'usdt',
      },
      rateOracle: {
        protocolId: 1,
      },
      termEndTimestampInMS: randomDate(),
      termStartTimestampInMS: randomDate2(),
      isBorrowing: false,
      isAaveV3: true,
      isV2: false,
    },
    notional: randomValue2(),
    margin: randomValue2(),
    status: {
      health: randomHealth(),
      variant: 'settled',
      currentFixed: randomValue3(),
      receiving: randomValue3(),
      paying: randomValue3(),
      fixLow: randomValue3(),
      fixHigh: randomValue3(),
    },
    unrealizedPNL: randomValue(),
    realizedPNLTotal: randomValue(),
    realizedPNLFees: randomValue(),
    realizedPNLCashflow: randomValue(),
    unrealizedPNLUSD: randomValue(),
    realizedPNLTotalUSD: randomValue(),
    realizedPNLFeesUSD: randomValue(),
    realizedPNLCashflowUSD: randomValue(),
  },
  {
    type: 'LP',
    id: '7',
    amm: {
      id: '7',
      chainId: SupportedChainId.mainnet,
      market: 'Aave',
      underlyingToken: {
        name: 'usdc',
      },
      rateOracle: {
        protocolId: 1,
      },
      termEndTimestampInMS: randomDate(),
      termStartTimestampInMS: randomDate2(),
      isBorrowing: true,
      isAaveV3: true,
      isV2: false,
    },
    notional: randomValue2(),
    margin: randomValue2(),
    status: {
      health: randomHealth(),
      variant: 'active',
      currentFixed: randomValue3(),
      receiving: randomValue3(),
      paying: randomValue3(),
      fixLow: randomValue3(),
      fixHigh: randomValue3(),
    },
    unrealizedPNL: randomValue(),
    realizedPNLTotal: randomValue(),
    realizedPNLFees: randomValue(),
    realizedPNLCashflow: randomValue(),
    unrealizedPNLUSD: randomValue(),
    realizedPNLTotalUSD: randomValue(),
    realizedPNLFeesUSD: randomValue(),
    realizedPNLCashflowUSD: randomValue(),
  },
  {
    type: 'Fixed',
    id: '8',
    amm: {
      id: '8',
      chainId: SupportedChainId.avalanche,
      market: 'Compound',
      underlyingToken: {
        name: 'usdt',
      },
      rateOracle: {
        protocolId: 1,
      },
      termEndTimestampInMS: randomDate(),
      termStartTimestampInMS: randomDate2(),
      isBorrowing: false,
      isAaveV3: false,
      isV2: true,
    },
    notional: randomValue2(),
    margin: randomValue2(),
    status: {
      health: randomHealth(),
      variant: 'active',
      currentFixed: randomValue3(),
      receiving: randomValue3(),
      paying: randomValue3(),
      fixLow: randomValue3(),
      fixHigh: randomValue3(),
    },
    unrealizedPNL: randomValue(),
    realizedPNLTotal: randomValue(),
    realizedPNLFees: randomValue(),
    realizedPNLCashflow: randomValue(),
    unrealizedPNLUSD: randomValue(),
    realizedPNLTotalUSD: randomValue(),
    realizedPNLFeesUSD: randomValue(),
    realizedPNLCashflowUSD: randomValue(),
  },
  {
    type: 'Variable',
    id: '9',
    amm: {
      id: '9',
      market: 'Lido',
      chainId: SupportedChainId.arbitrum,
      isBorrowing: true,
      isAaveV3: true,
      isV2: true,
      termEndTimestampInMS: randomDate(),
      termStartTimestampInMS: randomDate2(),
      underlyingToken: {
        name: 'usdt',
      },
      rateOracle: {
        protocolId: 1,
      },
    },
    notional: randomValue2(),
    margin: randomValue2(),
    status: {
      health: randomHealth(),
      variant: 'active',
      currentFixed: randomValue3(),
      receiving: randomValue3(),
      paying: randomValue3(),
      fixLow: randomValue3(),
      fixHigh: randomValue3(),
    },
    unrealizedPNL: randomValue(),
    realizedPNLTotal: randomValue(),
    realizedPNLFees: randomValue(),
    realizedPNLCashflow: randomValue(),
    unrealizedPNLUSD: randomValue(),
    realizedPNLTotalUSD: randomValue(),
    realizedPNLFeesUSD: randomValue(),
    realizedPNLCashflowUSD: randomValue(),
  },
  {
    type: 'Fixed',
    id: '10',
    notional: randomValue2(),
    margin: randomValue2(),
    amm: {
      id: '10',
      market: 'Rocket',
      chainId: SupportedChainId.mainnet,
      rateOracle: {
        protocolId: 1,
      },
      underlyingToken: {
        name: 'eth',
      },
      termEndTimestampInMS: randomDate(),
      termStartTimestampInMS: randomDate2(),
      isBorrowing: false,
      isAaveV3: false,
      isV2: false,
    },
    status: {
      health: randomHealth(),
      variant: 'matured',
      currentFixed: randomValue3(),
      receiving: randomValue3(),
      paying: randomValue3(),
      fixLow: randomValue3(),
      fixHigh: randomValue3(),
    },
    unrealizedPNL: randomValue(),
    realizedPNLTotal: randomValue(),
    realizedPNLFees: randomValue(),
    realizedPNLCashflow: randomValue(),
    unrealizedPNLUSD: randomValue(),
    realizedPNLTotalUSD: randomValue(),
    realizedPNLFeesUSD: randomValue(),
    realizedPNLCashflowUSD: randomValue(),
  },
  {
    type: 'LP',
    id: '11',
    amm: {
      id: '11',
      market: 'GMX:GLP',
      chainId: SupportedChainId.avalanche,
      termEndTimestampInMS: randomDate(),
      termStartTimestampInMS: randomDate2(),
      isBorrowing: true,
      isAaveV3: true,
      isV2: false,
      rateOracle: {
        protocolId: 1,
      },
      underlyingToken: {
        name: 'usdc',
      },
    },
    notional: randomValue2(),
    margin: randomValue2(),
    status: {
      health: randomHealth(),
      variant: 'active',
      currentFixed: randomValue3(),
      receiving: randomValue3(),
      paying: randomValue3(),
      fixLow: randomValue3(),
      fixHigh: randomValue3(),
    },
    unrealizedPNL: randomValue(),
    realizedPNLTotal: randomValue(),
    realizedPNLFees: randomValue(),
    realizedPNLCashflow: randomValue(),
    unrealizedPNLUSD: randomValue(),
    realizedPNLTotalUSD: randomValue(),
    realizedPNLFeesUSD: randomValue(),
    realizedPNLCashflowUSD: randomValue(),
  },
];
