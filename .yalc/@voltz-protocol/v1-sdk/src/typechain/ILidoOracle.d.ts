/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ILidoOracleInterface extends ethers.utils.Interface {
  functions: {
    "getBeaconSpec()": FunctionFragment;
    "getCurrentFrame()": FunctionFragment;
    "getLastCompletedEpochId()": FunctionFragment;
    "getLastCompletedReportDelta()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getBeaconSpec",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentFrame",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastCompletedEpochId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastCompletedReportDelta",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getBeaconSpec",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentFrame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastCompletedEpochId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastCompletedReportDelta",
    data: BytesLike
  ): Result;

  events: {};
}

export class ILidoOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ILidoOracleInterface;

  functions: {
    getBeaconSpec(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        epochsPerFrame: BigNumber;
        slotsPerEpoch: BigNumber;
        secondsPerSlot: BigNumber;
        genesisTime: BigNumber;
      }
    >;

    getCurrentFrame(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        frameEpochId: BigNumber;
        frameStartTime: BigNumber;
        frameEndTime: BigNumber;
      }
    >;

    getLastCompletedEpochId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLastCompletedReportDelta(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        postTotalPooledEther: BigNumber;
        preTotalPooledEther: BigNumber;
        timeElapsed: BigNumber;
      }
    >;
  };

  getBeaconSpec(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      epochsPerFrame: BigNumber;
      slotsPerEpoch: BigNumber;
      secondsPerSlot: BigNumber;
      genesisTime: BigNumber;
    }
  >;

  getCurrentFrame(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      frameEpochId: BigNumber;
      frameStartTime: BigNumber;
      frameEndTime: BigNumber;
    }
  >;

  getLastCompletedEpochId(overrides?: CallOverrides): Promise<BigNumber>;

  getLastCompletedReportDelta(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      postTotalPooledEther: BigNumber;
      preTotalPooledEther: BigNumber;
      timeElapsed: BigNumber;
    }
  >;

  callStatic: {
    getBeaconSpec(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        epochsPerFrame: BigNumber;
        slotsPerEpoch: BigNumber;
        secondsPerSlot: BigNumber;
        genesisTime: BigNumber;
      }
    >;

    getCurrentFrame(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        frameEpochId: BigNumber;
        frameStartTime: BigNumber;
        frameEndTime: BigNumber;
      }
    >;

    getLastCompletedEpochId(overrides?: CallOverrides): Promise<BigNumber>;

    getLastCompletedReportDelta(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        postTotalPooledEther: BigNumber;
        preTotalPooledEther: BigNumber;
        timeElapsed: BigNumber;
      }
    >;
  };

  filters: {};

  estimateGas: {
    getBeaconSpec(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentFrame(overrides?: CallOverrides): Promise<BigNumber>;

    getLastCompletedEpochId(overrides?: CallOverrides): Promise<BigNumber>;

    getLastCompletedReportDelta(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getBeaconSpec(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentFrame(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLastCompletedEpochId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastCompletedReportDelta(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
