/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MarginCalculatorTestInterface extends ethers.utils.Interface {
  functions: {
    "computeApyBound(uint256,uint256,uint256,bool,(uint256,uint256,int256,int256,int256,int256,int256,int256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "computeTimeFactor(uint256,uint256,(uint256,uint256,int256,int256,int256,int256,int256,int256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "getAbsoluteFixedTokenDeltaUnbalancedSimulatedUnwind(uint256,uint160,uint256,uint256,uint256,uint256,uint256,uint256,bool)": FunctionFragment;
    "getFixedTokenBalanceFromMCTest(int256,int256,uint256,uint256,uint256)": FunctionFragment;
    "worstCaseVariableFactorAtMaturity(uint256,uint256,uint256,bool,bool,uint256,(uint256,uint256,int256,int256,int256,int256,int256,int256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "computeApyBound",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean,
      {
        apyUpperMultiplierWad: BigNumberish;
        apyLowerMultiplierWad: BigNumberish;
        sigmaSquaredWad: BigNumberish;
        alphaWad: BigNumberish;
        betaWad: BigNumberish;
        xiUpperWad: BigNumberish;
        xiLowerWad: BigNumberish;
        tMaxWad: BigNumberish;
        devMulLeftUnwindLMWad: BigNumberish;
        devMulRightUnwindLMWad: BigNumberish;
        devMulLeftUnwindIMWad: BigNumberish;
        devMulRightUnwindIMWad: BigNumberish;
        fixedRateDeviationMinLeftUnwindLMWad: BigNumberish;
        fixedRateDeviationMinRightUnwindLMWad: BigNumberish;
        fixedRateDeviationMinLeftUnwindIMWad: BigNumberish;
        fixedRateDeviationMinRightUnwindIMWad: BigNumberish;
        gammaWad: BigNumberish;
        minMarginToIncentiviseLiquidators: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "computeTimeFactor",
    values: [
      BigNumberish,
      BigNumberish,
      {
        apyUpperMultiplierWad: BigNumberish;
        apyLowerMultiplierWad: BigNumberish;
        sigmaSquaredWad: BigNumberish;
        alphaWad: BigNumberish;
        betaWad: BigNumberish;
        xiUpperWad: BigNumberish;
        xiLowerWad: BigNumberish;
        tMaxWad: BigNumberish;
        devMulLeftUnwindLMWad: BigNumberish;
        devMulRightUnwindLMWad: BigNumberish;
        devMulLeftUnwindIMWad: BigNumberish;
        devMulRightUnwindIMWad: BigNumberish;
        fixedRateDeviationMinLeftUnwindLMWad: BigNumberish;
        fixedRateDeviationMinRightUnwindLMWad: BigNumberish;
        fixedRateDeviationMinLeftUnwindIMWad: BigNumberish;
        fixedRateDeviationMinRightUnwindIMWad: BigNumberish;
        gammaWad: BigNumberish;
        minMarginToIncentiviseLiquidators: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAbsoluteFixedTokenDeltaUnbalancedSimulatedUnwind",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getFixedTokenBalanceFromMCTest",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "worstCaseVariableFactorAtMaturity",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean,
      boolean,
      BigNumberish,
      {
        apyUpperMultiplierWad: BigNumberish;
        apyLowerMultiplierWad: BigNumberish;
        sigmaSquaredWad: BigNumberish;
        alphaWad: BigNumberish;
        betaWad: BigNumberish;
        xiUpperWad: BigNumberish;
        xiLowerWad: BigNumberish;
        tMaxWad: BigNumberish;
        devMulLeftUnwindLMWad: BigNumberish;
        devMulRightUnwindLMWad: BigNumberish;
        devMulLeftUnwindIMWad: BigNumberish;
        devMulRightUnwindIMWad: BigNumberish;
        fixedRateDeviationMinLeftUnwindLMWad: BigNumberish;
        fixedRateDeviationMinRightUnwindLMWad: BigNumberish;
        fixedRateDeviationMinLeftUnwindIMWad: BigNumberish;
        fixedRateDeviationMinRightUnwindIMWad: BigNumberish;
        gammaWad: BigNumberish;
        minMarginToIncentiviseLiquidators: BigNumberish;
      }
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "computeApyBound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeTimeFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAbsoluteFixedTokenDeltaUnbalancedSimulatedUnwind",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFixedTokenBalanceFromMCTest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "worstCaseVariableFactorAtMaturity",
    data: BytesLike
  ): Result;

  events: {};
}

export class MarginCalculatorTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MarginCalculatorTestInterface;

  functions: {
    computeApyBound(
      termEndTimestampWad: BigNumberish,
      currentTimestampWad: BigNumberish,
      historicalApyWad: BigNumberish,
      isUpper: boolean,
      _marginCalculatorParameters: {
        apyUpperMultiplierWad: BigNumberish;
        apyLowerMultiplierWad: BigNumberish;
        sigmaSquaredWad: BigNumberish;
        alphaWad: BigNumberish;
        betaWad: BigNumberish;
        xiUpperWad: BigNumberish;
        xiLowerWad: BigNumberish;
        tMaxWad: BigNumberish;
        devMulLeftUnwindLMWad: BigNumberish;
        devMulRightUnwindLMWad: BigNumberish;
        devMulLeftUnwindIMWad: BigNumberish;
        devMulRightUnwindIMWad: BigNumberish;
        fixedRateDeviationMinLeftUnwindLMWad: BigNumberish;
        fixedRateDeviationMinRightUnwindLMWad: BigNumberish;
        fixedRateDeviationMinLeftUnwindIMWad: BigNumberish;
        fixedRateDeviationMinRightUnwindIMWad: BigNumberish;
        gammaWad: BigNumberish;
        minMarginToIncentiviseLiquidators: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { apyBoundWad: BigNumber }>;

    computeTimeFactor(
      termEndTimestampWad: BigNumberish,
      currentTimestampWad: BigNumberish,
      _marginCalculatorParameters: {
        apyUpperMultiplierWad: BigNumberish;
        apyLowerMultiplierWad: BigNumberish;
        sigmaSquaredWad: BigNumberish;
        alphaWad: BigNumberish;
        betaWad: BigNumberish;
        xiUpperWad: BigNumberish;
        xiLowerWad: BigNumberish;
        tMaxWad: BigNumberish;
        devMulLeftUnwindLMWad: BigNumberish;
        devMulRightUnwindLMWad: BigNumberish;
        devMulLeftUnwindIMWad: BigNumberish;
        devMulRightUnwindIMWad: BigNumberish;
        fixedRateDeviationMinLeftUnwindLMWad: BigNumberish;
        fixedRateDeviationMinRightUnwindLMWad: BigNumberish;
        fixedRateDeviationMinLeftUnwindIMWad: BigNumberish;
        fixedRateDeviationMinRightUnwindIMWad: BigNumberish;
        gammaWad: BigNumberish;
        minMarginToIncentiviseLiquidators: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { timeFactor: BigNumber }>;

    getAbsoluteFixedTokenDeltaUnbalancedSimulatedUnwind(
      variableTokenDeltaAbsolute: BigNumberish,
      sqrtRatioCurrX96: BigNumberish,
      startingFixedRateMultiplierWad: BigNumberish,
      fixedRateDeviationMinWad: BigNumberish,
      termEndTimestampWad: BigNumberish,
      currentTimestampWad: BigNumberish,
      tMaxWad: BigNumberish,
      gammaWad: BigNumberish,
      isFTUnwind: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fixedTokenDeltaUnbalanced: BigNumber }>;

    getFixedTokenBalanceFromMCTest(
      amount0: BigNumberish,
      amount1: BigNumberish,
      accruedVariableFactor: BigNumberish,
      termStartTimestamp: BigNumberish,
      termEndTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fixedTokenBalance: BigNumber }>;

    worstCaseVariableFactorAtMaturity(
      timeInSecondsFromStartToMaturityWad: BigNumberish,
      termEndTimestampWad: BigNumberish,
      currentTimestampWad: BigNumberish,
      isFT: boolean,
      isLM: boolean,
      historicalApyWad: BigNumberish,
      _marginCalculatorParameters: {
        apyUpperMultiplierWad: BigNumberish;
        apyLowerMultiplierWad: BigNumberish;
        sigmaSquaredWad: BigNumberish;
        alphaWad: BigNumberish;
        betaWad: BigNumberish;
        xiUpperWad: BigNumberish;
        xiLowerWad: BigNumberish;
        tMaxWad: BigNumberish;
        devMulLeftUnwindLMWad: BigNumberish;
        devMulRightUnwindLMWad: BigNumberish;
        devMulLeftUnwindIMWad: BigNumberish;
        devMulRightUnwindIMWad: BigNumberish;
        fixedRateDeviationMinLeftUnwindLMWad: BigNumberish;
        fixedRateDeviationMinRightUnwindLMWad: BigNumberish;
        fixedRateDeviationMinLeftUnwindIMWad: BigNumberish;
        fixedRateDeviationMinRightUnwindIMWad: BigNumberish;
        gammaWad: BigNumberish;
        minMarginToIncentiviseLiquidators: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { variableFactorWad: BigNumber }>;
  };

  computeApyBound(
    termEndTimestampWad: BigNumberish,
    currentTimestampWad: BigNumberish,
    historicalApyWad: BigNumberish,
    isUpper: boolean,
    _marginCalculatorParameters: {
      apyUpperMultiplierWad: BigNumberish;
      apyLowerMultiplierWad: BigNumberish;
      sigmaSquaredWad: BigNumberish;
      alphaWad: BigNumberish;
      betaWad: BigNumberish;
      xiUpperWad: BigNumberish;
      xiLowerWad: BigNumberish;
      tMaxWad: BigNumberish;
      devMulLeftUnwindLMWad: BigNumberish;
      devMulRightUnwindLMWad: BigNumberish;
      devMulLeftUnwindIMWad: BigNumberish;
      devMulRightUnwindIMWad: BigNumberish;
      fixedRateDeviationMinLeftUnwindLMWad: BigNumberish;
      fixedRateDeviationMinRightUnwindLMWad: BigNumberish;
      fixedRateDeviationMinLeftUnwindIMWad: BigNumberish;
      fixedRateDeviationMinRightUnwindIMWad: BigNumberish;
      gammaWad: BigNumberish;
      minMarginToIncentiviseLiquidators: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  computeTimeFactor(
    termEndTimestampWad: BigNumberish,
    currentTimestampWad: BigNumberish,
    _marginCalculatorParameters: {
      apyUpperMultiplierWad: BigNumberish;
      apyLowerMultiplierWad: BigNumberish;
      sigmaSquaredWad: BigNumberish;
      alphaWad: BigNumberish;
      betaWad: BigNumberish;
      xiUpperWad: BigNumberish;
      xiLowerWad: BigNumberish;
      tMaxWad: BigNumberish;
      devMulLeftUnwindLMWad: BigNumberish;
      devMulRightUnwindLMWad: BigNumberish;
      devMulLeftUnwindIMWad: BigNumberish;
      devMulRightUnwindIMWad: BigNumberish;
      fixedRateDeviationMinLeftUnwindLMWad: BigNumberish;
      fixedRateDeviationMinRightUnwindLMWad: BigNumberish;
      fixedRateDeviationMinLeftUnwindIMWad: BigNumberish;
      fixedRateDeviationMinRightUnwindIMWad: BigNumberish;
      gammaWad: BigNumberish;
      minMarginToIncentiviseLiquidators: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAbsoluteFixedTokenDeltaUnbalancedSimulatedUnwind(
    variableTokenDeltaAbsolute: BigNumberish,
    sqrtRatioCurrX96: BigNumberish,
    startingFixedRateMultiplierWad: BigNumberish,
    fixedRateDeviationMinWad: BigNumberish,
    termEndTimestampWad: BigNumberish,
    currentTimestampWad: BigNumberish,
    tMaxWad: BigNumberish,
    gammaWad: BigNumberish,
    isFTUnwind: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFixedTokenBalanceFromMCTest(
    amount0: BigNumberish,
    amount1: BigNumberish,
    accruedVariableFactor: BigNumberish,
    termStartTimestamp: BigNumberish,
    termEndTimestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  worstCaseVariableFactorAtMaturity(
    timeInSecondsFromStartToMaturityWad: BigNumberish,
    termEndTimestampWad: BigNumberish,
    currentTimestampWad: BigNumberish,
    isFT: boolean,
    isLM: boolean,
    historicalApyWad: BigNumberish,
    _marginCalculatorParameters: {
      apyUpperMultiplierWad: BigNumberish;
      apyLowerMultiplierWad: BigNumberish;
      sigmaSquaredWad: BigNumberish;
      alphaWad: BigNumberish;
      betaWad: BigNumberish;
      xiUpperWad: BigNumberish;
      xiLowerWad: BigNumberish;
      tMaxWad: BigNumberish;
      devMulLeftUnwindLMWad: BigNumberish;
      devMulRightUnwindLMWad: BigNumberish;
      devMulLeftUnwindIMWad: BigNumberish;
      devMulRightUnwindIMWad: BigNumberish;
      fixedRateDeviationMinLeftUnwindLMWad: BigNumberish;
      fixedRateDeviationMinRightUnwindLMWad: BigNumberish;
      fixedRateDeviationMinLeftUnwindIMWad: BigNumberish;
      fixedRateDeviationMinRightUnwindIMWad: BigNumberish;
      gammaWad: BigNumberish;
      minMarginToIncentiviseLiquidators: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    computeApyBound(
      termEndTimestampWad: BigNumberish,
      currentTimestampWad: BigNumberish,
      historicalApyWad: BigNumberish,
      isUpper: boolean,
      _marginCalculatorParameters: {
        apyUpperMultiplierWad: BigNumberish;
        apyLowerMultiplierWad: BigNumberish;
        sigmaSquaredWad: BigNumberish;
        alphaWad: BigNumberish;
        betaWad: BigNumberish;
        xiUpperWad: BigNumberish;
        xiLowerWad: BigNumberish;
        tMaxWad: BigNumberish;
        devMulLeftUnwindLMWad: BigNumberish;
        devMulRightUnwindLMWad: BigNumberish;
        devMulLeftUnwindIMWad: BigNumberish;
        devMulRightUnwindIMWad: BigNumberish;
        fixedRateDeviationMinLeftUnwindLMWad: BigNumberish;
        fixedRateDeviationMinRightUnwindLMWad: BigNumberish;
        fixedRateDeviationMinLeftUnwindIMWad: BigNumberish;
        fixedRateDeviationMinRightUnwindIMWad: BigNumberish;
        gammaWad: BigNumberish;
        minMarginToIncentiviseLiquidators: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeTimeFactor(
      termEndTimestampWad: BigNumberish,
      currentTimestampWad: BigNumberish,
      _marginCalculatorParameters: {
        apyUpperMultiplierWad: BigNumberish;
        apyLowerMultiplierWad: BigNumberish;
        sigmaSquaredWad: BigNumberish;
        alphaWad: BigNumberish;
        betaWad: BigNumberish;
        xiUpperWad: BigNumberish;
        xiLowerWad: BigNumberish;
        tMaxWad: BigNumberish;
        devMulLeftUnwindLMWad: BigNumberish;
        devMulRightUnwindLMWad: BigNumberish;
        devMulLeftUnwindIMWad: BigNumberish;
        devMulRightUnwindIMWad: BigNumberish;
        fixedRateDeviationMinLeftUnwindLMWad: BigNumberish;
        fixedRateDeviationMinRightUnwindLMWad: BigNumberish;
        fixedRateDeviationMinLeftUnwindIMWad: BigNumberish;
        fixedRateDeviationMinRightUnwindIMWad: BigNumberish;
        gammaWad: BigNumberish;
        minMarginToIncentiviseLiquidators: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAbsoluteFixedTokenDeltaUnbalancedSimulatedUnwind(
      variableTokenDeltaAbsolute: BigNumberish,
      sqrtRatioCurrX96: BigNumberish,
      startingFixedRateMultiplierWad: BigNumberish,
      fixedRateDeviationMinWad: BigNumberish,
      termEndTimestampWad: BigNumberish,
      currentTimestampWad: BigNumberish,
      tMaxWad: BigNumberish,
      gammaWad: BigNumberish,
      isFTUnwind: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFixedTokenBalanceFromMCTest(
      amount0: BigNumberish,
      amount1: BigNumberish,
      accruedVariableFactor: BigNumberish,
      termStartTimestamp: BigNumberish,
      termEndTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    worstCaseVariableFactorAtMaturity(
      timeInSecondsFromStartToMaturityWad: BigNumberish,
      termEndTimestampWad: BigNumberish,
      currentTimestampWad: BigNumberish,
      isFT: boolean,
      isLM: boolean,
      historicalApyWad: BigNumberish,
      _marginCalculatorParameters: {
        apyUpperMultiplierWad: BigNumberish;
        apyLowerMultiplierWad: BigNumberish;
        sigmaSquaredWad: BigNumberish;
        alphaWad: BigNumberish;
        betaWad: BigNumberish;
        xiUpperWad: BigNumberish;
        xiLowerWad: BigNumberish;
        tMaxWad: BigNumberish;
        devMulLeftUnwindLMWad: BigNumberish;
        devMulRightUnwindLMWad: BigNumberish;
        devMulLeftUnwindIMWad: BigNumberish;
        devMulRightUnwindIMWad: BigNumberish;
        fixedRateDeviationMinLeftUnwindLMWad: BigNumberish;
        fixedRateDeviationMinRightUnwindLMWad: BigNumberish;
        fixedRateDeviationMinLeftUnwindIMWad: BigNumberish;
        fixedRateDeviationMinRightUnwindIMWad: BigNumberish;
        gammaWad: BigNumberish;
        minMarginToIncentiviseLiquidators: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    computeApyBound(
      termEndTimestampWad: BigNumberish,
      currentTimestampWad: BigNumberish,
      historicalApyWad: BigNumberish,
      isUpper: boolean,
      _marginCalculatorParameters: {
        apyUpperMultiplierWad: BigNumberish;
        apyLowerMultiplierWad: BigNumberish;
        sigmaSquaredWad: BigNumberish;
        alphaWad: BigNumberish;
        betaWad: BigNumberish;
        xiUpperWad: BigNumberish;
        xiLowerWad: BigNumberish;
        tMaxWad: BigNumberish;
        devMulLeftUnwindLMWad: BigNumberish;
        devMulRightUnwindLMWad: BigNumberish;
        devMulLeftUnwindIMWad: BigNumberish;
        devMulRightUnwindIMWad: BigNumberish;
        fixedRateDeviationMinLeftUnwindLMWad: BigNumberish;
        fixedRateDeviationMinRightUnwindLMWad: BigNumberish;
        fixedRateDeviationMinLeftUnwindIMWad: BigNumberish;
        fixedRateDeviationMinRightUnwindIMWad: BigNumberish;
        gammaWad: BigNumberish;
        minMarginToIncentiviseLiquidators: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeTimeFactor(
      termEndTimestampWad: BigNumberish,
      currentTimestampWad: BigNumberish,
      _marginCalculatorParameters: {
        apyUpperMultiplierWad: BigNumberish;
        apyLowerMultiplierWad: BigNumberish;
        sigmaSquaredWad: BigNumberish;
        alphaWad: BigNumberish;
        betaWad: BigNumberish;
        xiUpperWad: BigNumberish;
        xiLowerWad: BigNumberish;
        tMaxWad: BigNumberish;
        devMulLeftUnwindLMWad: BigNumberish;
        devMulRightUnwindLMWad: BigNumberish;
        devMulLeftUnwindIMWad: BigNumberish;
        devMulRightUnwindIMWad: BigNumberish;
        fixedRateDeviationMinLeftUnwindLMWad: BigNumberish;
        fixedRateDeviationMinRightUnwindLMWad: BigNumberish;
        fixedRateDeviationMinLeftUnwindIMWad: BigNumberish;
        fixedRateDeviationMinRightUnwindIMWad: BigNumberish;
        gammaWad: BigNumberish;
        minMarginToIncentiviseLiquidators: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAbsoluteFixedTokenDeltaUnbalancedSimulatedUnwind(
      variableTokenDeltaAbsolute: BigNumberish,
      sqrtRatioCurrX96: BigNumberish,
      startingFixedRateMultiplierWad: BigNumberish,
      fixedRateDeviationMinWad: BigNumberish,
      termEndTimestampWad: BigNumberish,
      currentTimestampWad: BigNumberish,
      tMaxWad: BigNumberish,
      gammaWad: BigNumberish,
      isFTUnwind: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFixedTokenBalanceFromMCTest(
      amount0: BigNumberish,
      amount1: BigNumberish,
      accruedVariableFactor: BigNumberish,
      termStartTimestamp: BigNumberish,
      termEndTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    worstCaseVariableFactorAtMaturity(
      timeInSecondsFromStartToMaturityWad: BigNumberish,
      termEndTimestampWad: BigNumberish,
      currentTimestampWad: BigNumberish,
      isFT: boolean,
      isLM: boolean,
      historicalApyWad: BigNumberish,
      _marginCalculatorParameters: {
        apyUpperMultiplierWad: BigNumberish;
        apyLowerMultiplierWad: BigNumberish;
        sigmaSquaredWad: BigNumberish;
        alphaWad: BigNumberish;
        betaWad: BigNumberish;
        xiUpperWad: BigNumberish;
        xiLowerWad: BigNumberish;
        tMaxWad: BigNumberish;
        devMulLeftUnwindLMWad: BigNumberish;
        devMulRightUnwindLMWad: BigNumberish;
        devMulLeftUnwindIMWad: BigNumberish;
        devMulRightUnwindIMWad: BigNumberish;
        fixedRateDeviationMinLeftUnwindLMWad: BigNumberish;
        fixedRateDeviationMinRightUnwindLMWad: BigNumberish;
        fixedRateDeviationMinLeftUnwindIMWad: BigNumberish;
        fixedRateDeviationMinRightUnwindIMWad: BigNumberish;
        gammaWad: BigNumberish;
        minMarginToIncentiviseLiquidators: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    computeApyBound(
      termEndTimestampWad: BigNumberish,
      currentTimestampWad: BigNumberish,
      historicalApyWad: BigNumberish,
      isUpper: boolean,
      _marginCalculatorParameters: {
        apyUpperMultiplierWad: BigNumberish;
        apyLowerMultiplierWad: BigNumberish;
        sigmaSquaredWad: BigNumberish;
        alphaWad: BigNumberish;
        betaWad: BigNumberish;
        xiUpperWad: BigNumberish;
        xiLowerWad: BigNumberish;
        tMaxWad: BigNumberish;
        devMulLeftUnwindLMWad: BigNumberish;
        devMulRightUnwindLMWad: BigNumberish;
        devMulLeftUnwindIMWad: BigNumberish;
        devMulRightUnwindIMWad: BigNumberish;
        fixedRateDeviationMinLeftUnwindLMWad: BigNumberish;
        fixedRateDeviationMinRightUnwindLMWad: BigNumberish;
        fixedRateDeviationMinLeftUnwindIMWad: BigNumberish;
        fixedRateDeviationMinRightUnwindIMWad: BigNumberish;
        gammaWad: BigNumberish;
        minMarginToIncentiviseLiquidators: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeTimeFactor(
      termEndTimestampWad: BigNumberish,
      currentTimestampWad: BigNumberish,
      _marginCalculatorParameters: {
        apyUpperMultiplierWad: BigNumberish;
        apyLowerMultiplierWad: BigNumberish;
        sigmaSquaredWad: BigNumberish;
        alphaWad: BigNumberish;
        betaWad: BigNumberish;
        xiUpperWad: BigNumberish;
        xiLowerWad: BigNumberish;
        tMaxWad: BigNumberish;
        devMulLeftUnwindLMWad: BigNumberish;
        devMulRightUnwindLMWad: BigNumberish;
        devMulLeftUnwindIMWad: BigNumberish;
        devMulRightUnwindIMWad: BigNumberish;
        fixedRateDeviationMinLeftUnwindLMWad: BigNumberish;
        fixedRateDeviationMinRightUnwindLMWad: BigNumberish;
        fixedRateDeviationMinLeftUnwindIMWad: BigNumberish;
        fixedRateDeviationMinRightUnwindIMWad: BigNumberish;
        gammaWad: BigNumberish;
        minMarginToIncentiviseLiquidators: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAbsoluteFixedTokenDeltaUnbalancedSimulatedUnwind(
      variableTokenDeltaAbsolute: BigNumberish,
      sqrtRatioCurrX96: BigNumberish,
      startingFixedRateMultiplierWad: BigNumberish,
      fixedRateDeviationMinWad: BigNumberish,
      termEndTimestampWad: BigNumberish,
      currentTimestampWad: BigNumberish,
      tMaxWad: BigNumberish,
      gammaWad: BigNumberish,
      isFTUnwind: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFixedTokenBalanceFromMCTest(
      amount0: BigNumberish,
      amount1: BigNumberish,
      accruedVariableFactor: BigNumberish,
      termStartTimestamp: BigNumberish,
      termEndTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    worstCaseVariableFactorAtMaturity(
      timeInSecondsFromStartToMaturityWad: BigNumberish,
      termEndTimestampWad: BigNumberish,
      currentTimestampWad: BigNumberish,
      isFT: boolean,
      isLM: boolean,
      historicalApyWad: BigNumberish,
      _marginCalculatorParameters: {
        apyUpperMultiplierWad: BigNumberish;
        apyLowerMultiplierWad: BigNumberish;
        sigmaSquaredWad: BigNumberish;
        alphaWad: BigNumberish;
        betaWad: BigNumberish;
        xiUpperWad: BigNumberish;
        xiLowerWad: BigNumberish;
        tMaxWad: BigNumberish;
        devMulLeftUnwindLMWad: BigNumberish;
        devMulRightUnwindLMWad: BigNumberish;
        devMulLeftUnwindIMWad: BigNumberish;
        devMulRightUnwindIMWad: BigNumberish;
        fixedRateDeviationMinLeftUnwindLMWad: BigNumberish;
        fixedRateDeviationMinRightUnwindLMWad: BigNumberish;
        fixedRateDeviationMinLeftUnwindIMWad: BigNumberish;
        fixedRateDeviationMinRightUnwindIMWad: BigNumberish;
        gammaWad: BigNumberish;
        minMarginToIncentiviseLiquidators: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
