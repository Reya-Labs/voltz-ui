/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockCToken, MockCTokenInterface } from "../MockCToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "underlyingAsset",
        type: "address",
      },
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approveInternal",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOfUnderlying",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "exchangeRateCurrent",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "exchangeRateStored",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "redeemAmount",
        type: "uint256",
      },
    ],
    name: "redeemUnderlying",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "rate",
        type: "uint256",
      },
    ],
    name: "setExchangeRate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "underlying",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620012ca380380620012ca833981016040819052620000349162000203565b8151829082906200004d90600390602085019062000090565b5080516200006390600490602084019062000090565b5050600580546001600160a01b0319166001600160a01b03959095169490941790935550620002ca915050565b8280546200009e906200028d565b90600052602060002090601f016020900481019282620000c257600085556200010d565b82601f10620000dd57805160ff19168380011785556200010d565b828001600101855582156200010d579182015b828111156200010d578251825591602001919060010190620000f0565b506200011b9291506200011f565b5090565b5b808211156200011b576000815560010162000120565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200015e57600080fd5b81516001600160401b03808211156200017b576200017b62000136565b604051601f8301601f19908116603f01168101908282118183101715620001a657620001a662000136565b81604052838152602092508683858801011115620001c357600080fd5b600091505b83821015620001e75785820183015181830184015290820190620001c8565b83821115620001f95760008385830101525b9695505050505050565b6000806000606084860312156200021957600080fd5b83516001600160a01b03811681146200023157600080fd5b60208501519093506001600160401b03808211156200024f57600080fd5b6200025d878388016200014c565b935060408601519150808211156200027457600080fd5b5062000283868287016200014c565b9150509250925092565b600181811c90821680620002a257607f821691505b60208210811415620002c457634e487b7160e01b600052602260045260246000fd5b50919050565b610ff080620002da6000396000f3fe608060405234801561001057600080fd5b50600436106100f15760003560e01c806306fdde03146100f6578063095ea7b31461011457806318160ddd14610137578063182df0f51461014957806323b872dd14610151578063313ce5671461016457806339509351146101735780633af9e6691461018657806340c10f191461019957806356189cb4146101ac5780636f307dc3146101c157806370a08231146101dc578063852a12e3146101ef57806395d89b4114610202578063a457c2d71461020a578063a9059cbb1461021d578063bd6d894d14610149578063db068e0e14610230578063dd62ed3e14610243575b600080fd5b6100fe610256565b60405161010b9190610d69565b60405180910390f35b610127610122366004610db8565b6102e8565b604051901515815260200161010b565b6002545b60405190815260200161010b565b60065461013b565b61012761015f366004610de2565b610300565b6040516012815260200161010b565b610127610181366004610db8565b610326565b61013b610194366004610e1e565b610348565b6101276101a7366004610db8565b61037f565b6101bf6101ba366004610de2565b610419565b005b6005546040516001600160a01b03909116815260200161010b565b61013b6101ea366004610e1e565b610429565b61013b6101fd366004610e39565b610444565b6100fe610496565b610127610218366004610db8565b6104a5565b61012761022b366004610db8565b61052b565b6101bf61023e366004610e39565b600655565b61013b610251366004610e52565b610539565b60606003805461026590610e85565b80601f016020809104026020016040519081016040528092919081815260200182805461029190610e85565b80156102de5780601f106102b3576101008083540402835291602001916102de565b820191906000526020600020905b8154815290600101906020018083116102c157829003601f168201915b5050505050905090565b6000336102f6818585610564565b5060019392505050565b60003361030e858285610688565b610319858585610702565b60019150505b9392505050565b6000336102f68185856103398383610539565b6103439190610ed6565b610564565b6000670de0b6b3a764000061035c60065490565b61036584610429565b61036f9190610eee565b6103799190610f0d565b92915050565b60008061038b84610429565b9050826103d85760405162461bcd60e51b815260206004820152601660248201527510d517d253959053125117d352539517d05353d5539560521b60448201526064015b60405180910390fd5b6103e284846108be565b6040518381526001600160a01b03851690600090600080516020610f9b8339815191529060200160405180910390a3159392505050565b610424838383610564565b505050565b6001600160a01b031660009081526020819052604090205490565b60008061045c6006548461098b90919063ffffffff16565b9050600061046933610429565b90506104753382610999565b60055461048c906001600160a01b03163386610ad5565b5060009392505050565b60606004805461026590610e85565b600033816104b38286610539565b9050838110156105135760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016103cf565b6105208286868403610564565b506001949350505050565b6000336102f6818585610702565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166105c65760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016103cf565b6001600160a01b0382166106275760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016103cf565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60006106948484610539565b905060001981146106fc57818110156106ef5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016103cf565b6106fc8484848403610564565b50505050565b6001600160a01b0383166107665760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016103cf565b6001600160a01b0382166107c85760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016103cf565b6001600160a01b038316600090815260208190526040902054818110156108405760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016103cf565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610877908490610ed6565b92505081905550826001600160a01b0316846001600160a01b0316600080516020610f9b833981519152846040516108b191815260200190565b60405180910390a36106fc565b6001600160a01b0382166109145760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016103cf565b80600260008282546109269190610ed6565b90915550506001600160a01b03821660009081526020819052604081208054839290610953908490610ed6565b90915550506040518181526001600160a01b03831690600090600080516020610f9b8339815191529060200160405180910390a35050565b600061031f83836000610b27565b6001600160a01b0382166109f95760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016103cf565b6001600160a01b03821660009081526020819052604090205481811015610a6d5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016103cf565b6001600160a01b0383166000908152602081905260408120838303905560028054849290610a9c908490610f2f565b90915550506040518281526000906001600160a01b03851690600080516020610f9b8339815191529060200160405180910390a3505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610424908490610bcb565b600082610b5f5760405162461bcd60e51b81526004016103cf906020808252600490820152630444956360e41b604082015260600190565b6000610b6c600285610f0d565b905083816001856001811115610b8457610b84610f46565b14610b9757670de0b6b3a7640000610ba4565b676765c793fa10079d601b1b5b610bae9088610eee565b610bb89190610ed6565b610bc29190610f0d565b95945050505050565b6000610bf783836040518060400160405280600781526020016629aa261032b93960c91b815250610c4c565b8051909150156104245780806020019051810190610c159190610f5c565b6104245760405162461bcd60e51b815260206004820152600860248201526714d5130819985a5b60c21b60448201526064016103cf565b6060833b610c8b5760405162461bcd60e51b815260206004820152600c60248201526b1b9bdb8b58dbdb9d1c9858dd60a21b60448201526064016103cf565b600080856001600160a01b0316600086604051610ca89190610f7e565b60006040518083038185875af1925050503d8060008114610ce5576040519150601f19603f3d011682016040523d82523d6000602084013e610cea565b606091505b5091509150610cfa828286610d04565b9695505050505050565b60608315610d1357508161031f565b825115610d235782518084602001fd5b8160405162461bcd60e51b81526004016103cf9190610d69565b60005b83811015610d58578181015183820152602001610d40565b838111156106fc5750506000910152565b6020815260008251806020840152610d88816040850160208701610d3d565b601f01601f19169190910160400192915050565b80356001600160a01b0381168114610db357600080fd5b919050565b60008060408385031215610dcb57600080fd5b610dd483610d9c565b946020939093013593505050565b600080600060608486031215610df757600080fd5b610e0084610d9c565b9250610e0e60208501610d9c565b9150604084013590509250925092565b600060208284031215610e3057600080fd5b61031f82610d9c565b600060208284031215610e4b57600080fd5b5035919050565b60008060408385031215610e6557600080fd5b610e6e83610d9c565b9150610e7c60208401610d9c565b90509250929050565b600181811c90821680610e9957607f821691505b60208210811415610eba57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610ee957610ee9610ec0565b500190565b6000816000190483118215151615610f0857610f08610ec0565b500290565b600082610f2a57634e487b7160e01b600052601260045260246000fd5b500490565b600082821015610f4157610f41610ec0565b500390565b634e487b7160e01b600052602160045260246000fd5b600060208284031215610f6e57600080fd5b8151801515811461031f57600080fd5b60008251610f90818460208701610d3d565b919091019291505056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220c8af490f16212fe80fcde8b24f85d31fae67dcaec7313e101f7413331fee4cdd64736f6c63430008090033";

export class MockCToken__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    underlyingAsset: string,
    name: string,
    symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockCToken> {
    return super.deploy(
      underlyingAsset,
      name,
      symbol,
      overrides || {}
    ) as Promise<MockCToken>;
  }
  getDeployTransaction(
    underlyingAsset: string,
    name: string,
    symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      underlyingAsset,
      name,
      symbol,
      overrides || {}
    );
  }
  attach(address: string): MockCToken {
    return super.attach(address) as MockCToken;
  }
  connect(signer: Signer): MockCToken__factory {
    return super.connect(signer) as MockCToken__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockCTokenInterface {
    return new utils.Interface(_abi) as MockCTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockCToken {
    return new Contract(address, _abi, signerOrProvider) as MockCToken;
  }
}
