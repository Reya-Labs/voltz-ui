/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  SqrtPriceMathTest,
  SqrtPriceMathTestInterface,
} from "../SqrtPriceMathTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint160",
        name: "sqrtLower",
        type: "uint160",
      },
      {
        internalType: "uint160",
        name: "sqrtUpper",
        type: "uint160",
      },
      {
        internalType: "uint128",
        name: "liquidity",
        type: "uint128",
      },
      {
        internalType: "bool",
        name: "roundUp",
        type: "bool",
      },
    ],
    name: "getAmount0Delta",
    outputs: [
      {
        internalType: "uint256",
        name: "amount0",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint160",
        name: "sqrtRatioAX96",
        type: "uint160",
      },
      {
        internalType: "uint160",
        name: "sqrtRatioBX96",
        type: "uint160",
      },
      {
        internalType: "int128",
        name: "liquidity",
        type: "int128",
      },
    ],
    name: "getAmount0DeltaRoundUpIncluded",
    outputs: [
      {
        internalType: "int256",
        name: "amount0",
        type: "int256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint160",
        name: "sqrtLower",
        type: "uint160",
      },
      {
        internalType: "uint160",
        name: "sqrtUpper",
        type: "uint160",
      },
      {
        internalType: "uint128",
        name: "liquidity",
        type: "uint128",
      },
      {
        internalType: "bool",
        name: "roundUp",
        type: "bool",
      },
    ],
    name: "getAmount1Delta",
    outputs: [
      {
        internalType: "uint256",
        name: "amount1",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint160",
        name: "sqrtRatioAX96",
        type: "uint160",
      },
      {
        internalType: "uint160",
        name: "sqrtRatioBX96",
        type: "uint160",
      },
      {
        internalType: "int128",
        name: "liquidity",
        type: "int128",
      },
    ],
    name: "getAmount1DeltaRoundUpIncluded",
    outputs: [
      {
        internalType: "int256",
        name: "amount0",
        type: "int256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint160",
        name: "sqrtPX96",
        type: "uint160",
      },
      {
        internalType: "uint128",
        name: "liquidity",
        type: "uint128",
      },
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "zeroForOne",
        type: "bool",
      },
    ],
    name: "getNextSqrtPriceFromInput",
    outputs: [
      {
        internalType: "uint160",
        name: "sqrtQX96",
        type: "uint160",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint160",
        name: "sqrtPX96",
        type: "uint160",
      },
      {
        internalType: "uint128",
        name: "liquidity",
        type: "uint128",
      },
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "zeroForOne",
        type: "bool",
      },
    ],
    name: "getNextSqrtPriceFromOutput",
    outputs: [
      {
        internalType: "uint160",
        name: "sqrtQX96",
        type: "uint160",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610b9f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80632c32d4b6146100675780632cfa7a2a1461008d57806348a0c5bd146100a0578063963001b3146100b3578063aa58276a146100c6578063fedf2b5f146100f1575b600080fd5b61007a6100753660046108cc565b610104565b6040519081526020015b60405180910390f35b61007a61009b366004610920565b61011d565b61007a6100ae3660046108cc565b610134565b61007a6100c1366004610920565b610142565b6100d96100d436600461096d565b61014f565b6040516001600160a01b039091168152602001610084565b6100d96100ff36600461096d565b61015d565b60006101128585858561016b565b90505b949350505050565b600061012a848484610273565b90505b9392505050565b6000610112858585856102ba565b600061012a84848461032a565b60006101128585858561035e565b6000610112858585856103d0565b6000836001600160a01b0316856001600160a01b0316111561018b579293925b600160601b600160e01b03606084901b1660006101a887876109c5565b6001600160a01b031690506000876001600160a01b0316116102065760405162461bcd60e51b8152602060048201526012602482015271073717274526174696f4158393620213e20360741b60448201526064015b60405180910390fd5b8361023c57866001600160a01b03166102298383896001600160a01b0316610442565b81610236576102366109ed565b04610268565b6102686102538383896001600160a01b031661053a565b886001600160a01b0316808204910615150190565b979650505050505050565b60008082600f0b126102995761029461028f85858560016102ba565b610596565b61012a565b6102b161028f85856102aa86610a03565b60006102ba565b61012a90610a2b565b6000836001600160a01b0316856001600160a01b031611156102da579293925b8161030757610302836001600160801b03168686036001600160a01b0316600160601b610442565b610112565b610112836001600160801b03168686036001600160a01b0316600160601b61053a565b60008082600f0b126103465761029461028f858585600161016b565b6102b161028f858561035786610a03565b600061016b565b600080856001600160a01b0316116103885760405162461bcd60e51b81526004016101fd90610a48565b6000846001600160801b0316116103b15760405162461bcd60e51b81526004016101fd90610a6f565b816103c35761030285858560016105df565b61011285858560016106f8565b600080856001600160a01b0316116103fa5760405162461bcd60e51b81526004016101fd90610a48565b6000846001600160801b0316116104235760405162461bcd60e51b81526004016101fd90610a6f565b816104355761030285858560006106f8565b61011285858560006105df565b6000808060001985870985870292508281108382030391505080600014156104b257600084116104a75760405162461bcd60e51b815260206004820152601060248201526f4469766973696f6e206279207a65726f60801b60448201526064016101fd565b50829004905061012d565b8084116104d15760405162461bcd60e51b81526004016101fd90610a91565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b6000610547848484610442565b905060008280610559576105596109ed565b848609111561012d5760001981106105835760405162461bcd60e51b81526004016101fd90610a91565b8061058d81610ab3565b95945050505050565b6000600160ff1b82106105db5760405162461bcd60e51b815260206004820152600d60248201526c746f496e74323536206f666c6f60981b60448201526064016101fd565b5090565b600081156106495760006001600160a01b038411156106155761061084600160601b876001600160801b0316610442565b61062c565b61062c6001600160801b038616606086901b610ace565b90506106378161083f565b6106419087610af0565b915050610115565b60006001600160a01b038411156106775761067284600160601b876001600160801b031661053a565b610694565b610694606085901b6001600160801b038716808204910615150190565b905080866001600160a01b0316116106e55760405162461bcd60e51b81526020600482015260146024820152731cdc5c9d14160e4d88084f881c5d5bdd1a595b9d60621b60448201526064016101fd565b610641816001600160a01b038816610b1b565b600082610706575083610115565b600160601b600160e01b03606085901b1682156107b15760006001600160a01b038716856107348282610b32565b92506107409083610ace565b141561077b5760006107528284610b51565b90508281106107795761076f83896001600160a01b03168361053a565b9350505050610115565b505b6107a882866107936001600160a01b038b1683610ace565b61079d9190610b51565b808204910615150190565b92505050610115565b60006001600160a01b038716856107c88282610b32565b92506107d49083610ace565b1480156107e057508082115b61081a5760405162461bcd60e51b815260206004820152600b60248201526a64656e6f6d2075666c6f7760a81b60448201526064016101fd565b60006108268284610b1b565b905061076f61083f848a6001600160a01b03168461053a565b806001600160a01b03811681146108895760405162461bcd60e51b815260206004820152600e60248201526d746f55696e74313630206f666c6f60901b60448201526064016101fd565b919050565b80356001600160a01b038116811461088957600080fd5b80356001600160801b038116811461088957600080fd5b8035801515811461088957600080fd5b600080600080608085870312156108e257600080fd5b6108eb8561088e565b93506108f96020860161088e565b9250610907604086016108a5565b9150610915606086016108bc565b905092959194509250565b60008060006060848603121561093557600080fd5b61093e8461088e565b925061094c6020850161088e565b9150604084013580600f0b811461096257600080fd5b809150509250925092565b6000806000806080858703121561098357600080fd5b61098c8561088e565b935061099a602086016108a5565b925060408501359150610915606086016108bc565b634e487b7160e01b600052601160045260246000fd5b60006001600160a01b03838116908316818110156109e5576109e56109af565b039392505050565b634e487b7160e01b600052601260045260246000fd5b6000600f82900b60016001607f1b0319811415610a2257610a226109af565b60000392915050565b6000600160ff1b821415610a4157610a416109af565b5060000390565b6020808252600d908201526c0737172745058393620213e203609c1b604082015260600190565b60208082526008908201526706c697120213e20360c41b604082015260600190565b6020808252600890820152676f766572666c6f7760c01b604082015260600190565b6000600019821415610ac757610ac76109af565b5060010190565b600082610aeb57634e487b7160e01b600052601260045260246000fd5b500490565b60006001600160a01b03828116848216808303821115610b1257610b126109af565b01949350505050565b600082821015610b2d57610b2d6109af565b500390565b6000816000190483118215151615610b4c57610b4c6109af565b500290565b60008219821115610b6457610b646109af565b50019056fea26469706673582212205a2eb3abf28458f232e35952734b484989b544242cb2c416548e6d410d522b8e64736f6c63430008090033";

export class SqrtPriceMathTest__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SqrtPriceMathTest> {
    return super.deploy(overrides || {}) as Promise<SqrtPriceMathTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): SqrtPriceMathTest {
    return super.attach(address) as SqrtPriceMathTest;
  }
  connect(signer: Signer): SqrtPriceMathTest__factory {
    return super.connect(signer) as SqrtPriceMathTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SqrtPriceMathTestInterface {
    return new utils.Interface(_abi) as SqrtPriceMathTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SqrtPriceMathTest {
    return new Contract(address, _abi, signerOrProvider) as SqrtPriceMathTest;
  }
}
