/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MarginEngineEmergencyInterface extends ethers.utils.Interface {
  functions: {
    "MAX_CACHE_MAX_AGE_IN_SECONDS()": FunctionFragment;
    "MAX_LIQUIDATOR_REWARD_WAD()": FunctionFragment;
    "MAX_LOOKBACK_WINDOW_IN_SECONDS()": FunctionFragment;
    "MIN_LOOKBACK_WINDOW_IN_SECONDS()": FunctionFragment;
    "ONE()": FunctionFragment;
    "ONE_UINT()": FunctionFragment;
    "SECONDS_IN_YEAR()": FunctionFragment;
    "cacheMaxAgeInSeconds()": FunctionFragment;
    "emergencyWithdrawal(address,int24,int24)": FunctionFragment;
    "factory()": FunctionFragment;
    "fcm()": FunctionFragment;
    "isAlpha()": FunctionFragment;
    "liquidatorRewardWad()": FunctionFragment;
    "lookbackWindowInSeconds()": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "rateOracle()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "termEndTimestampWad()": FunctionFragment;
    "termStartTimestampWad()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "underlyingToken()": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "vamm()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MAX_CACHE_MAX_AGE_IN_SECONDS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_LIQUIDATOR_REWARD_WAD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_LOOKBACK_WINDOW_IN_SECONDS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_LOOKBACK_WINDOW_IN_SECONDS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ONE", values?: undefined): string;
  encodeFunctionData(functionFragment: "ONE_UINT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "SECONDS_IN_YEAR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cacheMaxAgeInSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdrawal",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(functionFragment: "fcm", values?: undefined): string;
  encodeFunctionData(functionFragment: "isAlpha", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "liquidatorRewardWad",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lookbackWindowInSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rateOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "termEndTimestampWad",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "termStartTimestampWad",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "vamm", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "MAX_CACHE_MAX_AGE_IN_SECONDS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_LIQUIDATOR_REWARD_WAD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_LOOKBACK_WINDOW_IN_SECONDS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_LOOKBACK_WINDOW_IN_SECONDS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ONE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ONE_UINT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "SECONDS_IN_YEAR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cacheMaxAgeInSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fcm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isAlpha", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidatorRewardWad",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lookbackWindowInSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rateOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "termEndTimestampWad",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "termStartTimestampWad",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vamm", data: BytesLike): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export type AdminChangedEvent = TypedEvent<
  [string, string] & { previousAdmin: string; newAdmin: string }
>;

export type BeaconUpgradedEvent = TypedEvent<[string] & { beacon: string }>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type UpgradedEvent = TypedEvent<[string] & { implementation: string }>;

export class MarginEngineEmergency extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MarginEngineEmergencyInterface;

  functions: {
    MAX_CACHE_MAX_AGE_IN_SECONDS(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    MAX_LIQUIDATOR_REWARD_WAD(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_LOOKBACK_WINDOW_IN_SECONDS(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    MIN_LOOKBACK_WINDOW_IN_SECONDS(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    ONE(overrides?: CallOverrides): Promise<[BigNumber]>;

    ONE_UINT(overrides?: CallOverrides): Promise<[BigNumber]>;

    SECONDS_IN_YEAR(overrides?: CallOverrides): Promise<[BigNumber]>;

    cacheMaxAgeInSeconds(overrides?: CallOverrides): Promise<[BigNumber]>;

    emergencyWithdrawal(
      owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    fcm(overrides?: CallOverrides): Promise<[string]>;

    isAlpha(overrides?: CallOverrides): Promise<[boolean]>;

    liquidatorRewardWad(overrides?: CallOverrides): Promise<[BigNumber]>;

    lookbackWindowInSeconds(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    rateOracle(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    termEndTimestampWad(overrides?: CallOverrides): Promise<[BigNumber]>;

    termStartTimestampWad(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    underlyingToken(overrides?: CallOverrides): Promise<[string]>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vamm(overrides?: CallOverrides): Promise<[string]>;
  };

  MAX_CACHE_MAX_AGE_IN_SECONDS(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_LIQUIDATOR_REWARD_WAD(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_LOOKBACK_WINDOW_IN_SECONDS(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_LOOKBACK_WINDOW_IN_SECONDS(overrides?: CallOverrides): Promise<BigNumber>;

  ONE(overrides?: CallOverrides): Promise<BigNumber>;

  ONE_UINT(overrides?: CallOverrides): Promise<BigNumber>;

  SECONDS_IN_YEAR(overrides?: CallOverrides): Promise<BigNumber>;

  cacheMaxAgeInSeconds(overrides?: CallOverrides): Promise<BigNumber>;

  emergencyWithdrawal(
    owner: string,
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  fcm(overrides?: CallOverrides): Promise<string>;

  isAlpha(overrides?: CallOverrides): Promise<boolean>;

  liquidatorRewardWad(overrides?: CallOverrides): Promise<BigNumber>;

  lookbackWindowInSeconds(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  rateOracle(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  termEndTimestampWad(overrides?: CallOverrides): Promise<BigNumber>;

  termStartTimestampWad(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  underlyingToken(overrides?: CallOverrides): Promise<string>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vamm(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    MAX_CACHE_MAX_AGE_IN_SECONDS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_LIQUIDATOR_REWARD_WAD(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_LOOKBACK_WINDOW_IN_SECONDS(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MIN_LOOKBACK_WINDOW_IN_SECONDS(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ONE(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_UINT(overrides?: CallOverrides): Promise<BigNumber>;

    SECONDS_IN_YEAR(overrides?: CallOverrides): Promise<BigNumber>;

    cacheMaxAgeInSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdrawal(
      owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    factory(overrides?: CallOverrides): Promise<string>;

    fcm(overrides?: CallOverrides): Promise<string>;

    isAlpha(overrides?: CallOverrides): Promise<boolean>;

    liquidatorRewardWad(overrides?: CallOverrides): Promise<BigNumber>;

    lookbackWindowInSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    rateOracle(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    termEndTimestampWad(overrides?: CallOverrides): Promise<BigNumber>;

    termStartTimestampWad(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    underlyingToken(overrides?: CallOverrides): Promise<string>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    vamm(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): TypedEventFilter<
      [string, string],
      { previousAdmin: string; newAdmin: string }
    >;

    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): TypedEventFilter<
      [string, string],
      { previousAdmin: string; newAdmin: string }
    >;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): TypedEventFilter<[string], { beacon: string }>;

    BeaconUpgraded(
      beacon?: string | null
    ): TypedEventFilter<[string], { beacon: string }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Upgraded(address)"(
      implementation?: string | null
    ): TypedEventFilter<[string], { implementation: string }>;

    Upgraded(
      implementation?: string | null
    ): TypedEventFilter<[string], { implementation: string }>;
  };

  estimateGas: {
    MAX_CACHE_MAX_AGE_IN_SECONDS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_LIQUIDATOR_REWARD_WAD(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_LOOKBACK_WINDOW_IN_SECONDS(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MIN_LOOKBACK_WINDOW_IN_SECONDS(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ONE(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_UINT(overrides?: CallOverrides): Promise<BigNumber>;

    SECONDS_IN_YEAR(overrides?: CallOverrides): Promise<BigNumber>;

    cacheMaxAgeInSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdrawal(
      owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    fcm(overrides?: CallOverrides): Promise<BigNumber>;

    isAlpha(overrides?: CallOverrides): Promise<BigNumber>;

    liquidatorRewardWad(overrides?: CallOverrides): Promise<BigNumber>;

    lookbackWindowInSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    rateOracle(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    termEndTimestampWad(overrides?: CallOverrides): Promise<BigNumber>;

    termStartTimestampWad(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    underlyingToken(overrides?: CallOverrides): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vamm(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_CACHE_MAX_AGE_IN_SECONDS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_LIQUIDATOR_REWARD_WAD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_LOOKBACK_WINDOW_IN_SECONDS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MIN_LOOKBACK_WINDOW_IN_SECONDS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ONE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ONE_UINT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SECONDS_IN_YEAR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cacheMaxAgeInSeconds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emergencyWithdrawal(
      owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fcm(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isAlpha(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidatorRewardWad(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lookbackWindowInSeconds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rateOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    termEndTimestampWad(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    termStartTimestampWad(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    underlyingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vamm(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
