/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface AaveFCMInterface extends ethers.utils.Interface {
  functions: {
    "aaveLendingPool()": FunctionFragment;
    "getTraderMarginInATokens(address)": FunctionFragment;
    "getTraderWithYieldBearingAssets(address)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "initiateFullyCollateralisedFixedTakerSwap(uint256,uint160)": FunctionFragment;
    "marginEngine()": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "rateOracle()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setPausability(bool)": FunctionFragment;
    "settleTrader()": FunctionFragment;
    "traders(address)": FunctionFragment;
    "transferMarginToMarginEngineTrader(address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "underlyingToken()": FunctionFragment;
    "underlyingYieldBearingToken()": FunctionFragment;
    "unwindFullyCollateralisedFixedTakerSwap(uint256,uint160)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "vamm()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "aaveLendingPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTraderMarginInATokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTraderWithYieldBearingAssets",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateFullyCollateralisedFixedTakerSwap",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "marginEngine",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rateOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPausability",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "settleTrader",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "traders", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferMarginToMarginEngineTrader",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingYieldBearingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unwindFullyCollateralisedFixedTakerSwap",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "vamm", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "aaveLendingPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTraderMarginInATokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTraderWithYieldBearingAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initiateFullyCollateralisedFixedTakerSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marginEngine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rateOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPausability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleTrader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "traders", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferMarginToMarginEngineTrader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingYieldBearingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unwindFullyCollateralisedFixedTakerSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vamm", data: BytesLike): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "FCMTraderUpdate(address,uint256,int256,int256)": EventFragment;
    "FullyCollateralisedSwap(address,uint256,uint160,uint256,int256,int256,int256)": EventFragment;
    "FullyCollateralisedUnwind(address,uint256,uint160,uint256,int256,int256,int256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Upgraded(address)": EventFragment;
    "fcmPositionSettlement(address,int256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FCMTraderUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FullyCollateralisedSwap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FullyCollateralisedUnwind"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "fcmPositionSettlement"): EventFragment;
}

export type AdminChangedEvent = TypedEvent<
  [string, string] & { previousAdmin: string; newAdmin: string }
>;

export type BeaconUpgradedEvent = TypedEvent<[string] & { beacon: string }>;

export type FCMTraderUpdateEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber] & {
    trader: string;
    marginInScaledYieldBearingTokens: BigNumber;
    fixedTokenBalance: BigNumber;
    variableTokenBalance: BigNumber;
  }
>;

export type FullyCollateralisedSwapEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
    trader: string;
    desiredNotional: BigNumber;
    sqrtPriceLimitX96: BigNumber;
    cumulativeFeeIncurred: BigNumber;
    fixedTokenDelta: BigNumber;
    variableTokenDelta: BigNumber;
    fixedTokenDeltaUnbalanced: BigNumber;
  }
>;

export type FullyCollateralisedUnwindEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
    trader: string;
    desiredNotional: BigNumber;
    sqrtPriceLimitX96: BigNumber;
    cumulativeFeeIncurred: BigNumber;
    fixedTokenDelta: BigNumber;
    variableTokenDelta: BigNumber;
    fixedTokenDeltaUnbalanced: BigNumber;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type UpgradedEvent = TypedEvent<[string] & { implementation: string }>;

export type fcmPositionSettlementEvent = TypedEvent<
  [string, BigNumber] & { trader: string; settlementCashflow: BigNumber }
>;

export class AaveFCM extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AaveFCMInterface;

  functions: {
    aaveLendingPool(overrides?: CallOverrides): Promise<[string]>;

    getTraderMarginInATokens(
      traderAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { marginInYieldBearingTokens: BigNumber }>;

    getTraderWithYieldBearingAssets(
      trader: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, boolean] & {
          marginInScaledYieldBearingTokens: BigNumber;
          fixedTokenBalance: BigNumber;
          variableTokenBalance: BigNumber;
          isSettled: boolean;
        }
      ] & {
        traderInfo: [BigNumber, BigNumber, BigNumber, boolean] & {
          marginInScaledYieldBearingTokens: BigNumber;
          fixedTokenBalance: BigNumber;
          variableTokenBalance: BigNumber;
          isSettled: boolean;
        };
      }
    >;

    initialize(
      __vamm: string,
      __marginEngine: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initiateFullyCollateralisedFixedTakerSwap(
      notional: BigNumberish,
      sqrtPriceLimitX96: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    marginEngine(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    rateOracle(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPausability(
      state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settleTrader(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    traders(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, boolean] & {
        marginInScaledYieldBearingTokens: BigNumber;
        fixedTokenBalance: BigNumber;
        variableTokenBalance: BigNumber;
        isSettled: boolean;
      }
    >;

    transferMarginToMarginEngineTrader(
      account: string,
      marginDeltaInUnderlyingTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    underlyingToken(overrides?: CallOverrides): Promise<[string]>;

    underlyingYieldBearingToken(overrides?: CallOverrides): Promise<[string]>;

    unwindFullyCollateralisedFixedTakerSwap(
      notionalToUnwind: BigNumberish,
      sqrtPriceLimitX96: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vamm(overrides?: CallOverrides): Promise<[string]>;
  };

  aaveLendingPool(overrides?: CallOverrides): Promise<string>;

  getTraderMarginInATokens(
    traderAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTraderWithYieldBearingAssets(
    trader: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, boolean] & {
      marginInScaledYieldBearingTokens: BigNumber;
      fixedTokenBalance: BigNumber;
      variableTokenBalance: BigNumber;
      isSettled: boolean;
    }
  >;

  initialize(
    __vamm: string,
    __marginEngine: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initiateFullyCollateralisedFixedTakerSwap(
    notional: BigNumberish,
    sqrtPriceLimitX96: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  marginEngine(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  rateOracle(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPausability(
    state: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settleTrader(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  traders(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, boolean] & {
      marginInScaledYieldBearingTokens: BigNumber;
      fixedTokenBalance: BigNumber;
      variableTokenBalance: BigNumber;
      isSettled: boolean;
    }
  >;

  transferMarginToMarginEngineTrader(
    account: string,
    marginDeltaInUnderlyingTokens: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  underlyingToken(overrides?: CallOverrides): Promise<string>;

  underlyingYieldBearingToken(overrides?: CallOverrides): Promise<string>;

  unwindFullyCollateralisedFixedTakerSwap(
    notionalToUnwind: BigNumberish,
    sqrtPriceLimitX96: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vamm(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    aaveLendingPool(overrides?: CallOverrides): Promise<string>;

    getTraderMarginInATokens(
      traderAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTraderWithYieldBearingAssets(
      trader: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, boolean] & {
        marginInScaledYieldBearingTokens: BigNumber;
        fixedTokenBalance: BigNumber;
        variableTokenBalance: BigNumber;
        isSettled: boolean;
      }
    >;

    initialize(
      __vamm: string,
      __marginEngine: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initiateFullyCollateralisedFixedTakerSwap(
      notional: BigNumberish,
      sqrtPriceLimitX96: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        fixedTokenDelta: BigNumber;
        variableTokenDelta: BigNumber;
        cumulativeFeeIncurred: BigNumber;
        fixedTokenDeltaUnbalanced: BigNumber;
      }
    >;

    marginEngine(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    rateOracle(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setPausability(state: boolean, overrides?: CallOverrides): Promise<void>;

    settleTrader(overrides?: CallOverrides): Promise<BigNumber>;

    traders(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, boolean] & {
        marginInScaledYieldBearingTokens: BigNumber;
        fixedTokenBalance: BigNumber;
        variableTokenBalance: BigNumber;
        isSettled: boolean;
      }
    >;

    transferMarginToMarginEngineTrader(
      account: string,
      marginDeltaInUnderlyingTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    underlyingToken(overrides?: CallOverrides): Promise<string>;

    underlyingYieldBearingToken(overrides?: CallOverrides): Promise<string>;

    unwindFullyCollateralisedFixedTakerSwap(
      notionalToUnwind: BigNumberish,
      sqrtPriceLimitX96: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        fixedTokenDelta: BigNumber;
        variableTokenDelta: BigNumber;
        cumulativeFeeIncurred: BigNumber;
        fixedTokenDeltaUnbalanced: BigNumber;
      }
    >;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    vamm(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): TypedEventFilter<
      [string, string],
      { previousAdmin: string; newAdmin: string }
    >;

    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): TypedEventFilter<
      [string, string],
      { previousAdmin: string; newAdmin: string }
    >;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): TypedEventFilter<[string], { beacon: string }>;

    BeaconUpgraded(
      beacon?: string | null
    ): TypedEventFilter<[string], { beacon: string }>;

    "FCMTraderUpdate(address,uint256,int256,int256)"(
      trader?: string | null,
      marginInScaledYieldBearingTokens?: null,
      fixedTokenBalance?: null,
      variableTokenBalance?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        trader: string;
        marginInScaledYieldBearingTokens: BigNumber;
        fixedTokenBalance: BigNumber;
        variableTokenBalance: BigNumber;
      }
    >;

    FCMTraderUpdate(
      trader?: string | null,
      marginInScaledYieldBearingTokens?: null,
      fixedTokenBalance?: null,
      variableTokenBalance?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        trader: string;
        marginInScaledYieldBearingTokens: BigNumber;
        fixedTokenBalance: BigNumber;
        variableTokenBalance: BigNumber;
      }
    >;

    "FullyCollateralisedSwap(address,uint256,uint160,uint256,int256,int256,int256)"(
      trader?: string | null,
      desiredNotional?: null,
      sqrtPriceLimitX96?: null,
      cumulativeFeeIncurred?: null,
      fixedTokenDelta?: null,
      variableTokenDelta?: null,
      fixedTokenDeltaUnbalanced?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        trader: string;
        desiredNotional: BigNumber;
        sqrtPriceLimitX96: BigNumber;
        cumulativeFeeIncurred: BigNumber;
        fixedTokenDelta: BigNumber;
        variableTokenDelta: BigNumber;
        fixedTokenDeltaUnbalanced: BigNumber;
      }
    >;

    FullyCollateralisedSwap(
      trader?: string | null,
      desiredNotional?: null,
      sqrtPriceLimitX96?: null,
      cumulativeFeeIncurred?: null,
      fixedTokenDelta?: null,
      variableTokenDelta?: null,
      fixedTokenDeltaUnbalanced?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        trader: string;
        desiredNotional: BigNumber;
        sqrtPriceLimitX96: BigNumber;
        cumulativeFeeIncurred: BigNumber;
        fixedTokenDelta: BigNumber;
        variableTokenDelta: BigNumber;
        fixedTokenDeltaUnbalanced: BigNumber;
      }
    >;

    "FullyCollateralisedUnwind(address,uint256,uint160,uint256,int256,int256,int256)"(
      trader?: string | null,
      desiredNotional?: null,
      sqrtPriceLimitX96?: null,
      cumulativeFeeIncurred?: null,
      fixedTokenDelta?: null,
      variableTokenDelta?: null,
      fixedTokenDeltaUnbalanced?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        trader: string;
        desiredNotional: BigNumber;
        sqrtPriceLimitX96: BigNumber;
        cumulativeFeeIncurred: BigNumber;
        fixedTokenDelta: BigNumber;
        variableTokenDelta: BigNumber;
        fixedTokenDeltaUnbalanced: BigNumber;
      }
    >;

    FullyCollateralisedUnwind(
      trader?: string | null,
      desiredNotional?: null,
      sqrtPriceLimitX96?: null,
      cumulativeFeeIncurred?: null,
      fixedTokenDelta?: null,
      variableTokenDelta?: null,
      fixedTokenDeltaUnbalanced?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        trader: string;
        desiredNotional: BigNumber;
        sqrtPriceLimitX96: BigNumber;
        cumulativeFeeIncurred: BigNumber;
        fixedTokenDelta: BigNumber;
        variableTokenDelta: BigNumber;
        fixedTokenDeltaUnbalanced: BigNumber;
      }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Upgraded(address)"(
      implementation?: string | null
    ): TypedEventFilter<[string], { implementation: string }>;

    Upgraded(
      implementation?: string | null
    ): TypedEventFilter<[string], { implementation: string }>;

    "fcmPositionSettlement(address,int256)"(
      trader?: string | null,
      settlementCashflow?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { trader: string; settlementCashflow: BigNumber }
    >;

    fcmPositionSettlement(
      trader?: string | null,
      settlementCashflow?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { trader: string; settlementCashflow: BigNumber }
    >;
  };

  estimateGas: {
    aaveLendingPool(overrides?: CallOverrides): Promise<BigNumber>;

    getTraderMarginInATokens(
      traderAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTraderWithYieldBearingAssets(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      __vamm: string,
      __marginEngine: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initiateFullyCollateralisedFixedTakerSwap(
      notional: BigNumberish,
      sqrtPriceLimitX96: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    marginEngine(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    rateOracle(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPausability(
      state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settleTrader(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    traders(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    transferMarginToMarginEngineTrader(
      account: string,
      marginDeltaInUnderlyingTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    underlyingToken(overrides?: CallOverrides): Promise<BigNumber>;

    underlyingYieldBearingToken(overrides?: CallOverrides): Promise<BigNumber>;

    unwindFullyCollateralisedFixedTakerSwap(
      notionalToUnwind: BigNumberish,
      sqrtPriceLimitX96: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vamm(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    aaveLendingPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTraderMarginInATokens(
      traderAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTraderWithYieldBearingAssets(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      __vamm: string,
      __marginEngine: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initiateFullyCollateralisedFixedTakerSwap(
      notional: BigNumberish,
      sqrtPriceLimitX96: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    marginEngine(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rateOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPausability(
      state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settleTrader(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    traders(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferMarginToMarginEngineTrader(
      account: string,
      marginDeltaInUnderlyingTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    underlyingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    underlyingYieldBearingToken(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unwindFullyCollateralisedFixedTakerSwap(
      notionalToUnwind: BigNumberish,
      sqrtPriceLimitX96: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vamm(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
