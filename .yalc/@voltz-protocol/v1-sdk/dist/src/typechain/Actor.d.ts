/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ActorInterface extends ethers.utils.Interface {
  functions: {
    "burnViaAMM(address,address,int24,int24,uint128)": FunctionFragment;
    "initiateFullyCollateralisedFixedTakerSwap(address,uint256,uint160)": FunctionFragment;
    "liquidatePosition(address,int24,int24,address)": FunctionFragment;
    "mintOrBurnViaPeriphery(address,(address,int24,int24,uint256,bool,uint256))": FunctionFragment;
    "mintViaAMM(address,address,int24,int24,uint128)": FunctionFragment;
    "setIntegrationApproval(address,address,bool)": FunctionFragment;
    "settlePosition(address,address,int24,int24)": FunctionFragment;
    "settlePositionViaAMM(address,address,int24,int24)": FunctionFragment;
    "settleYBATrader(address)": FunctionFragment;
    "swapViaAMM(address,(address,int256,uint160,int24,int24))": FunctionFragment;
    "swapViaPeriphery(address,(address,bool,uint256,uint160,int24,int24,uint256))": FunctionFragment;
    "unwindFullyCollateralisedFixedTakerSwap(address,uint256,uint160)": FunctionFragment;
    "updatePositionMarginViaAMM(address,address,int24,int24,int256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "burnViaAMM",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateFullyCollateralisedFixedTakerSwap",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidatePosition",
    values: [string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mintOrBurnViaPeriphery",
    values: [
      string,
      {
        marginEngine: string;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        notional: BigNumberish;
        isMint: boolean;
        marginDelta: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintViaAMM",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setIntegrationApproval",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "settlePosition",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settlePositionViaAMM",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settleYBATrader",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "swapViaAMM",
    values: [
      string,
      {
        recipient: string;
        amountSpecified: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapViaPeriphery",
    values: [
      string,
      {
        marginEngine: string;
        isFT: boolean;
        notional: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        marginDelta: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unwindFullyCollateralisedFixedTakerSwap",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePositionMarginViaAMM",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "burnViaAMM", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initiateFullyCollateralisedFixedTakerSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidatePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintOrBurnViaPeriphery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintViaAMM", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setIntegrationApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settlePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settlePositionViaAMM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleYBATrader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapViaAMM", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapViaPeriphery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unwindFullyCollateralisedFixedTakerSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePositionMarginViaAMM",
    data: BytesLike
  ): Result;

  events: {};
}

export class Actor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ActorInterface;

  functions: {
    burnViaAMM(
      VAMMAddress: string,
      recipient: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initiateFullyCollateralisedFixedTakerSwap(
      FCMAddress: string,
      notional: BigNumberish,
      sqrtPriceLimitX96: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidatePosition(
      MEAddress: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintOrBurnViaPeriphery(
      peripheryAddress: string,
      params: {
        marginEngine: string;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        notional: BigNumberish;
        isMint: boolean;
        marginDelta: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintViaAMM(
      VAMMAddress: string,
      recipient: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIntegrationApproval(
      MEAddress: string,
      intAddress: string,
      allowIntegration: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settlePosition(
      MEAdrress: string,
      recipient: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settlePositionViaAMM(
      MEAddress: string,
      _owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settleYBATrader(
      FCMAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapViaAMM(
      VAMMAddress: string,
      params: {
        recipient: string;
        amountSpecified: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapViaPeriphery(
      peripheryAddress: string,
      params: {
        marginEngine: string;
        isFT: boolean;
        notional: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        marginDelta: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unwindFullyCollateralisedFixedTakerSwap(
      FCMAddress: string,
      notionalToUnwind: BigNumberish,
      sqrtPriceLimitX96: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePositionMarginViaAMM(
      MEAddress: string,
      _owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      marginDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  burnViaAMM(
    VAMMAddress: string,
    recipient: string,
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initiateFullyCollateralisedFixedTakerSwap(
    FCMAddress: string,
    notional: BigNumberish,
    sqrtPriceLimitX96: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidatePosition(
    MEAddress: string,
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintOrBurnViaPeriphery(
    peripheryAddress: string,
    params: {
      marginEngine: string;
      tickLower: BigNumberish;
      tickUpper: BigNumberish;
      notional: BigNumberish;
      isMint: boolean;
      marginDelta: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintViaAMM(
    VAMMAddress: string,
    recipient: string,
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIntegrationApproval(
    MEAddress: string,
    intAddress: string,
    allowIntegration: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settlePosition(
    MEAdrress: string,
    recipient: string,
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settlePositionViaAMM(
    MEAddress: string,
    _owner: string,
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settleYBATrader(
    FCMAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapViaAMM(
    VAMMAddress: string,
    params: {
      recipient: string;
      amountSpecified: BigNumberish;
      sqrtPriceLimitX96: BigNumberish;
      tickLower: BigNumberish;
      tickUpper: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapViaPeriphery(
    peripheryAddress: string,
    params: {
      marginEngine: string;
      isFT: boolean;
      notional: BigNumberish;
      sqrtPriceLimitX96: BigNumberish;
      tickLower: BigNumberish;
      tickUpper: BigNumberish;
      marginDelta: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unwindFullyCollateralisedFixedTakerSwap(
    FCMAddress: string,
    notionalToUnwind: BigNumberish,
    sqrtPriceLimitX96: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePositionMarginViaAMM(
    MEAddress: string,
    _owner: string,
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    marginDelta: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    burnViaAMM(
      VAMMAddress: string,
      recipient: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initiateFullyCollateralisedFixedTakerSwap(
      FCMAddress: string,
      notional: BigNumberish,
      sqrtPriceLimitX96: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidatePosition(
      MEAddress: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    mintOrBurnViaPeriphery(
      peripheryAddress: string,
      params: {
        marginEngine: string;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        notional: BigNumberish;
        isMint: boolean;
        marginDelta: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintViaAMM(
      VAMMAddress: string,
      recipient: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setIntegrationApproval(
      MEAddress: string,
      intAddress: string,
      allowIntegration: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    settlePosition(
      MEAdrress: string,
      recipient: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    settlePositionViaAMM(
      MEAddress: string,
      _owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    settleYBATrader(
      FCMAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    swapViaAMM(
      VAMMAddress: string,
      params: {
        recipient: string;
        amountSpecified: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        _fixedTokenDelta: BigNumber;
        _variableTokenDelta: BigNumber;
        _cumulativeFeeIncurred: BigNumber;
        _fixedTokenDeltaUnbalanced: BigNumber;
        _marginRequirement: BigNumber;
      }
    >;

    swapViaPeriphery(
      peripheryAddress: string,
      params: {
        marginEngine: string;
        isFT: boolean;
        notional: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        marginDelta: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        _fixedTokenDelta: BigNumber;
        _variableTokenDelta: BigNumber;
        _cumulativeFeeIncurred: BigNumber;
        _fixedTokenDeltaUnbalanced: BigNumber;
        _marginRequirement: BigNumber;
      }
    >;

    unwindFullyCollateralisedFixedTakerSwap(
      FCMAddress: string,
      notionalToUnwind: BigNumberish,
      sqrtPriceLimitX96: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePositionMarginViaAMM(
      MEAddress: string,
      _owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      marginDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    burnViaAMM(
      VAMMAddress: string,
      recipient: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initiateFullyCollateralisedFixedTakerSwap(
      FCMAddress: string,
      notional: BigNumberish,
      sqrtPriceLimitX96: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidatePosition(
      MEAddress: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintOrBurnViaPeriphery(
      peripheryAddress: string,
      params: {
        marginEngine: string;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        notional: BigNumberish;
        isMint: boolean;
        marginDelta: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintViaAMM(
      VAMMAddress: string,
      recipient: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIntegrationApproval(
      MEAddress: string,
      intAddress: string,
      allowIntegration: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settlePosition(
      MEAdrress: string,
      recipient: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settlePositionViaAMM(
      MEAddress: string,
      _owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settleYBATrader(
      FCMAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapViaAMM(
      VAMMAddress: string,
      params: {
        recipient: string;
        amountSpecified: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapViaPeriphery(
      peripheryAddress: string,
      params: {
        marginEngine: string;
        isFT: boolean;
        notional: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        marginDelta: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unwindFullyCollateralisedFixedTakerSwap(
      FCMAddress: string,
      notionalToUnwind: BigNumberish,
      sqrtPriceLimitX96: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePositionMarginViaAMM(
      MEAddress: string,
      _owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      marginDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    burnViaAMM(
      VAMMAddress: string,
      recipient: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initiateFullyCollateralisedFixedTakerSwap(
      FCMAddress: string,
      notional: BigNumberish,
      sqrtPriceLimitX96: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidatePosition(
      MEAddress: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintOrBurnViaPeriphery(
      peripheryAddress: string,
      params: {
        marginEngine: string;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        notional: BigNumberish;
        isMint: boolean;
        marginDelta: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintViaAMM(
      VAMMAddress: string,
      recipient: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIntegrationApproval(
      MEAddress: string,
      intAddress: string,
      allowIntegration: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settlePosition(
      MEAdrress: string,
      recipient: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settlePositionViaAMM(
      MEAddress: string,
      _owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settleYBATrader(
      FCMAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapViaAMM(
      VAMMAddress: string,
      params: {
        recipient: string;
        amountSpecified: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapViaPeriphery(
      peripheryAddress: string,
      params: {
        marginEngine: string;
        isFT: boolean;
        notional: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        marginDelta: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unwindFullyCollateralisedFixedTakerSwap(
      FCMAddress: string,
      notionalToUnwind: BigNumberish,
      sqrtPriceLimitX96: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePositionMarginViaAMM(
      MEAddress: string,
      _owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      marginDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
