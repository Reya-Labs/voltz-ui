/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TickBitmapTest,
  TickBitmapTestInterface,
} from "../TickBitmapTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "int16",
        name: "",
        type: "int16",
      },
    ],
    name: "bitmap",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "tick",
        type: "int24",
      },
    ],
    name: "flipTick",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "tick",
        type: "int24",
      },
    ],
    name: "getGasCostOfFlipTick",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "tick",
        type: "int24",
      },
      {
        internalType: "bool",
        name: "lte",
        type: "bool",
      },
    ],
    name: "getGasCostOfNextInitializedTickWithinOneWord",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "tick",
        type: "int24",
      },
    ],
    name: "isInitialized",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "tick",
        type: "int24",
      },
      {
        internalType: "bool",
        name: "lte",
        type: "bool",
      },
    ],
    name: "nextInitializedTickWithinOneWord",
    outputs: [
      {
        internalType: "int24",
        name: "next",
        type: "int24",
      },
      {
        internalType: "bool",
        name: "initialized",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506109a7806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80632bdc2fd3146100675780633e7ba2281461008f5780633ffc81ee146100bc5780638815912f146100ea578063f04bc943146100ff578063f0fc922414610112575b600080fd5b61007a610075366004610691565b610125565b60405190151581526020015b60405180910390f35b6100a261009d3660046106ac565b610158565b6040805160029390930b8352901515602083015201610086565b6100dc6100ca3660046106e8565b60006020819052908152604090205481565b604051908152602001610086565b6100fd6100f8366004610691565b610173565b005b6100dc61010d366004610691565b610183565b6100dc6101203660046106ac565b6101a8565b6000808061013681856001806101c9565b915091508360020b8260020b1461014e576000610150565b805b949350505050565b60008061016881856001866101c9565b915091509250929050565b6101806000826001610386565b50565b6000805a90506101966000846001610386565b5a6101a19082610721565b9392505050565b6000805a90506101bc6000856001866101c9565b50505a6101509082610721565b600080806101d7858761074e565b905060008660020b1280156101f757506101f18587610788565b60020b15155b1561020a5780610206816107aa565b9150505b83156102b75760008061021c83610420565b90925090506000600160ff831681901b906102379082610721565b61024191906107ce565b600184900b600090815260208c905260409020548116801515965090915085610281578861027260ff8516876107e6565b61027c919061082e565b6102ac565b8861028b8261043d565b61029590856108bb565b6102a29060ff16876107e6565b6102ac919061082e565b96505050505061037c565b6000806102cd6102c88460016108de565b610420565b909250905060006102e5600160ff841681901b610721565b600184900b600090815260208c90526040902054901990811680151596509091508561033e57886103178460ff6108bb565b60ff166103258760016108de565b61032f91906108de565b610339919061082e565b610375565b888361034983610542565b61035391906108bb565b60ff166103618760016108de565b61036b91906108de565b610375919061082e565b9650505050505b5094509492505050565b6103908183610788565b60020b156103e45760405162461bcd60e51b815260206004820152601c60248201527b1d1a58dac81b5d5cdd081899481c1c9bdc195c9b1e481cdc1858d95960221b60448201526064015b60405180910390fd5b6000806103f46102c8848661074e565b600191820b60009081526020979097526040909620805460ff9097169190911b90951890945550505050565b600281900b60081d600061043661010084610788565b9050915091565b600080821161045e5760405162461bcd60e51b81526004016103db90610925565b600160801b821061047c57608091821c91610479908261094c565b90505b600160401b821061049a57604091821c91610497908261094c565b90505b600160201b82106104b857602091821c916104b5908261094c565b90505b6201000082106104d557601091821c916104d2908261094c565b90505b61010082106104f157600891821c916104ee908261094c565b90505b6010821061050c57600491821c91610509908261094c565b90505b6004821061052757600291821c91610524908261094c565b90505b6002821061053d5761053a60018261094c565b90505b919050565b60008082116105635760405162461bcd60e51b81526004016103db90610925565b5060ff6001600160801b03821615610587576105806080826108bb565b905061058f565b608082901c91505b6001600160401b038216156105b0576105a96040826108bb565b90506105b8565b604082901c91505b63ffffffff8216156105d6576105cf6020826108bb565b90506105de565b602082901c91505b61ffff8216156105fa576105f36010826108bb565b9050610602565b601082901c91505b60ff82161561061d576106166008826108bb565b9050610625565b600882901c91505b600f821615610640576106396004826108bb565b9050610648565b600482901c91505b60038216156106635761065c6002826108bb565b905061066b565b600282901c91505b600182161561053d5761053a6001826108bb565b8035600281900b811461053d57600080fd5b6000602082840312156106a357600080fd5b6101a18261067f565b600080604083850312156106bf57600080fd5b6106c88361067f565b9150602083013580151581146106dd57600080fd5b809150509250929050565b6000602082840312156106fa57600080fd5b81358060010b81146101a157600080fd5b634e487b7160e01b600052601160045260246000fd5b6000828210156107335761073361070b565b500390565b634e487b7160e01b600052601260045260246000fd5b60008160020b8360020b8061076557610765610738565b627fffff1982146000198214161561077f5761077f61070b565b90059392505050565b60008260020b8061079b5761079b610738565b808360020b0791505092915050565b60008160020b627fffff198114156107c4576107c461070b565b6000190192915050565b600082198211156107e1576107e161070b565b500190565b60008160020b8360020b6000811281627fffff190183128115161561080d5761080d61070b565b81627fffff0183138116156108245761082461070b565b5090039392505050565b60008160020b8360020b627fffff60008213600084138383048511828216161561085a5761085a61070b565b627fffff1960008512828116878305871216156108795761087961070b565b600087129250858205871284841616156108955761089561070b565b858505871281841616156108ab576108ab61070b565b5050509290910295945050505050565b600060ff821660ff8416808210156108d5576108d561070b565b90039392505050565b60008160020b8360020b6000821282627fffff038213811516156109045761090461070b565b82627fffff1903821281161561091c5761091c61070b565b50019392505050565b6020808252600d908201526c078206d757374206265203e203609c1b604082015260600190565b600060ff821660ff84168060ff038211156109695761096961070b565b01939250505056fea2646970667358221220349e285fb338c6b4779ef777725400cbadcac94b4c96c92ec93c9889096a7ed364736f6c63430008090033";

export class TickBitmapTest__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TickBitmapTest> {
    return super.deploy(overrides || {}) as Promise<TickBitmapTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TickBitmapTest {
    return super.attach(address) as TickBitmapTest;
  }
  connect(signer: Signer): TickBitmapTest__factory {
    return super.connect(signer) as TickBitmapTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TickBitmapTestInterface {
    return new utils.Interface(_abi) as TickBitmapTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TickBitmapTest {
    return new Contract(address, _abi, signerOrProvider) as TickBitmapTest;
  }
}
