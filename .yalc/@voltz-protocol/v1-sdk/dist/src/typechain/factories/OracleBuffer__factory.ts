/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { OracleBuffer, OracleBufferInterface } from "../OracleBuffer";

const _abi = [
  {
    inputs: [],
    name: "MAX_BUFFER_LENGTH",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6088610038600b82828239805160001a607314602b57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c8063ad73a0cc146038575b600080fd5b604061ffff81565b60405190815260200160405180910390f3fea264697066735822122028249a3b0d7c346d64811dd55448170743af1e318a5f13d732399a864639dc5e64736f6c63430008090033";

export class OracleBuffer__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<OracleBuffer> {
    return super.deploy(overrides || {}) as Promise<OracleBuffer>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): OracleBuffer {
    return super.attach(address) as OracleBuffer;
  }
  connect(signer: Signer): OracleBuffer__factory {
    return super.connect(signer) as OracleBuffer__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OracleBufferInterface {
    return new utils.Interface(_abi) as OracleBufferInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OracleBuffer {
    return new Contract(address, _abi, signerOrProvider) as OracleBuffer;
  }
}
