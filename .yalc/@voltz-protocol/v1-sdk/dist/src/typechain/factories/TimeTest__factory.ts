/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TimeTest, TimeTestInterface } from "../TimeTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
    ],
    name: "PRBMathUD60x18__FromUintOverflow",
    type: "error",
  },
  {
    inputs: [],
    name: "blockTimestampScaled",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060dc8061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80636feb472e14602d575b600080fd5b60336045565b60405190815260200160405180910390f35b6000604d6052565b905090565b6000604d42827812725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21821115609857604051633492ffd960e01b81526004810183905260240160405180910390fd5b50670de0b6b3a7640000029056fea26469706673582212204ce222d5d047454f01e05e3618fdd583899bc13ddf45064946effcff94a5587d64736f6c63430008090033";

export class TimeTest__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TimeTest> {
    return super.deploy(overrides || {}) as Promise<TimeTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TimeTest {
    return super.attach(address) as TimeTest;
  }
  connect(signer: Signer): TimeTest__factory {
    return super.connect(signer) as TimeTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TimeTestInterface {
    return new utils.Interface(_abi) as TimeTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TimeTest {
    return new Contract(address, _abi, signerOrProvider) as TimeTest;
  }
}
