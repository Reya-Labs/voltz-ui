/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { SwapMathTest, SwapMathTestInterface } from "../SwapMathTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
    ],
    name: "PRBMathUD60x18__FromUintOverflow",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "prod1",
        type: "uint256",
      },
    ],
    name: "PRBMath__MulDivFixedPointOverflow",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "prod1",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "denominator",
        type: "uint256",
      },
    ],
    name: "PRBMath__MulDivOverflow",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "notional",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "timeToMaturityInSeconds",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "feePercentage",
        type: "uint256",
      },
    ],
    name: "computeFeeAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint160",
        name: "sqrtRatioCurrentX96",
        type: "uint160",
      },
      {
        internalType: "uint160",
        name: "sqrtRatioTargetX96",
        type: "uint160",
      },
      {
        internalType: "uint128",
        name: "liquidity",
        type: "uint128",
      },
      {
        internalType: "int256",
        name: "amountRemaining",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "feePercentage",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "timeToMaturityInSeconds",
        type: "uint256",
      },
    ],
    name: "computeSwapStep",
    outputs: [
      {
        internalType: "uint160",
        name: "sqrtQ",
        type: "uint160",
      },
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "feeAmount",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint160",
        name: "sqrtRatioCurrentX96",
        type: "uint160",
      },
      {
        internalType: "uint160",
        name: "sqrtRatioTargetX96",
        type: "uint160",
      },
      {
        internalType: "uint128",
        name: "liquidity",
        type: "uint128",
      },
      {
        internalType: "int256",
        name: "amountRemaining",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "feePercentage",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "timeToMaturityInSeconds",
        type: "uint256",
      },
    ],
    name: "getGasCostOfComputeSwapStep",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610ec4806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80633a2bfc561461004657806392ea035b1461006c578063da27ae4e146100a9575b600080fd5b610059610054366004610c66565b6100bc565b6040519081526020015b60405180910390f35b61007f61007a366004610c66565b61012d565b604080516001600160a01b0390951685526020850193909352918301526060820152608001610063565b6100596100b7366004610cd3565b610197565b6000805a90506101126040518060c001604052808a6001600160a01b03168152602001896001600160a01b03168152602001886001600160801b03168152602001878152602001868152602001858152506101ae565b505050505a6101219082610d15565b98975050505050505050565b6000806000806101836040518060c001604052808c6001600160a01b031681526020018b6001600160a01b031681526020018a6001600160801b03168152602001898152602001888152602001878152506101ae565b929d919c509a509098509650505050505050565b60006101a48484846103d7565b90505b9392505050565b6020810151815160608301516000928392839283926001600160a01b039081169216919091101590828112801591840390610257578261020657610201886000015189602001518a60400151600161040f565b61021f565b61021f886020015189600001518a60400151600161048a565b95508588606001511061023857876020015196506102bf565b610250886000015189604001518a6060015186610596565b96506102bf565b8261027a57610275886000015189602001518a60400151600061048a565b610293565b610293886020015189600001518a60400151600061040f565b94508481106102a857876020015196506102bf565b6102bc886000015189604001518386610608565b96505b60208801516001600160a01b038881169116146000841561033b578180156102e45750835b610302576102fd898b600001518c60400151600161048a565b610304565b875b9750818015610311575083155b61032f5761032a898b600001518c60400151600061040f565b610331565b865b9650869050610398565b8180156103455750835b6103635761035e8a600001518a8c60400151600161040f565b610365565b875b9750818015610372575083155b6103905761038b8a600001518a8c60400151600061048a565b610392565b865b96508790505b831580156103a557508287115b156103ae578296505b6103c96103ba8261067a565b8b60a001518c608001516103d7565b955050505050509193509193565b6000806103e3846106c7565b905060006103fa866103f586856106e4565b6106e4565b670de0b6b3a764000090049695505050505050565b6000836001600160a01b0316856001600160a01b0316111561042f579293925b8161045c57610457836001600160801b03168686036001600160a01b0316600160601b6106f0565b61047f565b61047f836001600160801b03168686036001600160a01b0316600160601b6107e8565b90505b949350505050565b6000836001600160a01b0316856001600160a01b031611156104aa579293925b600160601b600160e01b03606084901b1660006104c78787610d2c565b6001600160a01b031690506000876001600160a01b0316116105295760405162461bcd60e51b8152602060048201526016602482015275073717274207072696365206d757374206265203e20360541b60448201526064015b60405180910390fd5b8361055f57866001600160a01b031661054c8383896001600160a01b03166106f0565b8161055957610559610d54565b0461058b565b61058b6105768383896001600160a01b03166107e8565b886001600160a01b0316808204910615150190565b979650505050505050565b600080856001600160a01b0316116105c05760405162461bcd60e51b815260040161052090610d6a565b6000846001600160801b0316116105e95760405162461bcd60e51b815260040161052090610d9e565b816105fb576104578585856001610844565b61047f8585856001610966565b600080856001600160a01b0316116106325760405162461bcd60e51b815260040161052090610d6a565b6000846001600160801b03161161065b5760405162461bcd60e51b815260040161052090610d9e565b8161066d576104578585856000610966565b61047f8585856000610844565b60007812725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f218211156106b957604051633492ffd960e01b815260048101839052602401610520565b50670de0b6b3a76400000290565b60006106de826a1a1601fc4ea7109e000000610abd565b92915050565b60006101a78383610ad2565b60008080600019858709858702925082811083820303915050806000141561076057600084116107555760405162461bcd60e51b815260206004820152601060248201526f4469766973696f6e206279207a65726f60801b6044820152606401610520565b5082900490506101a7565b80841161077f5760405162461bcd60e51b815260040161052090610dcd565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b60006107f58484846106f0565b90506000828061080757610807610d54565b84860911156101a75760001981106108315760405162461bcd60e51b815260040161052090610dcd565b8061083b81610def565b95945050505050565b600081156108ae5760006001600160a01b0384111561087a5761087584600160601b876001600160801b03166106f0565b610891565b6108916001600160801b038616606086901b610e0a565b905061089c81610b94565b6108a69087610e2c565b915050610482565b60006001600160a01b038411156108dc576108d784600160601b876001600160801b03166107e8565b6108f9565b6108f9606085901b6001600160801b038716808204910615150190565b905080866001600160a01b0316116109535760405162461bcd60e51b815260206004820152601e60248201527f7374617274696e67207078206d757374206265203e2071756f7469656e7400006044820152606401610520565b6108a6816001600160a01b038816610d15565b600082610974575083610482565b600160601b600160e01b03606085901b168215610a1f5760006001600160a01b038716856109a28282610e57565b92506109ae9083610e0a565b14156109e95760006109c08284610e76565b90508281106109e7576109dd83896001600160a01b0316836107e8565b9350505050610482565b505b610a168286610a016001600160a01b038b1683610e0a565b610a0b9190610e76565b808204910615150190565b92505050610482565b60006001600160a01b03871685610a368282610e57565b9250610a429083610e0a565b148015610a4e57508082115b610a935760405162461bcd60e51b815260206004820152601660248201527564656e6f6d696e61746f7220756e646572666c6f777360501b6044820152606401610520565b6000610a9f8284610d15565b90506109dd610ab8848a6001600160a01b0316846107e8565b610b94565b60006101a783670de0b6b3a764000084610bea565b60008080600019848609848602925082811083820303915050670de0b6b3a76400008110610b165760405163698d9a0160e11b815260048101829052602401610520565b600080670de0b6b3a76400008688099150506706f05b59d3b1ffff811182610b505780670de0b6b3a76400008504019450505050506106de565b620400008285030493909111909103600160ee1b02919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690201905092915050565b806001600160a01b0381168114610be55760405162461bcd60e51b815260206004820152601560248201527406f766572666c6f7720696e20746f55696e7431363605c1b6044820152606401610520565b919050565b600080806000198587098587029250828110838203039150508060001415610c2557838281610c1b57610c1b610d54565b04925050506101a7565b83811061077f57604051631dcf306360e21b81526004810182905260248101859052604401610520565b80356001600160a01b0381168114610be557600080fd5b60008060008060008060c08789031215610c7f57600080fd5b610c8887610c4f565b9550610c9660208801610c4f565b945060408701356001600160801b0381168114610cb257600080fd5b959894975094956060810135955060808101359460a0909101359350915050565b600080600060608486031215610ce857600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052601160045260246000fd5b600082821015610d2757610d27610cff565b500390565b60006001600160a01b0383811690831681811015610d4c57610d4c610cff565b039392505050565b634e487b7160e01b600052601260045260246000fd5b6020808252601a908201527907374617274696e67207072696365206d757374206265203e20360341b604082015260600190565b60208082526015908201527406c6971756964697479206d757374206265203e203605c1b604082015260600190565b6020808252600890820152676f766572666c6f7760c01b604082015260600190565b6000600019821415610e0357610e03610cff565b5060010190565b600082610e2757634e487b7160e01b600052601260045260246000fd5b500490565b60006001600160a01b03828116848216808303821115610e4e57610e4e610cff565b01949350505050565b6000816000190483118215151615610e7157610e71610cff565b500290565b60008219821115610e8957610e89610cff565b50019056fea26469706673582212209e5844c7f0c02f1344c487c63b84dadfe67a6df2306d4bc038c3943baf1ff71364736f6c63430008090033";

export class SwapMathTest__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SwapMathTest> {
    return super.deploy(overrides || {}) as Promise<SwapMathTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): SwapMathTest {
    return super.attach(address) as SwapMathTest;
  }
  connect(signer: Signer): SwapMathTest__factory {
    return super.connect(signer) as SwapMathTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SwapMathTestInterface {
    return new utils.Interface(_abi) as SwapMathTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SwapMathTest {
    return new Contract(address, _abi, signerOrProvider) as SwapMathTest;
  }
}
