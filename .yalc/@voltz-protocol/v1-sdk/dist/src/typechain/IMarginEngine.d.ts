/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IMarginEngineInterface extends ethers.utils.Interface {
  functions: {
    "cacheMaxAgeInSeconds()": FunctionFragment;
    "collectProtocol(address,uint256)": FunctionFragment;
    "factory()": FunctionFragment;
    "fcm()": FunctionFragment;
    "getHistoricalApy()": FunctionFragment;
    "getPosition(address,int24,int24)": FunctionFragment;
    "getPositionMarginRequirement(address,int24,int24,bool)": FunctionFragment;
    "initialize(address,address,uint256,uint256)": FunctionFragment;
    "liquidatePosition(address,int24,int24)": FunctionFragment;
    "liquidatorRewardWad()": FunctionFragment;
    "lookbackWindowInSeconds()": FunctionFragment;
    "rateOracle()": FunctionFragment;
    "setCacheMaxAgeInSeconds(uint256)": FunctionFragment;
    "setFCM(address)": FunctionFragment;
    "setLiquidatorReward(uint256)": FunctionFragment;
    "setLookbackWindowInSeconds(uint256)": FunctionFragment;
    "setMarginCalculatorParameters((uint256,uint256,int256,int256,int256,int256,int256,int256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "setVAMM(address)": FunctionFragment;
    "settlePosition(address,int24,int24)": FunctionFragment;
    "termEndTimestampWad()": FunctionFragment;
    "termStartTimestampWad()": FunctionFragment;
    "transferMarginToFCMTrader(address,uint256)": FunctionFragment;
    "underlyingToken()": FunctionFragment;
    "updatePositionMargin(address,int24,int24,int256)": FunctionFragment;
    "updatePositionPostVAMMInducedMintBurn((address,int24,int24,int128))": FunctionFragment;
    "updatePositionPostVAMMInducedSwap(address,int24,int24,int256,int256,uint256,int256)": FunctionFragment;
    "vamm()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "cacheMaxAgeInSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectProtocol",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(functionFragment: "fcm", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getHistoricalApy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPosition",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionMarginRequirement",
    values: [string, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidatePosition",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidatorRewardWad",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lookbackWindowInSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rateOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCacheMaxAgeInSeconds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setFCM", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setLiquidatorReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLookbackWindowInSeconds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarginCalculatorParameters",
    values: [
      {
        apyUpperMultiplierWad: BigNumberish;
        apyLowerMultiplierWad: BigNumberish;
        sigmaSquaredWad: BigNumberish;
        alphaWad: BigNumberish;
        betaWad: BigNumberish;
        xiUpperWad: BigNumberish;
        xiLowerWad: BigNumberish;
        tMaxWad: BigNumberish;
        devMulLeftUnwindLMWad: BigNumberish;
        devMulRightUnwindLMWad: BigNumberish;
        devMulLeftUnwindIMWad: BigNumberish;
        devMulRightUnwindIMWad: BigNumberish;
        fixedRateDeviationMinLeftUnwindLMWad: BigNumberish;
        fixedRateDeviationMinRightUnwindLMWad: BigNumberish;
        fixedRateDeviationMinLeftUnwindIMWad: BigNumberish;
        fixedRateDeviationMinRightUnwindIMWad: BigNumberish;
        gammaWad: BigNumberish;
        minMarginToIncentiviseLiquidators: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "setVAMM", values: [string]): string;
  encodeFunctionData(
    functionFragment: "settlePosition",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "termEndTimestampWad",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "termStartTimestampWad",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferMarginToFCMTrader",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updatePositionMargin",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePositionPostVAMMInducedMintBurn",
    values: [
      {
        owner: string;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        liquidityDelta: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePositionPostVAMMInducedSwap",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "vamm", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "cacheMaxAgeInSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fcm", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getHistoricalApy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionMarginRequirement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidatePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidatorRewardWad",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lookbackWindowInSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rateOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCacheMaxAgeInSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFCM", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidatorReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLookbackWindowInSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarginCalculatorParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setVAMM", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "settlePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "termEndTimestampWad",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "termStartTimestampWad",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferMarginToFCMTrader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePositionMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePositionPostVAMMInducedMintBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePositionPostVAMMInducedSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vamm", data: BytesLike): Result;

  events: {
    "CacheMaxAgeSetting(uint256)": EventFragment;
    "FCMSetting(address)": EventFragment;
    "HistoricalApyWindowSetting(uint256)": EventFragment;
    "LiquidatorRewardSetting(uint256)": EventFragment;
    "MarginCalculatorParametersSetting(tuple)": EventFragment;
    "PositionLiquidation(address,int24,int24,int256,int256,int256,uint128,address)": EventFragment;
    "PositionMarginUpdate(address,int24,int24,int256)": EventFragment;
    "PositionPostMintBurnUpdate(address,int24,int24,uint128)": EventFragment;
    "PositionPostSwapUpdate(address,int24,int24,int256,int256,int256)": EventFragment;
    "PositionSettlement(address,int24,int24,int256,int256,int256,int256,bool)": EventFragment;
    "ProtocolCollection(address,address,uint256)": EventFragment;
    "VAMMSetting(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CacheMaxAgeSetting"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FCMSetting"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HistoricalApyWindowSetting"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidatorRewardSetting"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MarginCalculatorParametersSetting"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionLiquidation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionMarginUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionPostMintBurnUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionPostSwapUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionSettlement"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProtocolCollection"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VAMMSetting"): EventFragment;
}

export type CacheMaxAgeSettingEvent = TypedEvent<
  [BigNumber] & { cacheMaxAgeInSeconds: BigNumber }
>;

export type FCMSettingEvent = TypedEvent<[string] & { fcm: string }>;

export type HistoricalApyWindowSettingEvent = TypedEvent<
  [BigNumber] & { secondsAgo: BigNumber }
>;

export type LiquidatorRewardSettingEvent = TypedEvent<
  [BigNumber] & { liquidatorRewardWad: BigNumber }
>;

export type MarginCalculatorParametersSettingEvent = TypedEvent<
  [
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      apyUpperMultiplierWad: BigNumber;
      apyLowerMultiplierWad: BigNumber;
      sigmaSquaredWad: BigNumber;
      alphaWad: BigNumber;
      betaWad: BigNumber;
      xiUpperWad: BigNumber;
      xiLowerWad: BigNumber;
      tMaxWad: BigNumber;
      devMulLeftUnwindLMWad: BigNumber;
      devMulRightUnwindLMWad: BigNumber;
      devMulLeftUnwindIMWad: BigNumber;
      devMulRightUnwindIMWad: BigNumber;
      fixedRateDeviationMinLeftUnwindLMWad: BigNumber;
      fixedRateDeviationMinRightUnwindLMWad: BigNumber;
      fixedRateDeviationMinLeftUnwindIMWad: BigNumber;
      fixedRateDeviationMinRightUnwindIMWad: BigNumber;
      gammaWad: BigNumber;
      minMarginToIncentiviseLiquidators: BigNumber;
    }
  ] & {
    marginCalculatorParameters: [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      apyUpperMultiplierWad: BigNumber;
      apyLowerMultiplierWad: BigNumber;
      sigmaSquaredWad: BigNumber;
      alphaWad: BigNumber;
      betaWad: BigNumber;
      xiUpperWad: BigNumber;
      xiLowerWad: BigNumber;
      tMaxWad: BigNumber;
      devMulLeftUnwindLMWad: BigNumber;
      devMulRightUnwindLMWad: BigNumber;
      devMulLeftUnwindIMWad: BigNumber;
      devMulRightUnwindIMWad: BigNumber;
      fixedRateDeviationMinLeftUnwindLMWad: BigNumber;
      fixedRateDeviationMinRightUnwindLMWad: BigNumber;
      fixedRateDeviationMinLeftUnwindIMWad: BigNumber;
      fixedRateDeviationMinRightUnwindIMWad: BigNumber;
      gammaWad: BigNumber;
      minMarginToIncentiviseLiquidators: BigNumber;
    };
  }
>;

export type PositionLiquidationEvent = TypedEvent<
  [
    string,
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    owner: string;
    tickLower: number;
    tickUpper: number;
    fixedTokenBalance: BigNumber;
    variableTokenBalance: BigNumber;
    margin: BigNumber;
    liquidity: BigNumber;
    liquidator: string;
  }
>;

export type PositionMarginUpdateEvent = TypedEvent<
  [string, number, number, BigNumber] & {
    owner: string;
    tickLower: number;
    tickUpper: number;
    positionMargin: BigNumber;
  }
>;

export type PositionPostMintBurnUpdateEvent = TypedEvent<
  [string, number, number, BigNumber] & {
    owner: string;
    tickLower: number;
    tickUpper: number;
    liquidity: BigNumber;
  }
>;

export type PositionPostSwapUpdateEvent = TypedEvent<
  [string, number, number, BigNumber, BigNumber, BigNumber] & {
    owner: string;
    tickLower: number;
    tickUpper: number;
    fixedTokenBalance: BigNumber;
    variableTokenBalance: BigNumber;
    margin: BigNumber;
  }
>;

export type PositionSettlementEvent = TypedEvent<
  [
    string,
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    owner: string;
    tickLower: number;
    tickUpper: number;
    fixedTokenBalance: BigNumber;
    variableTokenBalance: BigNumber;
    margin: BigNumber;
    settlementCashflow: BigNumber;
    isSettled: boolean;
  }
>;

export type ProtocolCollectionEvent = TypedEvent<
  [string, string, BigNumber] & {
    sender: string;
    recipient: string;
    amount: BigNumber;
  }
>;

export type VAMMSettingEvent = TypedEvent<[string] & { vamm: string }>;

export class IMarginEngine extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IMarginEngineInterface;

  functions: {
    cacheMaxAgeInSeconds(overrides?: CallOverrides): Promise<[BigNumber]>;

    collectProtocol(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    fcm(overrides?: CallOverrides): Promise<[string]>;

    getHistoricalApy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getPosition(
      _owner: string,
      _tickLower: BigNumberish,
      _tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getPositionMarginRequirement(
      _recipient: string,
      _tickLower: BigNumberish,
      _tickUpper: BigNumberish,
      _isLM: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      __underlyingToken: string,
      __rateOracle: string,
      __termStartTimestampWad: BigNumberish,
      __termEndTimestampWad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidatePosition(
      _owner: string,
      _tickLower: BigNumberish,
      _tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidatorRewardWad(overrides?: CallOverrides): Promise<[BigNumber]>;

    lookbackWindowInSeconds(overrides?: CallOverrides): Promise<[BigNumber]>;

    rateOracle(overrides?: CallOverrides): Promise<[string]>;

    setCacheMaxAgeInSeconds(
      _cacheMaxAgeInSeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFCM(
      _newFCM: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLiquidatorReward(
      _liquidatorRewardWad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLookbackWindowInSeconds(
      _secondsAgo: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMarginCalculatorParameters(
      _marginCalculatorParameters: {
        apyUpperMultiplierWad: BigNumberish;
        apyLowerMultiplierWad: BigNumberish;
        sigmaSquaredWad: BigNumberish;
        alphaWad: BigNumberish;
        betaWad: BigNumberish;
        xiUpperWad: BigNumberish;
        xiLowerWad: BigNumberish;
        tMaxWad: BigNumberish;
        devMulLeftUnwindLMWad: BigNumberish;
        devMulRightUnwindLMWad: BigNumberish;
        devMulLeftUnwindIMWad: BigNumberish;
        devMulRightUnwindIMWad: BigNumberish;
        fixedRateDeviationMinLeftUnwindLMWad: BigNumberish;
        fixedRateDeviationMinRightUnwindLMWad: BigNumberish;
        fixedRateDeviationMinLeftUnwindIMWad: BigNumberish;
        fixedRateDeviationMinRightUnwindIMWad: BigNumberish;
        gammaWad: BigNumberish;
        minMarginToIncentiviseLiquidators: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVAMM(
      _vAMM: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settlePosition(
      _owner: string,
      _tickLower: BigNumberish,
      _tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    termEndTimestampWad(overrides?: CallOverrides): Promise<[BigNumber]>;

    termStartTimestampWad(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferMarginToFCMTrader(
      _account: string,
      _marginDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    underlyingToken(overrides?: CallOverrides): Promise<[string]>;

    updatePositionMargin(
      _owner: string,
      _tickLower: BigNumberish,
      _tickUpper: BigNumberish,
      marginDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePositionPostVAMMInducedMintBurn(
      _params: {
        owner: string;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        liquidityDelta: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePositionPostVAMMInducedSwap(
      _owner: string,
      _tickLower: BigNumberish,
      _tickUpper: BigNumberish,
      _fixedTokenDelta: BigNumberish,
      _variableTokenDelta: BigNumberish,
      _cumulativeFeeIncurred: BigNumberish,
      _fixedTokenDeltaUnbalanced: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vamm(overrides?: CallOverrides): Promise<[string]>;
  };

  cacheMaxAgeInSeconds(overrides?: CallOverrides): Promise<BigNumber>;

  collectProtocol(
    _recipient: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  fcm(overrides?: CallOverrides): Promise<string>;

  getHistoricalApy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getPosition(
    _owner: string,
    _tickLower: BigNumberish,
    _tickUpper: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getPositionMarginRequirement(
    _recipient: string,
    _tickLower: BigNumberish,
    _tickUpper: BigNumberish,
    _isLM: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    __underlyingToken: string,
    __rateOracle: string,
    __termStartTimestampWad: BigNumberish,
    __termEndTimestampWad: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidatePosition(
    _owner: string,
    _tickLower: BigNumberish,
    _tickUpper: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidatorRewardWad(overrides?: CallOverrides): Promise<BigNumber>;

  lookbackWindowInSeconds(overrides?: CallOverrides): Promise<BigNumber>;

  rateOracle(overrides?: CallOverrides): Promise<string>;

  setCacheMaxAgeInSeconds(
    _cacheMaxAgeInSeconds: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFCM(
    _newFCM: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLiquidatorReward(
    _liquidatorRewardWad: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLookbackWindowInSeconds(
    _secondsAgo: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMarginCalculatorParameters(
    _marginCalculatorParameters: {
      apyUpperMultiplierWad: BigNumberish;
      apyLowerMultiplierWad: BigNumberish;
      sigmaSquaredWad: BigNumberish;
      alphaWad: BigNumberish;
      betaWad: BigNumberish;
      xiUpperWad: BigNumberish;
      xiLowerWad: BigNumberish;
      tMaxWad: BigNumberish;
      devMulLeftUnwindLMWad: BigNumberish;
      devMulRightUnwindLMWad: BigNumberish;
      devMulLeftUnwindIMWad: BigNumberish;
      devMulRightUnwindIMWad: BigNumberish;
      fixedRateDeviationMinLeftUnwindLMWad: BigNumberish;
      fixedRateDeviationMinRightUnwindLMWad: BigNumberish;
      fixedRateDeviationMinLeftUnwindIMWad: BigNumberish;
      fixedRateDeviationMinRightUnwindIMWad: BigNumberish;
      gammaWad: BigNumberish;
      minMarginToIncentiviseLiquidators: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVAMM(
    _vAMM: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settlePosition(
    _owner: string,
    _tickLower: BigNumberish,
    _tickUpper: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  termEndTimestampWad(overrides?: CallOverrides): Promise<BigNumber>;

  termStartTimestampWad(overrides?: CallOverrides): Promise<BigNumber>;

  transferMarginToFCMTrader(
    _account: string,
    _marginDelta: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  underlyingToken(overrides?: CallOverrides): Promise<string>;

  updatePositionMargin(
    _owner: string,
    _tickLower: BigNumberish,
    _tickUpper: BigNumberish,
    marginDelta: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePositionPostVAMMInducedMintBurn(
    _params: {
      owner: string;
      tickLower: BigNumberish;
      tickUpper: BigNumberish;
      liquidityDelta: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePositionPostVAMMInducedSwap(
    _owner: string,
    _tickLower: BigNumberish,
    _tickUpper: BigNumberish,
    _fixedTokenDelta: BigNumberish,
    _variableTokenDelta: BigNumberish,
    _cumulativeFeeIncurred: BigNumberish,
    _fixedTokenDeltaUnbalanced: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vamm(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    cacheMaxAgeInSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    collectProtocol(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    factory(overrides?: CallOverrides): Promise<string>;

    fcm(overrides?: CallOverrides): Promise<string>;

    getHistoricalApy(overrides?: CallOverrides): Promise<BigNumber>;

    getPosition(
      _owner: string,
      _tickLower: BigNumberish,
      _tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        isSettled: boolean;
        _liquidity: BigNumber;
        margin: BigNumber;
        fixedTokenGrowthInsideLastX128: BigNumber;
        variableTokenGrowthInsideLastX128: BigNumber;
        fixedTokenBalance: BigNumber;
        variableTokenBalance: BigNumber;
        feeGrowthInsideLastX128: BigNumber;
        rewardPerAmount: BigNumber;
      }
    >;

    getPositionMarginRequirement(
      _recipient: string,
      _tickLower: BigNumberish,
      _tickUpper: BigNumberish,
      _isLM: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      __underlyingToken: string,
      __rateOracle: string,
      __termStartTimestampWad: BigNumberish,
      __termEndTimestampWad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidatePosition(
      _owner: string,
      _tickLower: BigNumberish,
      _tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidatorRewardWad(overrides?: CallOverrides): Promise<BigNumber>;

    lookbackWindowInSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    rateOracle(overrides?: CallOverrides): Promise<string>;

    setCacheMaxAgeInSeconds(
      _cacheMaxAgeInSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFCM(_newFCM: string, overrides?: CallOverrides): Promise<void>;

    setLiquidatorReward(
      _liquidatorRewardWad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLookbackWindowInSeconds(
      _secondsAgo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMarginCalculatorParameters(
      _marginCalculatorParameters: {
        apyUpperMultiplierWad: BigNumberish;
        apyLowerMultiplierWad: BigNumberish;
        sigmaSquaredWad: BigNumberish;
        alphaWad: BigNumberish;
        betaWad: BigNumberish;
        xiUpperWad: BigNumberish;
        xiLowerWad: BigNumberish;
        tMaxWad: BigNumberish;
        devMulLeftUnwindLMWad: BigNumberish;
        devMulRightUnwindLMWad: BigNumberish;
        devMulLeftUnwindIMWad: BigNumberish;
        devMulRightUnwindIMWad: BigNumberish;
        fixedRateDeviationMinLeftUnwindLMWad: BigNumberish;
        fixedRateDeviationMinRightUnwindLMWad: BigNumberish;
        fixedRateDeviationMinLeftUnwindIMWad: BigNumberish;
        fixedRateDeviationMinRightUnwindIMWad: BigNumberish;
        gammaWad: BigNumberish;
        minMarginToIncentiviseLiquidators: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    setVAMM(_vAMM: string, overrides?: CallOverrides): Promise<void>;

    settlePosition(
      _owner: string,
      _tickLower: BigNumberish,
      _tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    termEndTimestampWad(overrides?: CallOverrides): Promise<BigNumber>;

    termStartTimestampWad(overrides?: CallOverrides): Promise<BigNumber>;

    transferMarginToFCMTrader(
      _account: string,
      _marginDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    underlyingToken(overrides?: CallOverrides): Promise<string>;

    updatePositionMargin(
      _owner: string,
      _tickLower: BigNumberish,
      _tickUpper: BigNumberish,
      marginDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePositionPostVAMMInducedMintBurn(
      _params: {
        owner: string;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        liquidityDelta: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updatePositionPostVAMMInducedSwap(
      _owner: string,
      _tickLower: BigNumberish,
      _tickUpper: BigNumberish,
      _fixedTokenDelta: BigNumberish,
      _variableTokenDelta: BigNumberish,
      _cumulativeFeeIncurred: BigNumberish,
      _fixedTokenDeltaUnbalanced: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vamm(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "CacheMaxAgeSetting(uint256)"(
      cacheMaxAgeInSeconds?: null
    ): TypedEventFilter<[BigNumber], { cacheMaxAgeInSeconds: BigNumber }>;

    CacheMaxAgeSetting(
      cacheMaxAgeInSeconds?: null
    ): TypedEventFilter<[BigNumber], { cacheMaxAgeInSeconds: BigNumber }>;

    "FCMSetting(address)"(
      fcm?: string | null
    ): TypedEventFilter<[string], { fcm: string }>;

    FCMSetting(
      fcm?: string | null
    ): TypedEventFilter<[string], { fcm: string }>;

    "HistoricalApyWindowSetting(uint256)"(
      secondsAgo?: null
    ): TypedEventFilter<[BigNumber], { secondsAgo: BigNumber }>;

    HistoricalApyWindowSetting(
      secondsAgo?: null
    ): TypedEventFilter<[BigNumber], { secondsAgo: BigNumber }>;

    "LiquidatorRewardSetting(uint256)"(
      liquidatorRewardWad?: null
    ): TypedEventFilter<[BigNumber], { liquidatorRewardWad: BigNumber }>;

    LiquidatorRewardSetting(
      liquidatorRewardWad?: null
    ): TypedEventFilter<[BigNumber], { liquidatorRewardWad: BigNumber }>;

    "MarginCalculatorParametersSetting(tuple)"(
      marginCalculatorParameters?: null
    ): TypedEventFilter<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          apyUpperMultiplierWad: BigNumber;
          apyLowerMultiplierWad: BigNumber;
          sigmaSquaredWad: BigNumber;
          alphaWad: BigNumber;
          betaWad: BigNumber;
          xiUpperWad: BigNumber;
          xiLowerWad: BigNumber;
          tMaxWad: BigNumber;
          devMulLeftUnwindLMWad: BigNumber;
          devMulRightUnwindLMWad: BigNumber;
          devMulLeftUnwindIMWad: BigNumber;
          devMulRightUnwindIMWad: BigNumber;
          fixedRateDeviationMinLeftUnwindLMWad: BigNumber;
          fixedRateDeviationMinRightUnwindLMWad: BigNumber;
          fixedRateDeviationMinLeftUnwindIMWad: BigNumber;
          fixedRateDeviationMinRightUnwindIMWad: BigNumber;
          gammaWad: BigNumber;
          minMarginToIncentiviseLiquidators: BigNumber;
        }
      ],
      {
        marginCalculatorParameters: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          apyUpperMultiplierWad: BigNumber;
          apyLowerMultiplierWad: BigNumber;
          sigmaSquaredWad: BigNumber;
          alphaWad: BigNumber;
          betaWad: BigNumber;
          xiUpperWad: BigNumber;
          xiLowerWad: BigNumber;
          tMaxWad: BigNumber;
          devMulLeftUnwindLMWad: BigNumber;
          devMulRightUnwindLMWad: BigNumber;
          devMulLeftUnwindIMWad: BigNumber;
          devMulRightUnwindIMWad: BigNumber;
          fixedRateDeviationMinLeftUnwindLMWad: BigNumber;
          fixedRateDeviationMinRightUnwindLMWad: BigNumber;
          fixedRateDeviationMinLeftUnwindIMWad: BigNumber;
          fixedRateDeviationMinRightUnwindIMWad: BigNumber;
          gammaWad: BigNumber;
          minMarginToIncentiviseLiquidators: BigNumber;
        };
      }
    >;

    MarginCalculatorParametersSetting(
      marginCalculatorParameters?: null
    ): TypedEventFilter<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          apyUpperMultiplierWad: BigNumber;
          apyLowerMultiplierWad: BigNumber;
          sigmaSquaredWad: BigNumber;
          alphaWad: BigNumber;
          betaWad: BigNumber;
          xiUpperWad: BigNumber;
          xiLowerWad: BigNumber;
          tMaxWad: BigNumber;
          devMulLeftUnwindLMWad: BigNumber;
          devMulRightUnwindLMWad: BigNumber;
          devMulLeftUnwindIMWad: BigNumber;
          devMulRightUnwindIMWad: BigNumber;
          fixedRateDeviationMinLeftUnwindLMWad: BigNumber;
          fixedRateDeviationMinRightUnwindLMWad: BigNumber;
          fixedRateDeviationMinLeftUnwindIMWad: BigNumber;
          fixedRateDeviationMinRightUnwindIMWad: BigNumber;
          gammaWad: BigNumber;
          minMarginToIncentiviseLiquidators: BigNumber;
        }
      ],
      {
        marginCalculatorParameters: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          apyUpperMultiplierWad: BigNumber;
          apyLowerMultiplierWad: BigNumber;
          sigmaSquaredWad: BigNumber;
          alphaWad: BigNumber;
          betaWad: BigNumber;
          xiUpperWad: BigNumber;
          xiLowerWad: BigNumber;
          tMaxWad: BigNumber;
          devMulLeftUnwindLMWad: BigNumber;
          devMulRightUnwindLMWad: BigNumber;
          devMulLeftUnwindIMWad: BigNumber;
          devMulRightUnwindIMWad: BigNumber;
          fixedRateDeviationMinLeftUnwindLMWad: BigNumber;
          fixedRateDeviationMinRightUnwindLMWad: BigNumber;
          fixedRateDeviationMinLeftUnwindIMWad: BigNumber;
          fixedRateDeviationMinRightUnwindIMWad: BigNumber;
          gammaWad: BigNumber;
          minMarginToIncentiviseLiquidators: BigNumber;
        };
      }
    >;

    "PositionLiquidation(address,int24,int24,int256,int256,int256,uint128,address)"(
      owner?: string | null,
      tickLower?: BigNumberish | null,
      tickUpper?: BigNumberish | null,
      fixedTokenBalance?: null,
      variableTokenBalance?: null,
      margin?: null,
      liquidity?: null,
      liquidator?: null
    ): TypedEventFilter<
      [
        string,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ],
      {
        owner: string;
        tickLower: number;
        tickUpper: number;
        fixedTokenBalance: BigNumber;
        variableTokenBalance: BigNumber;
        margin: BigNumber;
        liquidity: BigNumber;
        liquidator: string;
      }
    >;

    PositionLiquidation(
      owner?: string | null,
      tickLower?: BigNumberish | null,
      tickUpper?: BigNumberish | null,
      fixedTokenBalance?: null,
      variableTokenBalance?: null,
      margin?: null,
      liquidity?: null,
      liquidator?: null
    ): TypedEventFilter<
      [
        string,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ],
      {
        owner: string;
        tickLower: number;
        tickUpper: number;
        fixedTokenBalance: BigNumber;
        variableTokenBalance: BigNumber;
        margin: BigNumber;
        liquidity: BigNumber;
        liquidator: string;
      }
    >;

    "PositionMarginUpdate(address,int24,int24,int256)"(
      owner?: string | null,
      tickLower?: BigNumberish | null,
      tickUpper?: BigNumberish | null,
      positionMargin?: null
    ): TypedEventFilter<
      [string, number, number, BigNumber],
      {
        owner: string;
        tickLower: number;
        tickUpper: number;
        positionMargin: BigNumber;
      }
    >;

    PositionMarginUpdate(
      owner?: string | null,
      tickLower?: BigNumberish | null,
      tickUpper?: BigNumberish | null,
      positionMargin?: null
    ): TypedEventFilter<
      [string, number, number, BigNumber],
      {
        owner: string;
        tickLower: number;
        tickUpper: number;
        positionMargin: BigNumber;
      }
    >;

    "PositionPostMintBurnUpdate(address,int24,int24,uint128)"(
      owner?: string | null,
      tickLower?: BigNumberish | null,
      tickUpper?: BigNumberish | null,
      liquidity?: null
    ): TypedEventFilter<
      [string, number, number, BigNumber],
      {
        owner: string;
        tickLower: number;
        tickUpper: number;
        liquidity: BigNumber;
      }
    >;

    PositionPostMintBurnUpdate(
      owner?: string | null,
      tickLower?: BigNumberish | null,
      tickUpper?: BigNumberish | null,
      liquidity?: null
    ): TypedEventFilter<
      [string, number, number, BigNumber],
      {
        owner: string;
        tickLower: number;
        tickUpper: number;
        liquidity: BigNumber;
      }
    >;

    "PositionPostSwapUpdate(address,int24,int24,int256,int256,int256)"(
      owner?: string | null,
      tickLower?: BigNumberish | null,
      tickUpper?: BigNumberish | null,
      fixedTokenBalance?: null,
      variableTokenBalance?: null,
      margin?: null
    ): TypedEventFilter<
      [string, number, number, BigNumber, BigNumber, BigNumber],
      {
        owner: string;
        tickLower: number;
        tickUpper: number;
        fixedTokenBalance: BigNumber;
        variableTokenBalance: BigNumber;
        margin: BigNumber;
      }
    >;

    PositionPostSwapUpdate(
      owner?: string | null,
      tickLower?: BigNumberish | null,
      tickUpper?: BigNumberish | null,
      fixedTokenBalance?: null,
      variableTokenBalance?: null,
      margin?: null
    ): TypedEventFilter<
      [string, number, number, BigNumber, BigNumber, BigNumber],
      {
        owner: string;
        tickLower: number;
        tickUpper: number;
        fixedTokenBalance: BigNumber;
        variableTokenBalance: BigNumber;
        margin: BigNumber;
      }
    >;

    "PositionSettlement(address,int24,int24,int256,int256,int256,int256,bool)"(
      owner?: string | null,
      tickLower?: BigNumberish | null,
      tickUpper?: BigNumberish | null,
      fixedTokenBalance?: null,
      variableTokenBalance?: null,
      margin?: null,
      settlementCashflow?: null,
      isSettled?: null
    ): TypedEventFilter<
      [
        string,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ],
      {
        owner: string;
        tickLower: number;
        tickUpper: number;
        fixedTokenBalance: BigNumber;
        variableTokenBalance: BigNumber;
        margin: BigNumber;
        settlementCashflow: BigNumber;
        isSettled: boolean;
      }
    >;

    PositionSettlement(
      owner?: string | null,
      tickLower?: BigNumberish | null,
      tickUpper?: BigNumberish | null,
      fixedTokenBalance?: null,
      variableTokenBalance?: null,
      margin?: null,
      settlementCashflow?: null,
      isSettled?: null
    ): TypedEventFilter<
      [
        string,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ],
      {
        owner: string;
        tickLower: number;
        tickUpper: number;
        fixedTokenBalance: BigNumber;
        variableTokenBalance: BigNumber;
        margin: BigNumber;
        settlementCashflow: BigNumber;
        isSettled: boolean;
      }
    >;

    "ProtocolCollection(address,address,uint256)"(
      sender?: null,
      recipient?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { sender: string; recipient: string; amount: BigNumber }
    >;

    ProtocolCollection(
      sender?: null,
      recipient?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { sender: string; recipient: string; amount: BigNumber }
    >;

    "VAMMSetting(address)"(
      vamm?: string | null
    ): TypedEventFilter<[string], { vamm: string }>;

    VAMMSetting(
      vamm?: string | null
    ): TypedEventFilter<[string], { vamm: string }>;
  };

  estimateGas: {
    cacheMaxAgeInSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    collectProtocol(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    fcm(overrides?: CallOverrides): Promise<BigNumber>;

    getHistoricalApy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getPosition(
      _owner: string,
      _tickLower: BigNumberish,
      _tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getPositionMarginRequirement(
      _recipient: string,
      _tickLower: BigNumberish,
      _tickUpper: BigNumberish,
      _isLM: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      __underlyingToken: string,
      __rateOracle: string,
      __termStartTimestampWad: BigNumberish,
      __termEndTimestampWad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidatePosition(
      _owner: string,
      _tickLower: BigNumberish,
      _tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidatorRewardWad(overrides?: CallOverrides): Promise<BigNumber>;

    lookbackWindowInSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    rateOracle(overrides?: CallOverrides): Promise<BigNumber>;

    setCacheMaxAgeInSeconds(
      _cacheMaxAgeInSeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFCM(
      _newFCM: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLiquidatorReward(
      _liquidatorRewardWad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLookbackWindowInSeconds(
      _secondsAgo: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMarginCalculatorParameters(
      _marginCalculatorParameters: {
        apyUpperMultiplierWad: BigNumberish;
        apyLowerMultiplierWad: BigNumberish;
        sigmaSquaredWad: BigNumberish;
        alphaWad: BigNumberish;
        betaWad: BigNumberish;
        xiUpperWad: BigNumberish;
        xiLowerWad: BigNumberish;
        tMaxWad: BigNumberish;
        devMulLeftUnwindLMWad: BigNumberish;
        devMulRightUnwindLMWad: BigNumberish;
        devMulLeftUnwindIMWad: BigNumberish;
        devMulRightUnwindIMWad: BigNumberish;
        fixedRateDeviationMinLeftUnwindLMWad: BigNumberish;
        fixedRateDeviationMinRightUnwindLMWad: BigNumberish;
        fixedRateDeviationMinLeftUnwindIMWad: BigNumberish;
        fixedRateDeviationMinRightUnwindIMWad: BigNumberish;
        gammaWad: BigNumberish;
        minMarginToIncentiviseLiquidators: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVAMM(
      _vAMM: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settlePosition(
      _owner: string,
      _tickLower: BigNumberish,
      _tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    termEndTimestampWad(overrides?: CallOverrides): Promise<BigNumber>;

    termStartTimestampWad(overrides?: CallOverrides): Promise<BigNumber>;

    transferMarginToFCMTrader(
      _account: string,
      _marginDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    underlyingToken(overrides?: CallOverrides): Promise<BigNumber>;

    updatePositionMargin(
      _owner: string,
      _tickLower: BigNumberish,
      _tickUpper: BigNumberish,
      marginDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePositionPostVAMMInducedMintBurn(
      _params: {
        owner: string;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        liquidityDelta: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePositionPostVAMMInducedSwap(
      _owner: string,
      _tickLower: BigNumberish,
      _tickUpper: BigNumberish,
      _fixedTokenDelta: BigNumberish,
      _variableTokenDelta: BigNumberish,
      _cumulativeFeeIncurred: BigNumberish,
      _fixedTokenDeltaUnbalanced: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vamm(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    cacheMaxAgeInSeconds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collectProtocol(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fcm(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getHistoricalApy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getPosition(
      _owner: string,
      _tickLower: BigNumberish,
      _tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getPositionMarginRequirement(
      _recipient: string,
      _tickLower: BigNumberish,
      _tickUpper: BigNumberish,
      _isLM: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      __underlyingToken: string,
      __rateOracle: string,
      __termStartTimestampWad: BigNumberish,
      __termEndTimestampWad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidatePosition(
      _owner: string,
      _tickLower: BigNumberish,
      _tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidatorRewardWad(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lookbackWindowInSeconds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rateOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setCacheMaxAgeInSeconds(
      _cacheMaxAgeInSeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFCM(
      _newFCM: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidatorReward(
      _liquidatorRewardWad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLookbackWindowInSeconds(
      _secondsAgo: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMarginCalculatorParameters(
      _marginCalculatorParameters: {
        apyUpperMultiplierWad: BigNumberish;
        apyLowerMultiplierWad: BigNumberish;
        sigmaSquaredWad: BigNumberish;
        alphaWad: BigNumberish;
        betaWad: BigNumberish;
        xiUpperWad: BigNumberish;
        xiLowerWad: BigNumberish;
        tMaxWad: BigNumberish;
        devMulLeftUnwindLMWad: BigNumberish;
        devMulRightUnwindLMWad: BigNumberish;
        devMulLeftUnwindIMWad: BigNumberish;
        devMulRightUnwindIMWad: BigNumberish;
        fixedRateDeviationMinLeftUnwindLMWad: BigNumberish;
        fixedRateDeviationMinRightUnwindLMWad: BigNumberish;
        fixedRateDeviationMinLeftUnwindIMWad: BigNumberish;
        fixedRateDeviationMinRightUnwindIMWad: BigNumberish;
        gammaWad: BigNumberish;
        minMarginToIncentiviseLiquidators: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVAMM(
      _vAMM: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settlePosition(
      _owner: string,
      _tickLower: BigNumberish,
      _tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    termEndTimestampWad(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    termStartTimestampWad(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferMarginToFCMTrader(
      _account: string,
      _marginDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    underlyingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updatePositionMargin(
      _owner: string,
      _tickLower: BigNumberish,
      _tickUpper: BigNumberish,
      marginDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePositionPostVAMMInducedMintBurn(
      _params: {
        owner: string;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        liquidityDelta: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePositionPostVAMMInducedSwap(
      _owner: string,
      _tickLower: BigNumberish,
      _tickUpper: BigNumberish,
      _fixedTokenDelta: BigNumberish,
      _variableTokenDelta: BigNumberish,
      _cumulativeFeeIncurred: BigNumberish,
      _fixedTokenDeltaUnbalanced: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vamm(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
