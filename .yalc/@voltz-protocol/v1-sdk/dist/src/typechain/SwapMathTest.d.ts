/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface SwapMathTestInterface extends ethers.utils.Interface {
  functions: {
    "computeFeeAmount(uint256,uint256,uint256)": FunctionFragment;
    "computeSwapStep(uint160,uint160,uint128,int256,uint256,uint256)": FunctionFragment;
    "getGasCostOfComputeSwapStep(uint160,uint160,uint128,int256,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "computeFeeAmount",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "computeSwapStep",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getGasCostOfComputeSwapStep",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "computeFeeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeSwapStep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGasCostOfComputeSwapStep",
    data: BytesLike
  ): Result;

  events: {};
}

export class SwapMathTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SwapMathTestInterface;

  functions: {
    computeFeeAmount(
      notional: BigNumberish,
      timeToMaturityInSeconds: BigNumberish,
      feePercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    computeSwapStep(
      sqrtRatioCurrentX96: BigNumberish,
      sqrtRatioTargetX96: BigNumberish,
      liquidity: BigNumberish,
      amountRemaining: BigNumberish,
      feePercentage: BigNumberish,
      timeToMaturityInSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        sqrtQ: BigNumber;
        amountIn: BigNumber;
        amountOut: BigNumber;
        feeAmount: BigNumber;
      }
    >;

    getGasCostOfComputeSwapStep(
      sqrtRatioCurrentX96: BigNumberish,
      sqrtRatioTargetX96: BigNumberish,
      liquidity: BigNumberish,
      amountRemaining: BigNumberish,
      feePercentage: BigNumberish,
      timeToMaturityInSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  computeFeeAmount(
    notional: BigNumberish,
    timeToMaturityInSeconds: BigNumberish,
    feePercentage: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  computeSwapStep(
    sqrtRatioCurrentX96: BigNumberish,
    sqrtRatioTargetX96: BigNumberish,
    liquidity: BigNumberish,
    amountRemaining: BigNumberish,
    feePercentage: BigNumberish,
    timeToMaturityInSeconds: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      sqrtQ: BigNumber;
      amountIn: BigNumber;
      amountOut: BigNumber;
      feeAmount: BigNumber;
    }
  >;

  getGasCostOfComputeSwapStep(
    sqrtRatioCurrentX96: BigNumberish,
    sqrtRatioTargetX96: BigNumberish,
    liquidity: BigNumberish,
    amountRemaining: BigNumberish,
    feePercentage: BigNumberish,
    timeToMaturityInSeconds: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    computeFeeAmount(
      notional: BigNumberish,
      timeToMaturityInSeconds: BigNumberish,
      feePercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeSwapStep(
      sqrtRatioCurrentX96: BigNumberish,
      sqrtRatioTargetX96: BigNumberish,
      liquidity: BigNumberish,
      amountRemaining: BigNumberish,
      feePercentage: BigNumberish,
      timeToMaturityInSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        sqrtQ: BigNumber;
        amountIn: BigNumber;
        amountOut: BigNumber;
        feeAmount: BigNumber;
      }
    >;

    getGasCostOfComputeSwapStep(
      sqrtRatioCurrentX96: BigNumberish,
      sqrtRatioTargetX96: BigNumberish,
      liquidity: BigNumberish,
      amountRemaining: BigNumberish,
      feePercentage: BigNumberish,
      timeToMaturityInSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    computeFeeAmount(
      notional: BigNumberish,
      timeToMaturityInSeconds: BigNumberish,
      feePercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeSwapStep(
      sqrtRatioCurrentX96: BigNumberish,
      sqrtRatioTargetX96: BigNumberish,
      liquidity: BigNumberish,
      amountRemaining: BigNumberish,
      feePercentage: BigNumberish,
      timeToMaturityInSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGasCostOfComputeSwapStep(
      sqrtRatioCurrentX96: BigNumberish,
      sqrtRatioTargetX96: BigNumberish,
      liquidity: BigNumberish,
      amountRemaining: BigNumberish,
      feePercentage: BigNumberish,
      timeToMaturityInSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    computeFeeAmount(
      notional: BigNumberish,
      timeToMaturityInSeconds: BigNumberish,
      feePercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeSwapStep(
      sqrtRatioCurrentX96: BigNumberish,
      sqrtRatioTargetX96: BigNumberish,
      liquidity: BigNumberish,
      amountRemaining: BigNumberish,
      feePercentage: BigNumberish,
      timeToMaturityInSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGasCostOfComputeSwapStep(
      sqrtRatioCurrentX96: BigNumberish,
      sqrtRatioTargetX96: BigNumberish,
      liquidity: BigNumberish,
      amountRemaining: BigNumberish,
      feePercentage: BigNumberish,
      timeToMaturityInSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
