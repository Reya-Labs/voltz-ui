/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface E2ESetupInterface extends ethers.utils.Interface {
  functions: {
    "FCMAddress()": FunctionFragment;
    "MEAddress()": FunctionFragment;
    "VAMMAddress()": FunctionFragment;
    "abs(int256)": FunctionFragment;
    "addPosition(address,int24,int24)": FunctionFragment;
    "addSwapSnapshot(address,int24,int24,int256,int256,uint256)": FunctionFragment;
    "addYBATrader(address)": FunctionFragment;
    "allPositions(uint256)": FunctionFragment;
    "allYBATraders(uint256)": FunctionFragment;
    "burnViaAMM(address,int24,int24,uint128)": FunctionFragment;
    "continuousInvariants()": FunctionFragment;
    "fcmFees()": FunctionFragment;
    "getPositionHistory(address,int24,int24)": FunctionFragment;
    "getPositionSwapsHistory(address,int24,int24)": FunctionFragment;
    "indexAllPositions(bytes32)": FunctionFragment;
    "indexAllYBATraders(address)": FunctionFragment;
    "initialCashflow()": FunctionFragment;
    "initiateFullyCollateralisedFixedTakerSwap(address,uint256,uint160)": FunctionFragment;
    "invariantPostMaturity()": FunctionFragment;
    "keepInMindGas()": FunctionFragment;
    "liquidatePosition(address,int24,int24,address,int24,int24)": FunctionFragment;
    "liquidationRewards()": FunctionFragment;
    "mintOrBurnViaPeriphery(address,(address,int24,int24,uint256,bool,uint256))": FunctionFragment;
    "mintViaAMM(address,int24,int24,uint128)": FunctionFragment;
    "peripheryAddress()": FunctionFragment;
    "positionHistory(bytes32,uint256)": FunctionFragment;
    "positionSwapsHistory(bytes32,uint256)": FunctionFragment;
    "rateOracleAddress()": FunctionFragment;
    "setFCMAddress(address)": FunctionFragment;
    "setIntegrationApproval(address,address,bool)": FunctionFragment;
    "setMEAddress(address)": FunctionFragment;
    "setPeripheryAddress(address)": FunctionFragment;
    "setRateOracleAddress(address)": FunctionFragment;
    "setVAMMAddress(address)": FunctionFragment;
    "settlePositionViaAMM(address,int24,int24)": FunctionFragment;
    "settleYBATrader(address)": FunctionFragment;
    "settlementCashflowBasedOnSwapSnapshots(address,int24,int24)": FunctionFragment;
    "sizeAllPositions()": FunctionFragment;
    "sizeAllYBATraders()": FunctionFragment;
    "sizeOfPositionHistory(bytes32)": FunctionFragment;
    "sizeOfPositionSwapsHistory(bytes32)": FunctionFragment;
    "swapViaAMM((address,int256,uint160,int24,int24))": FunctionFragment;
    "swapViaPeriphery(address,(address,bool,uint256,uint160,int24,int24,uint256))": FunctionFragment;
    "unwindFullyCollateralisedFixedTakerSwap(address,uint256,uint160)": FunctionFragment;
    "updatePositionMarginViaAMM(address,int24,int24,int256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "FCMAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MEAddress", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "VAMMAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "abs", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "addPosition",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addSwapSnapshot",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addYBATrader",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "allPositions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allYBATraders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burnViaAMM",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "continuousInvariants",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "fcmFees", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPositionHistory",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionSwapsHistory",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "indexAllPositions",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "indexAllYBATraders",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialCashflow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initiateFullyCollateralisedFixedTakerSwap",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "invariantPostMaturity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "keepInMindGas",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidatePosition",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintOrBurnViaPeriphery",
    values: [
      string,
      {
        marginEngine: string;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        notional: BigNumberish;
        isMint: boolean;
        marginDelta: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintViaAMM",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "peripheryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "positionHistory",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "positionSwapsHistory",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rateOracleAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFCMAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setIntegrationApproval",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMEAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPeripheryAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRateOracleAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setVAMMAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "settlePositionViaAMM",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settleYBATrader",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "settlementCashflowBasedOnSwapSnapshots",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sizeAllPositions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sizeAllYBATraders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sizeOfPositionHistory",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sizeOfPositionSwapsHistory",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapViaAMM",
    values: [
      {
        recipient: string;
        amountSpecified: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapViaPeriphery",
    values: [
      string,
      {
        marginEngine: string;
        isFT: boolean;
        notional: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        marginDelta: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unwindFullyCollateralisedFixedTakerSwap",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePositionMarginViaAMM",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "FCMAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MEAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "VAMMAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "abs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addSwapSnapshot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addYBATrader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allYBATraders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burnViaAMM", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "continuousInvariants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fcmFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPositionHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionSwapsHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "indexAllPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "indexAllYBATraders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialCashflow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiateFullyCollateralisedFixedTakerSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "invariantPostMaturity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "keepInMindGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidatePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintOrBurnViaPeriphery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintViaAMM", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "peripheryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "positionHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "positionSwapsHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rateOracleAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFCMAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIntegrationApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMEAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPeripheryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRateOracleAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVAMMAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settlePositionViaAMM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleYBATrader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settlementCashflowBasedOnSwapSnapshots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sizeAllPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sizeAllYBATraders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sizeOfPositionHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sizeOfPositionSwapsHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapViaAMM", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapViaPeriphery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unwindFullyCollateralisedFixedTakerSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePositionMarginViaAMM",
    data: BytesLike
  ): Result;

  events: {};
}

export class E2ESetup extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: E2ESetupInterface;

  functions: {
    FCMAddress(overrides?: CallOverrides): Promise<[string]>;

    MEAddress(overrides?: CallOverrides): Promise<[string]>;

    VAMMAddress(overrides?: CallOverrides): Promise<[string]>;

    abs(value: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    addPosition(
      owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addSwapSnapshot(
      owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      variableTokenDelta: BigNumberish,
      fixedTokenDeltaUnbalanced: BigNumberish,
      cumulativeFeeIncurred: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addYBATrader(
      trader: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allPositions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, number, number] & {
        owner: string;
        tickLower: number;
        tickUpper: number;
      }
    >;

    allYBATraders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    burnViaAMM(
      recipient: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    continuousInvariants(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fcmFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPositionHistory(
      owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          currentTimestampWad: BigNumber;
          termStartTimestampWad: BigNumber;
          termEndTimestampWad: BigNumber;
          margin: BigNumber;
          marginRequirement: BigNumber;
          estimatedSettlementCashflow: BigNumber;
          fixedTokenBalance: BigNumber;
          variableTokenBalance: BigNumber;
        })[]
      ]
    >;

    getPositionSwapsHistory(
      owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          BigNumber,
          BigNumber
        ] & {
          reserveNormalizedIncomeAtSwap: BigNumber;
          swapInitiationTimestampWad: BigNumber;
          termEndTimestampWad: BigNumber;
          notional: BigNumber;
          isFT: boolean;
          fixedRateWad: BigNumber;
          feePaidInUnderlyingTokens: BigNumber;
        })[],
        BigNumber
      ]
    >;

    indexAllPositions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    indexAllYBATraders(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialCashflow(overrides?: CallOverrides): Promise<[BigNumber]>;

    initiateFullyCollateralisedFixedTakerSwap(
      trader: string,
      notional: BigNumberish,
      sqrtPriceLimitX96: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    invariantPostMaturity(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    keepInMindGas(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidatePosition(
      liquidator: string,
      lowerTickLiquidator: BigNumberish,
      upperTickLiquidator: BigNumberish,
      owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidationRewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintOrBurnViaPeriphery(
      trader: string,
      params: {
        marginEngine: string;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        notional: BigNumberish;
        isMint: boolean;
        marginDelta: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintViaAMM(
      recipient: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    peripheryAddress(overrides?: CallOverrides): Promise<[string]>;

    positionHistory(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        currentTimestampWad: BigNumber;
        termStartTimestampWad: BigNumber;
        termEndTimestampWad: BigNumber;
        margin: BigNumber;
        marginRequirement: BigNumber;
        estimatedSettlementCashflow: BigNumber;
        fixedTokenBalance: BigNumber;
        variableTokenBalance: BigNumber;
      }
    >;

    positionSwapsHistory(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber
      ] & {
        reserveNormalizedIncomeAtSwap: BigNumber;
        swapInitiationTimestampWad: BigNumber;
        termEndTimestampWad: BigNumber;
        notional: BigNumber;
        isFT: boolean;
        fixedRateWad: BigNumber;
        feePaidInUnderlyingTokens: BigNumber;
      }
    >;

    rateOracleAddress(overrides?: CallOverrides): Promise<[string]>;

    setFCMAddress(
      _FCMAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIntegrationApproval(
      recipient: string,
      intAddress: string,
      allowIntegration: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMEAddress(
      _MEAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPeripheryAddress(
      _peripheryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRateOracleAddress(
      _rateOracleAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVAMMAddress(
      _VAMMAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settlePositionViaAMM(
      recipient: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settleYBATrader(
      trader: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settlementCashflowBasedOnSwapSnapshots(
      _owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    sizeAllPositions(overrides?: CallOverrides): Promise<[BigNumber]>;

    sizeAllYBATraders(overrides?: CallOverrides): Promise<[BigNumber]>;

    sizeOfPositionHistory(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    sizeOfPositionSwapsHistory(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    swapViaAMM(
      params: {
        recipient: string;
        amountSpecified: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapViaPeriphery(
      trader: string,
      params: {
        marginEngine: string;
        isFT: boolean;
        notional: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        marginDelta: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unwindFullyCollateralisedFixedTakerSwap(
      trader: string,
      notionalToUnwind: BigNumberish,
      sqrtPriceLimitX96: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePositionMarginViaAMM(
      _owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      marginDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  FCMAddress(overrides?: CallOverrides): Promise<string>;

  MEAddress(overrides?: CallOverrides): Promise<string>;

  VAMMAddress(overrides?: CallOverrides): Promise<string>;

  abs(value: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  addPosition(
    owner: string,
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addSwapSnapshot(
    owner: string,
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    variableTokenDelta: BigNumberish,
    fixedTokenDeltaUnbalanced: BigNumberish,
    cumulativeFeeIncurred: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addYBATrader(
    trader: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allPositions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, number, number] & {
      owner: string;
      tickLower: number;
      tickUpper: number;
    }
  >;

  allYBATraders(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  burnViaAMM(
    recipient: string,
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  continuousInvariants(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fcmFees(overrides?: CallOverrides): Promise<BigNumber>;

  getPositionHistory(
    owner: string,
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      currentTimestampWad: BigNumber;
      termStartTimestampWad: BigNumber;
      termEndTimestampWad: BigNumber;
      margin: BigNumber;
      marginRequirement: BigNumber;
      estimatedSettlementCashflow: BigNumber;
      fixedTokenBalance: BigNumber;
      variableTokenBalance: BigNumber;
    })[]
  >;

  getPositionSwapsHistory(
    owner: string,
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      ([
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber
      ] & {
        reserveNormalizedIncomeAtSwap: BigNumber;
        swapInitiationTimestampWad: BigNumber;
        termEndTimestampWad: BigNumber;
        notional: BigNumber;
        isFT: boolean;
        fixedRateWad: BigNumber;
        feePaidInUnderlyingTokens: BigNumber;
      })[],
      BigNumber
    ]
  >;

  indexAllPositions(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  indexAllYBATraders(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialCashflow(overrides?: CallOverrides): Promise<BigNumber>;

  initiateFullyCollateralisedFixedTakerSwap(
    trader: string,
    notional: BigNumberish,
    sqrtPriceLimitX96: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  invariantPostMaturity(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  keepInMindGas(overrides?: CallOverrides): Promise<BigNumber>;

  liquidatePosition(
    liquidator: string,
    lowerTickLiquidator: BigNumberish,
    upperTickLiquidator: BigNumberish,
    owner: string,
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidationRewards(overrides?: CallOverrides): Promise<BigNumber>;

  mintOrBurnViaPeriphery(
    trader: string,
    params: {
      marginEngine: string;
      tickLower: BigNumberish;
      tickUpper: BigNumberish;
      notional: BigNumberish;
      isMint: boolean;
      marginDelta: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintViaAMM(
    recipient: string,
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  peripheryAddress(overrides?: CallOverrides): Promise<string>;

  positionHistory(
    arg0: BytesLike,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      currentTimestampWad: BigNumber;
      termStartTimestampWad: BigNumber;
      termEndTimestampWad: BigNumber;
      margin: BigNumber;
      marginRequirement: BigNumber;
      estimatedSettlementCashflow: BigNumber;
      fixedTokenBalance: BigNumber;
      variableTokenBalance: BigNumber;
    }
  >;

  positionSwapsHistory(
    arg0: BytesLike,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      BigNumber,
      BigNumber
    ] & {
      reserveNormalizedIncomeAtSwap: BigNumber;
      swapInitiationTimestampWad: BigNumber;
      termEndTimestampWad: BigNumber;
      notional: BigNumber;
      isFT: boolean;
      fixedRateWad: BigNumber;
      feePaidInUnderlyingTokens: BigNumber;
    }
  >;

  rateOracleAddress(overrides?: CallOverrides): Promise<string>;

  setFCMAddress(
    _FCMAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIntegrationApproval(
    recipient: string,
    intAddress: string,
    allowIntegration: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMEAddress(
    _MEAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPeripheryAddress(
    _peripheryAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRateOracleAddress(
    _rateOracleAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVAMMAddress(
    _VAMMAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settlePositionViaAMM(
    recipient: string,
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settleYBATrader(
    trader: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settlementCashflowBasedOnSwapSnapshots(
    _owner: string,
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  sizeAllPositions(overrides?: CallOverrides): Promise<BigNumber>;

  sizeAllYBATraders(overrides?: CallOverrides): Promise<BigNumber>;

  sizeOfPositionHistory(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  sizeOfPositionSwapsHistory(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  swapViaAMM(
    params: {
      recipient: string;
      amountSpecified: BigNumberish;
      sqrtPriceLimitX96: BigNumberish;
      tickLower: BigNumberish;
      tickUpper: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapViaPeriphery(
    trader: string,
    params: {
      marginEngine: string;
      isFT: boolean;
      notional: BigNumberish;
      sqrtPriceLimitX96: BigNumberish;
      tickLower: BigNumberish;
      tickUpper: BigNumberish;
      marginDelta: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unwindFullyCollateralisedFixedTakerSwap(
    trader: string,
    notionalToUnwind: BigNumberish,
    sqrtPriceLimitX96: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePositionMarginViaAMM(
    _owner: string,
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    marginDelta: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    FCMAddress(overrides?: CallOverrides): Promise<string>;

    MEAddress(overrides?: CallOverrides): Promise<string>;

    VAMMAddress(overrides?: CallOverrides): Promise<string>;

    abs(value: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    addPosition(
      owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addSwapSnapshot(
      owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      variableTokenDelta: BigNumberish,
      fixedTokenDeltaUnbalanced: BigNumberish,
      cumulativeFeeIncurred: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addYBATrader(trader: string, overrides?: CallOverrides): Promise<void>;

    allPositions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, number, number] & {
        owner: string;
        tickLower: number;
        tickUpper: number;
      }
    >;

    allYBATraders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    burnViaAMM(
      recipient: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    continuousInvariants(overrides?: CallOverrides): Promise<void>;

    fcmFees(overrides?: CallOverrides): Promise<BigNumber>;

    getPositionHistory(
      owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        currentTimestampWad: BigNumber;
        termStartTimestampWad: BigNumber;
        termEndTimestampWad: BigNumber;
        margin: BigNumber;
        marginRequirement: BigNumber;
        estimatedSettlementCashflow: BigNumber;
        fixedTokenBalance: BigNumber;
        variableTokenBalance: BigNumber;
      })[]
    >;

    getPositionSwapsHistory(
      owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          BigNumber,
          BigNumber
        ] & {
          reserveNormalizedIncomeAtSwap: BigNumber;
          swapInitiationTimestampWad: BigNumber;
          termEndTimestampWad: BigNumber;
          notional: BigNumber;
          isFT: boolean;
          fixedRateWad: BigNumber;
          feePaidInUnderlyingTokens: BigNumber;
        })[],
        BigNumber
      ]
    >;

    indexAllPositions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    indexAllYBATraders(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialCashflow(overrides?: CallOverrides): Promise<BigNumber>;

    initiateFullyCollateralisedFixedTakerSwap(
      trader: string,
      notional: BigNumberish,
      sqrtPriceLimitX96: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    invariantPostMaturity(overrides?: CallOverrides): Promise<void>;

    keepInMindGas(overrides?: CallOverrides): Promise<BigNumber>;

    liquidatePosition(
      liquidator: string,
      lowerTickLiquidator: BigNumberish,
      upperTickLiquidator: BigNumberish,
      owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidationRewards(overrides?: CallOverrides): Promise<BigNumber>;

    mintOrBurnViaPeriphery(
      trader: string,
      params: {
        marginEngine: string;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        notional: BigNumberish;
        isMint: boolean;
        marginDelta: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintViaAMM(
      recipient: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    peripheryAddress(overrides?: CallOverrides): Promise<string>;

    positionHistory(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        currentTimestampWad: BigNumber;
        termStartTimestampWad: BigNumber;
        termEndTimestampWad: BigNumber;
        margin: BigNumber;
        marginRequirement: BigNumber;
        estimatedSettlementCashflow: BigNumber;
        fixedTokenBalance: BigNumber;
        variableTokenBalance: BigNumber;
      }
    >;

    positionSwapsHistory(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber
      ] & {
        reserveNormalizedIncomeAtSwap: BigNumber;
        swapInitiationTimestampWad: BigNumber;
        termEndTimestampWad: BigNumber;
        notional: BigNumber;
        isFT: boolean;
        fixedRateWad: BigNumber;
        feePaidInUnderlyingTokens: BigNumber;
      }
    >;

    rateOracleAddress(overrides?: CallOverrides): Promise<string>;

    setFCMAddress(
      _FCMAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setIntegrationApproval(
      recipient: string,
      intAddress: string,
      allowIntegration: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setMEAddress(_MEAddress: string, overrides?: CallOverrides): Promise<void>;

    setPeripheryAddress(
      _peripheryAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRateOracleAddress(
      _rateOracleAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setVAMMAddress(
      _VAMMAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    settlePositionViaAMM(
      recipient: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    settleYBATrader(trader: string, overrides?: CallOverrides): Promise<void>;

    settlementCashflowBasedOnSwapSnapshots(
      _owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sizeAllPositions(overrides?: CallOverrides): Promise<BigNumber>;

    sizeAllYBATraders(overrides?: CallOverrides): Promise<BigNumber>;

    sizeOfPositionHistory(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sizeOfPositionSwapsHistory(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapViaAMM(
      params: {
        recipient: string;
        amountSpecified: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        _fixedTokenDelta: BigNumber;
        _variableTokenDelta: BigNumber;
        _cumulativeFeeIncurred: BigNumber;
        _fixedTokenDeltaUnbalanced: BigNumber;
        _marginRequirement: BigNumber;
      }
    >;

    swapViaPeriphery(
      trader: string,
      params: {
        marginEngine: string;
        isFT: boolean;
        notional: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        marginDelta: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        _fixedTokenDelta: BigNumber;
        _variableTokenDelta: BigNumber;
        _cumulativeFeeIncurred: BigNumber;
        _fixedTokenDeltaUnbalanced: BigNumber;
        _marginRequirement: BigNumber;
      }
    >;

    unwindFullyCollateralisedFixedTakerSwap(
      trader: string,
      notionalToUnwind: BigNumberish,
      sqrtPriceLimitX96: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePositionMarginViaAMM(
      _owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      marginDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    FCMAddress(overrides?: CallOverrides): Promise<BigNumber>;

    MEAddress(overrides?: CallOverrides): Promise<BigNumber>;

    VAMMAddress(overrides?: CallOverrides): Promise<BigNumber>;

    abs(value: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    addPosition(
      owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addSwapSnapshot(
      owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      variableTokenDelta: BigNumberish,
      fixedTokenDeltaUnbalanced: BigNumberish,
      cumulativeFeeIncurred: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addYBATrader(
      trader: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allPositions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allYBATraders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burnViaAMM(
      recipient: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    continuousInvariants(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fcmFees(overrides?: CallOverrides): Promise<BigNumber>;

    getPositionHistory(
      owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionSwapsHistory(
      owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    indexAllPositions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    indexAllYBATraders(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialCashflow(overrides?: CallOverrides): Promise<BigNumber>;

    initiateFullyCollateralisedFixedTakerSwap(
      trader: string,
      notional: BigNumberish,
      sqrtPriceLimitX96: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    invariantPostMaturity(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    keepInMindGas(overrides?: CallOverrides): Promise<BigNumber>;

    liquidatePosition(
      liquidator: string,
      lowerTickLiquidator: BigNumberish,
      upperTickLiquidator: BigNumberish,
      owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidationRewards(overrides?: CallOverrides): Promise<BigNumber>;

    mintOrBurnViaPeriphery(
      trader: string,
      params: {
        marginEngine: string;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        notional: BigNumberish;
        isMint: boolean;
        marginDelta: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintViaAMM(
      recipient: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    peripheryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    positionHistory(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    positionSwapsHistory(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rateOracleAddress(overrides?: CallOverrides): Promise<BigNumber>;

    setFCMAddress(
      _FCMAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIntegrationApproval(
      recipient: string,
      intAddress: string,
      allowIntegration: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMEAddress(
      _MEAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPeripheryAddress(
      _peripheryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRateOracleAddress(
      _rateOracleAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVAMMAddress(
      _VAMMAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settlePositionViaAMM(
      recipient: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settleYBATrader(
      trader: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settlementCashflowBasedOnSwapSnapshots(
      _owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sizeAllPositions(overrides?: CallOverrides): Promise<BigNumber>;

    sizeAllYBATraders(overrides?: CallOverrides): Promise<BigNumber>;

    sizeOfPositionHistory(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sizeOfPositionSwapsHistory(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapViaAMM(
      params: {
        recipient: string;
        amountSpecified: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapViaPeriphery(
      trader: string,
      params: {
        marginEngine: string;
        isFT: boolean;
        notional: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        marginDelta: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unwindFullyCollateralisedFixedTakerSwap(
      trader: string,
      notionalToUnwind: BigNumberish,
      sqrtPriceLimitX96: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePositionMarginViaAMM(
      _owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      marginDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    FCMAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MEAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VAMMAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    abs(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addPosition(
      owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addSwapSnapshot(
      owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      variableTokenDelta: BigNumberish,
      fixedTokenDeltaUnbalanced: BigNumberish,
      cumulativeFeeIncurred: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addYBATrader(
      trader: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allPositions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allYBATraders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burnViaAMM(
      recipient: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    continuousInvariants(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fcmFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPositionHistory(
      owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionSwapsHistory(
      owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    indexAllPositions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    indexAllYBATraders(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialCashflow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initiateFullyCollateralisedFixedTakerSwap(
      trader: string,
      notional: BigNumberish,
      sqrtPriceLimitX96: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    invariantPostMaturity(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    keepInMindGas(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidatePosition(
      liquidator: string,
      lowerTickLiquidator: BigNumberish,
      upperTickLiquidator: BigNumberish,
      owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidationRewards(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintOrBurnViaPeriphery(
      trader: string,
      params: {
        marginEngine: string;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        notional: BigNumberish;
        isMint: boolean;
        marginDelta: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintViaAMM(
      recipient: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    peripheryAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    positionHistory(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    positionSwapsHistory(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rateOracleAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setFCMAddress(
      _FCMAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIntegrationApproval(
      recipient: string,
      intAddress: string,
      allowIntegration: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMEAddress(
      _MEAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPeripheryAddress(
      _peripheryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRateOracleAddress(
      _rateOracleAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVAMMAddress(
      _VAMMAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settlePositionViaAMM(
      recipient: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settleYBATrader(
      trader: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settlementCashflowBasedOnSwapSnapshots(
      _owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sizeAllPositions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sizeAllYBATraders(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sizeOfPositionHistory(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sizeOfPositionSwapsHistory(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapViaAMM(
      params: {
        recipient: string;
        amountSpecified: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapViaPeriphery(
      trader: string,
      params: {
        marginEngine: string;
        isFT: boolean;
        notional: BigNumberish;
        sqrtPriceLimitX96: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        marginDelta: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unwindFullyCollateralisedFixedTakerSwap(
      trader: string,
      notionalToUnwind: BigNumberish,
      sqrtPriceLimitX96: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePositionMarginViaAMM(
      _owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      marginDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
