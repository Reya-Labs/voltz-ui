{"version":3,"file":"position.js","sourceRoot":"/","sources":["entities/position.ts"],"names":[],"mappings":"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","sourcesContent":["import { DateTime } from 'luxon';\nimport { ethers } from 'ethers';\nimport { AMM, HealthFactorStatus } from './amm';\nimport Burn from './burn';\nimport Liquidation from './liquidation';\nimport MarginUpdate from './marginUpdate';\nimport Mint from './mint';\nimport Settlement from './settlement';\nimport Swap from './swap';\nimport { ONE_YEAR_IN_SECONDS, Q96 } from '../constants';\nimport { tickToPrice, tickToFixedRate } from '../utils/priceTickConversions';\nimport { TickMath } from '../utils/tickMath';\nimport { Price } from './fractions/price';\n\nimport {\n  MarginEngine__factory as marginEngineFactory,\n  BaseRateOracle__factory as baseRateOracleFactory,\n} from '../typechain';\nimport { getAccruedCashflow, transformSwaps } from '../services/getAccruedCashflow';\nimport { sentryTracker } from '../utils/sentry';\nimport { getRangeHealthFactor } from '../utils/rangeHealthFactor';\n\nexport type PositionConstructorArgs = {\n  id: string;\n\n  amm: AMM;\n  owner: string;\n  tickLower: number;\n  tickUpper: number;\n\n  createdTimestamp: number;\n\n  positionType: number;\n\n  mints: Array<Mint>;\n  burns: Array<Burn>;\n  swaps: Array<Swap>;\n  marginUpdates: Array<MarginUpdate>;\n  liquidations: Array<Liquidation>;\n  settlements: Array<Settlement>;\n};\n\nclass Position {\n  public readonly id: string;\n  public readonly createdTimestamp: number;\n  public readonly amm: AMM;\n  public readonly owner: string;\n  public readonly tickLower: number;\n  public readonly tickUpper: number;\n  public readonly positionType: number;\n  public readonly mints: Array<Mint>;\n  public readonly burns: Array<Burn>;\n  public readonly swaps: Array<Swap>;\n  public readonly marginUpdates: Array<MarginUpdate>;\n  public readonly liquidations: Array<Liquidation>;\n  public readonly settlements: Array<Settlement>;\n\n  public initialized = false;\n\n  public fixedTokenBalance = 0;\n  public variableTokenBalance = 0;\n\n  public liquidity = 0;\n  public liquidityInUSD = 0;\n\n  public notional = 0;\n  public notionalInUSD = 0;\n\n  public margin = 0;\n  public marginInUSD = 0;\n\n  public fees = 0;\n  public feesInUSD = 0;\n\n  public accruedCashflow = 0;\n  public accruedCashflowInUSD = 0;\n\n  public settlementCashflow = 0;\n  public settlementCashflowInUSD = 0;\n\n  public liquidationThreshold = 0;\n  public safetyThreshold = 0;\n\n  public receivingRate = 0;\n  public payingRate = 0;\n\n  public healthFactor = HealthFactorStatus.NOT_FOUND;\n  public fixedRateHealthFactor = HealthFactorStatus.NOT_FOUND;\n\n  public poolAPR = 0;\n  public isPoolMatured = false;\n\n  public isSettled = false;\n\n  public constructor({\n    id,\n    createdTimestamp,\n    amm,\n    owner,\n    tickLower,\n    tickUpper,\n    positionType,\n    mints,\n    burns,\n    swaps,\n    marginUpdates,\n    liquidations,\n    settlements,\n  }: PositionConstructorArgs) {\n    this.id = id;\n    this.createdTimestamp = createdTimestamp;\n    this.amm = amm;\n    this.owner = owner;\n\n    this.mints = mints;\n    this.burns = burns;\n    this.marginUpdates = marginUpdates;\n    this.liquidations = liquidations;\n    this.settlements = settlements;\n    this.swaps = swaps;\n\n    this.tickLower = tickLower;\n    this.tickUpper = tickUpper;\n    this.positionType = positionType;\n  }\n\n  public get priceLower(): Price {\n    return tickToPrice(this.tickLower);\n  }\n\n  public get priceUpper(): Price {\n    return tickToPrice(this.tickUpper);\n  }\n\n  public get fixedRateLower(): Price {\n    return tickToFixedRate(this.tickUpper);\n  }\n\n  public get fixedRateUpper(): Price {\n    return tickToFixedRate(this.tickLower);\n  }\n\n  public getNotionalFromLiquidity(liquidity: ethers.BigNumber): number {\n    const sqrtPriceLowerX96 = new Price(Q96, TickMath.getSqrtRatioAtTick(this.tickLower));\n    const sqrtPriceUpperX96 = new Price(Q96, TickMath.getSqrtRatioAtTick(this.tickUpper));\n\n    return sqrtPriceUpperX96\n      .subtract(sqrtPriceLowerX96)\n      .multiply(liquidity.toString())\n      .divide(Price.fromNumber(10 ** this.amm.underlyingToken.decimals))\n      .toNumber();\n  }\n\n  public get createdDateTime(): DateTime {\n    return DateTime.fromMillis(this.createdTimestamp);\n  }\n\n  public async refreshInfo(): Promise<void> {\n    if (this.initialized) {\n      return;\n    }\n\n    if (!this.amm.provider) {\n      throw new Error('Blockchain not connected');\n    }\n\n    // Build the contract\n    const marginEngineContract = marginEngineFactory.connect(\n      this.amm.marginEngineAddress,\n      this.amm.provider,\n    );\n\n    const rateOracleContract = baseRateOracleFactory.connect(\n      this.amm.rateOracle.id,\n      this.amm.provider,\n    );\n\n    // Get fresh information about the position\n    const freshInfo = await marginEngineContract.callStatic.getPosition(\n      this.owner,\n      this.tickLower,\n      this.tickUpper,\n    );\n\n    this.isSettled = freshInfo.isSettled;\n\n    // Get last block timestamp\n    const block = await this.amm.provider.getBlock('latest');\n    const currentTime = block.timestamp - 1;\n    this.isPoolMatured = currentTime >= this.amm.endDateTime.toSeconds();\n\n    if (!this.isSettled) {\n      this.liquidity = this.getNotionalFromLiquidity(freshInfo._liquidity);\n      this.fixedTokenBalance = this.amm.descale(freshInfo.fixedTokenBalance);\n      this.variableTokenBalance = this.amm.descale(freshInfo.variableTokenBalance);\n      this.fees = this.amm.descale(freshInfo.accumulatedFees);\n      this.margin = this.amm.descale(freshInfo.margin) - this.fees;\n\n      // Get pool information\n      this.poolAPR = await this.amm.getFixedApr();\n\n      // Get settlement cashflow\n      if (this.isPoolMatured) {\n        this.settlementCashflow = await this.getSettlementCashflow();\n      }\n\n      // Get accrued cashflow and receiving/paying rates\n      if (this.swaps.length > 0) {\n        if (!this.isPoolMatured) {\n          try {\n            const accruedCashflowInfo = await getAccruedCashflow({\n              swaps: transformSwaps(this.swaps, this.amm.underlyingToken.decimals),\n              rateOracle: rateOracleContract,\n              currentTime,\n              endTime: this.amm.endDateTime.toSeconds(),\n            });\n            this.accruedCashflow = accruedCashflowInfo.accruedCashflow;\n\n            // Get receiving and paying rates\n            const avgFixedRate = accruedCashflowInfo.avgFixedRate;\n            const avgVariableRate = (await this.amm.getInstantApy()) * 100;\n\n            [this.receivingRate, this.payingRate] =\n              this.positionType === 1\n                ? [avgFixedRate, avgVariableRate]\n                : [avgVariableRate, avgFixedRate];\n          } catch (error) {\n            sentryTracker.captureException(error);\n          }\n        } else {\n          this.accruedCashflow = this.settlementCashflow;\n        }\n      }\n\n      if (!this.isPoolMatured) {\n        // Get liquidation threshold\n        try {\n          const scaledLiqT = await marginEngineContract.callStatic.getPositionMarginRequirement(\n            this.owner,\n            this.tickLower,\n            this.tickUpper,\n            true,\n          );\n          this.liquidationThreshold = this.amm.descale(scaledLiqT);\n        } catch (error) {\n          sentryTracker.captureMessage('Failed to compute the liquidation threshold');\n          sentryTracker.captureException(error);\n        }\n\n        // Get safety threshold\n        try {\n          const scaledSafeT = await marginEngineContract.callStatic.getPositionMarginRequirement(\n            this.owner,\n            this.tickLower,\n            this.tickUpper,\n            false,\n          );\n          this.safetyThreshold = this.amm.descale(scaledSafeT);\n        } catch (error) {\n          sentryTracker.captureMessage('Failed to compute the safety threshold');\n          sentryTracker.captureException(error);\n        }\n\n        // Get health factor\n        if (this.margin < this.liquidationThreshold) {\n          this.healthFactor = HealthFactorStatus.DANGER;\n        } else if (this.margin < this.safetyThreshold) {\n          this.healthFactor = HealthFactorStatus.WARNING;\n        } else {\n          this.healthFactor = HealthFactorStatus.HEALTHY;\n        }\n\n        // Get range health factor for LPs\n        this.fixedRateHealthFactor = getRangeHealthFactor(\n          this.fixedRateLower.toNumber(),\n          this.fixedRateUpper.toNumber(),\n          this.poolAPR,\n        );\n      }\n\n      // Get notional (LPs - liquidity, Traders - absolute variable tokens)\n      this.notional =\n        this.positionType === 3 ? this.liquidity : Math.abs(this.variableTokenBalance);\n\n      // Get the underlying token price in USD\n      const usdExchangeRate = this.amm.isETH ? await this.amm.ethPrice() : 1;\n\n      // Compute the information in USD\n      this.liquidityInUSD = this.liquidity * usdExchangeRate;\n      this.notionalInUSD = this.notional * usdExchangeRate;\n      this.marginInUSD = this.margin * usdExchangeRate;\n      this.feesInUSD = this.fees * usdExchangeRate;\n      this.accruedCashflowInUSD = this.accruedCashflow * usdExchangeRate;\n      this.settlementCashflowInUSD = this.settlementCashflow * usdExchangeRate;\n    }\n\n    this.initialized = true;\n  }\n\n  private async getSettlementCashflow(): Promise<number> {\n    if (!this.amm.provider) {\n      throw new Error('Blockchain not connected');\n    }\n\n    const rateOracleContract = baseRateOracleFactory.connect(\n      this.amm.rateOracle.id,\n      this.amm.provider,\n    );\n\n    const variableFactorWad = await rateOracleContract.callStatic.variableFactor(\n      this.amm.termStartTimestamp.toString(),\n      this.amm.termEndTimestamp.toString(),\n    );\n\n    const fixedFactor =\n      (this.amm.endDateTime.toMillis() - this.amm.startDateTime.toMillis()) /\n      ONE_YEAR_IN_SECONDS /\n      1000;\n    const variableFactor = Number(ethers.utils.formatEther(variableFactorWad));\n\n    const settlementCashflow =\n      this.fixedTokenBalance * fixedFactor * 0.01 + this.variableTokenBalance * variableFactor;\n\n    return settlementCashflow;\n  }\n\n  public get settlementBalance(): number {\n    if (this.initialized) {\n      return this.margin + this.fees + this.settlementCashflow;\n    }\n    return 0;\n  }\n}\n\nexport default Position;\n"]}