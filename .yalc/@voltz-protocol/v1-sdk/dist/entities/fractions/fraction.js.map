{"version":3,"file":"fraction.js","sourceRoot":"/","sources":["entities/fractions/fraction.ts"],"names":[],"mappings":"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","sourcesContent":["import JSBI from 'jsbi';\nimport invariant from 'tiny-invariant';\nimport toFormat from 'toformat';\nimport Fractionjs from 'fraction.js';\nimport _Decimal from 'decimal.js-light';\nimport _Big from 'big.js';\n\nimport { BigIntish, Rounding } from '../../types';\n\nconst Decimal = toFormat(_Decimal);\nconst Big = toFormat(_Big);\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP,\n};\n\nexport class Fraction {\n  public readonly numerator: JSBI;\n\n  public readonly denominator: JSBI;\n\n  public constructor(numerator: BigIntish, denominator: BigIntish = JSBI.BigInt(1)) {\n    this.numerator = JSBI.BigInt(numerator);\n    this.denominator = JSBI.BigInt(denominator);\n  }\n\n  public static fromNumber(value: number | string) {\n    const fraction = new Fractionjs(value);\n    return new Fraction(fraction.n * fraction.s, fraction.d);\n  }\n\n  private static tryParseFraction(fractionish: BigIntish | Fraction): Fraction {\n    if (\n      fractionish instanceof JSBI ||\n      typeof fractionish === 'number' ||\n      typeof fractionish === 'string'\n    )\n      return new Fraction(fractionish);\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish;\n    throw new Error('Could not parse fraction');\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator);\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator);\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator);\n  }\n\n  public add(other: Fraction | BigIntish): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other);\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator);\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator),\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator),\n    );\n  }\n\n  public subtract(other: Fraction | BigIntish): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other);\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator);\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator),\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator),\n    );\n  }\n\n  public lessThan(other: Fraction | BigIntish): boolean {\n    const otherParsed = Fraction.tryParseFraction(other);\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator),\n    );\n  }\n\n  public equalTo(other: Fraction | BigIntish): boolean {\n    const otherParsed = Fraction.tryParseFraction(other);\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator),\n    );\n  }\n\n  public greaterThan(other: Fraction | BigIntish): boolean {\n    const otherParsed = Fraction.tryParseFraction(other);\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator),\n    );\n  }\n\n  public multiply(other: Fraction | BigIntish): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other);\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator),\n    );\n  }\n\n  public divide(other: Fraction | BigIntish): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other);\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator),\n    );\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    format: { groupSeparator: string } = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP,\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`);\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`);\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] });\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits);\n    return quotient.toFormat(quotient.decimalPlaces(), format);\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    format: { groupSeparator: string } = { groupSeparator: '' },\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`);\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`);\n\n    Big.DP = decimalPlaces;\n    return new Big(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toFormat(decimalPlaces, format);\n  }\n\n  public toNumber(): number {\n    return parseFloat(this.toFixed(3));\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator);\n  }\n}\n\nexport default Fraction;\n"]}