{"version":3,"file":"price.js","sourceRoot":"/","sources":["entities/fractions/price.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AACA,uCAAsC;AAEtC;IAA2B,yBAAQ;IACjC;;;OAGG;IACH;QAAmB,cAA+B;aAA/B,UAA+B,EAA/B,qBAA+B,EAA/B,IAA+B;YAA/B,yBAA+B;;QACzC,IAAA,WAAW,GAAe,IAAI,GAAnB,EAAE,SAAS,GAAI,IAAI,GAAR,CAAS;QACtC,gDAAgD;eAChD,kBAAM,SAAS,EAAE,WAAW,CAAC;IAC/B,CAAC;IAEa,gBAAU,GAAxB,UAAyB,KAAa;QACpC,OAAO,OAAM,UAAU,YAAC,KAAK,CAAU,CAAC;IAC1C,CAAC;IAED;;OAEG;IACI,sBAAM,GAAb;QACE,OAAO,IAAI,KAAK,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;IACrD,CAAC;IAEM,6BAAa,GAApB,UACE,iBAAqB,EACrB,MAAmC,EACnC,QAAmB;QAFnB,kCAAA,EAAA,qBAAqB;QAIrB,OAAO,iBAAM,aAAa,YAAC,iBAAiB,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;IAClE,CAAC;IAEM,uBAAO,GAAd,UAAe,aAAiB,EAAE,MAAmC;QAAtD,8BAAA,EAAA,iBAAiB;QAC9B,OAAO,iBAAM,OAAO,YAAC,aAAa,EAAE,MAAM,CAAC,CAAC;IAC9C,CAAC;IACH,YAAC;AAAD,CAAC,AAjCD,CAA2B,mBAAQ,GAiClC;AAjCY,sBAAK","sourcesContent":["import { BigIntish, Rounding } from '../../types';\nimport { Fraction } from './fraction';\n\nexport class Price extends Fraction {\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(...args: [BigIntish, BigIntish]) {\n    const [denominator, numerator] = args;\n    // flip them for the APR entity (fr = 1 / price)\n    super(numerator, denominator);\n  }\n\n  public static fromNumber(value: number): Price {\n    return super.fromNumber(value) as Price;\n  }\n\n  /**\n   * Flip the price (convert to the fixed rate)\n   */\n  public invert() {\n    return new Price(this.numerator, this.denominator);\n  }\n\n  public toSignificant(\n    significantDigits = 6,\n    format?: { groupSeparator: string },\n    rounding?: Rounding,\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding);\n  }\n\n  public toFixed(decimalPlaces = 4, format?: { groupSeparator: string }): string {\n    return super.toFixed(decimalPlaces, format);\n  }\n}\n"]}