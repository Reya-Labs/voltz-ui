{"version":3,"file":"tokenAmount.js","sourceRoot":"/","sources":["entities/fractions/tokenAmount.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,kEAAuC;AACvC,8CAAwB;AAExB,6CAAwD;AACxD,uCAAsC;AAEtC;IAAkD,+BAAQ;IA4BxD,qBAAsB,KAAQ,EAAE,SAAoB,EAAE,WAAuB;QAA7E,YACE,kBAAM,SAAS,EAAE,WAAW,CAAC,SAI9B;QAHC,IAAA,wBAAS,EAAC,cAAI,CAAC,eAAe,CAAC,KAAI,CAAC,QAAQ,EAAE,sBAAU,CAAC,EAAE,QAAQ,CAAC,CAAC;QACrE,KAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,KAAI,CAAC,YAAY,GAAG,cAAI,CAAC,YAAY,CAAC,cAAI,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,cAAI,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;;IACtF,CAAC;IA5BD;;;;OAIG;IACW,yBAAa,GAA3B,UAA6C,KAAQ,EAAE,SAAoB;QACzE,OAAO,IAAI,WAAW,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;IAC3C,CAAC;IAED;;;;;OAKG;IACW,gCAAoB,GAAlC,UACE,KAAQ,EACR,SAAoB,EACpB,WAAsB;QAEtB,OAAO,IAAI,WAAW,CAAC,KAAK,EAAE,SAAS,EAAE,WAAW,CAAC,CAAC;IACxD,CAAC;IASM,2BAAK,GAAZ,UAAa,aAA2C;QAA3C,8BAAA,EAAA,gBAAwB,IAAI,CAAC,KAAK,CAAC,QAAQ;QACtD,IAAA,wBAAS,EAAC,aAAa,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;QAC5D,OAAO,iBAAM,QAAQ,YAAC,IAAI,CAAC,YAAY,CAAC,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;IAC/D,CAAC;IACH,kBAAC;AAAD,CAAC,AAvCD,CAAkD,mBAAQ,GAuCzD;AAvCY,kCAAW","sourcesContent":["import invariant from 'tiny-invariant';\nimport JSBI from 'jsbi';\nimport Token from '../token';\nimport { BigintIsh, MaxUint256 } from '../../constants';\nimport { Fraction } from './fraction';\n\nexport class TokenAmount<T extends Token> extends Fraction {\n  public readonly token: T;\n\n  public readonly decimalScale: JSBI;\n\n  /**\n   * Returns a new token amount instance from the unitless amount of token, i.e. the raw amount\n   * @param token the token in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Token>(token: T, rawAmount: BigintIsh): TokenAmount<T> {\n    return new TokenAmount(token, rawAmount);\n  }\n\n  /**\n   * Construct a token amount with a denominator that is not equal to 1\n   * @param token the token\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Token>(\n    token: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh,\n  ): TokenAmount<T> {\n    return new TokenAmount(token, numerator, denominator);\n  }\n\n  protected constructor(token: T, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator);\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT');\n    this.token = token;\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(token.decimals));\n  }\n\n  public scale(decimalPlaces: number = this.token.decimals): string {\n    invariant(decimalPlaces <= this.token.decimals, 'DECIMALS');\n    return super.multiply(this.decimalScale).quotient.toString();\n  }\n}\n"]}