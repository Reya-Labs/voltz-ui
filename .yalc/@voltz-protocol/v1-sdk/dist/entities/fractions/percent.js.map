{"version":3,"file":"percent.js","sourceRoot":"/","sources":["entities/fractions/percent.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,8CAAwB;AAGxB,wDAAkC;AAElC,IAAM,WAAW,GAAG,IAAI,kBAAQ,CAAC,cAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;AAEnD;;;GAGG;AACH,SAAS,SAAS,CAAC,QAAkB;IACnC,OAAO,IAAI,OAAO,CAAC,QAAQ,CAAC,SAAS,EAAE,QAAQ,CAAC,WAAW,CAAC,CAAC;AAC/D,CAAC;AAED;IAAsB,2BAAQ;IAA9B;QAAA,qEAiCC;QAhCC;;WAEG;QACa,eAAS,GAAS,IAAI,CAAC;;IA6BzC,CAAC;IA3BC,qBAAG,GAAH,UAAI,KAA2B;QAC7B,OAAO,SAAS,CAAC,iBAAM,GAAG,YAAC,KAAK,CAAC,CAAC,CAAC;IACrC,CAAC;IAED,0BAAQ,GAAR,UAAS,KAA2B;QAClC,OAAO,SAAS,CAAC,iBAAM,QAAQ,YAAC,KAAK,CAAC,CAAC,CAAC;IAC1C,CAAC;IAED,0BAAQ,GAAR,UAAS,KAA2B;QAClC,OAAO,SAAS,CAAC,iBAAM,QAAQ,YAAC,KAAK,CAAC,CAAC,CAAC;IAC1C,CAAC;IAED,wBAAM,GAAN,UAAO,KAA2B;QAChC,OAAO,SAAS,CAAC,iBAAM,MAAM,YAAC,KAAK,CAAC,CAAC,CAAC;IACxC,CAAC;IAEM,+BAAa,GAApB,UACE,iBAAqB,EACrB,MAAmC,EACnC,QAAmB;QAFnB,kCAAA,EAAA,qBAAqB;QAIrB,OAAO,iBAAM,QAAQ,YAAC,WAAW,CAAC,CAAC,aAAa,CAAC,iBAAiB,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;IACxF,CAAC;IAEM,yBAAO,GAAd,UAAe,aAAiB,EAAE,MAAmC;QAAtD,8BAAA,EAAA,iBAAiB;QAC9B,OAAO,iBAAM,QAAQ,YAAC,WAAW,CAAC,CAAC,OAAO,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;IACpE,CAAC;IACH,cAAC;AAAD,CAAC,AAjCD,CAAsB,kBAAQ,GAiC7B;AAED,kBAAe,OAAO,CAAC","sourcesContent":["import JSBI from 'jsbi';\n\nimport { BigIntish, Rounding } from '../../types';\nimport Fraction from './fraction';\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100));\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator);\n}\n\nclass Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true;\n\n  add(other: Fraction | BigIntish): Percent {\n    return toPercent(super.add(other));\n  }\n\n  subtract(other: Fraction | BigIntish): Percent {\n    return toPercent(super.subtract(other));\n  }\n\n  multiply(other: Fraction | BigIntish): Percent {\n    return toPercent(super.multiply(other));\n  }\n\n  divide(other: Fraction | BigIntish): Percent {\n    return toPercent(super.divide(other));\n  }\n\n  public toSignificant(\n    significantDigits = 5,\n    format?: { groupSeparator: string },\n    rounding?: Rounding,\n  ): string {\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding);\n  }\n\n  public toFixed(decimalPlaces = 2, format?: { groupSeparator: string }): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format);\n  }\n}\n\nexport default Percent;\n"]}