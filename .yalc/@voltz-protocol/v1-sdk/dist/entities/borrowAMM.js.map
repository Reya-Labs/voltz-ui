{"version":3,"file":"borrowAMM.js","sourceRoot":"/","sources":["entities/borrowAMM.ts"],"names":[],"mappings":"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","sourcesContent":["import JSBI from 'jsbi';\nimport { providers, BigNumber, Signer } from 'ethers';\nimport { ONE_YEAR_IN_SECONDS } from '../constants';\nimport {\n  BaseRateOracle__factory,\n  ICToken__factory as cTokenFactory,\n  IAaveV2LendingPool__factory,\n  IERC20Minimal__factory,\n  ICToken,\n  IERC20Minimal,\n  CompoundBorrowRateOracle__factory,\n  AaveBorrowRateOracle__factory,\n} from '../typechain';\nimport RateOracle from './rateOracle';\nimport Token from './token';\nimport { Price } from './fractions/price';\nimport { TokenAmount } from './fractions/tokenAmount';\nimport Position from './position';\nimport { geckoEthToUsd } from '../utils/priceFetch';\nimport { AMM, InfoPostSwap, AMMGetInfoPostSwapArgs } from './amm';\n\nexport type BorrowAMMConstructorArgs = {\n  id: string;\n  amm: AMM;\n};\n\nexport type BorrowSwapInfo = InfoPostSwap & {\n  borrowMarginRequirement: number;\n};\n\nclass BorrowAMM {\n  public readonly id: string;\n  public readonly signer: Signer | null;\n  public readonly provider?: providers.Provider;\n  public readonly rateOracle: RateOracle;\n  public readonly termStartTimestamp: JSBI;\n  public readonly termEndTimestamp: JSBI;\n  public readonly underlyingToken: Token;\n  public readonly amm: AMM;\n\n  public cToken: ICToken | undefined;\n  public aaveVariableDebtToken: IERC20Minimal | undefined;\n\n  public underlyingDebt = 0;\n  public variableDebt = 0;\n  public fixedDebt = 0;\n  public aggregatedDebt = 0;\n\n  public constructor({ id, amm }: BorrowAMMConstructorArgs) {\n    this.id = id;\n    this.signer = amm.signer;\n    this.provider = amm.provider || amm.signer?.provider;\n    this.rateOracle = amm.rateOracle;\n    this.termStartTimestamp = amm.termStartTimestamp;\n    this.termEndTimestamp = amm.termEndTimestamp;\n    this.underlyingToken = amm.underlyingToken;\n    this.amm = amm;\n\n    const protocolId = this.rateOracle.protocolId;\n    if (protocolId !== 6 && protocolId !== 5) {\n      throw new Error('Not a borrow market');\n    }\n  }\n\n  // scale/descale according to underlying token\n\n  public descale(value: BigNumber): number {\n    if (this.underlyingToken.decimals <= 3) {\n      return value.toNumber() / 10 ** this.underlyingToken.decimals;\n    }\n    return value.div(BigNumber.from(10).pow(this.underlyingToken.decimals - 3)).toNumber() / 1000;\n  }\n\n  public scale(value: number): string {\n    const price = Price.fromNumber(value);\n    const tokenAmount = TokenAmount.fromFractionalAmount(\n      this.underlyingToken,\n      price.numerator,\n      price.denominator,\n    );\n    const scaledValue = tokenAmount.scale();\n\n    return scaledValue;\n  }\n\n  public getAllSwaps(position: Position) {\n    const allSwaps: {\n      fDelta: BigNumber;\n      vDelta: BigNumber;\n      timestamp: BigNumber;\n    }[] = [];\n\n    if (position === undefined) {\n      return allSwaps;\n    }\n\n    for (const s of position.swaps) {\n      allSwaps.push({\n        fDelta: BigNumber.from(s.fixedTokenDeltaUnbalanced.toString()),\n        vDelta: BigNumber.from(s.variableTokenDelta.toString()),\n        timestamp: BigNumber.from(s.transactionTimestamp.toString()),\n      });\n    }\n\n    allSwaps.sort((a, b) => a.timestamp.sub(b.timestamp).toNumber());\n\n    return allSwaps;\n  }\n\n  public async getAccruedCashflow(\n    allSwaps: {\n      fDelta: BigNumber;\n      vDelta: BigNumber;\n      timestamp: BigNumber;\n    }[],\n    atMaturity: boolean,\n  ): Promise<[BigNumber, BigNumber]> {\n    if (!this.provider) {\n      throw new Error('Wallet not connected');\n    }\n\n    let totalVarableCashflow = BigNumber.from(0);\n    let totalFixedCashflow = BigNumber.from(0);\n    const lenSwaps = allSwaps.length;\n\n    const lastBlock = await this.provider.getBlockNumber();\n    const lastBlockTimestamp = BigNumber.from((await this.provider.getBlock(lastBlock)).timestamp);\n\n    const untilTimestamp = atMaturity\n      ? BigNumber.from(this.termEndTimestamp.toString())\n      : lastBlockTimestamp.mul(BigNumber.from(10).pow(18));\n\n    const rateOracleContract = BaseRateOracle__factory.connect(this.rateOracle.id, this.provider);\n\n    for (let i = 0; i < lenSwaps; i++) {\n      const currentSwapTimestamp = allSwaps[i].timestamp.mul(BigNumber.from(10).pow(18));\n\n      const normalizedTime = untilTimestamp\n        .sub(currentSwapTimestamp)\n        .div(BigNumber.from(ONE_YEAR_IN_SECONDS));\n\n      const variableFactorBetweenSwaps = await rateOracleContract.callStatic.variableFactor(\n        currentSwapTimestamp,\n        untilTimestamp,\n      );\n\n      const fixedCashflow = allSwaps[i].fDelta\n        .mul(normalizedTime)\n        .div(BigNumber.from(100))\n        .div(BigNumber.from(10).pow(18));\n      const variableCashflow = allSwaps[i].vDelta\n        .mul(variableFactorBetweenSwaps)\n        .div(BigNumber.from(10).pow(18));\n\n      totalFixedCashflow = totalFixedCashflow.add(fixedCashflow);\n      totalVarableCashflow = totalVarableCashflow.add(variableCashflow);\n    }\n\n    return [totalFixedCashflow, totalVarableCashflow];\n  }\n\n  public async atMaturity(): Promise<boolean> {\n    if (!this.provider) {\n      throw new Error('Blockchain not connected');\n    }\n    // is past maturity?\n    const lastBlock = await this.provider.getBlockNumber();\n    const lastBlockTimestamp = BigNumber.from(\n      (await this.provider.getBlock(lastBlock - 1)).timestamp,\n    );\n    const pastMaturity = BigNumber.from(this.termEndTimestamp.toString()).lt(\n      lastBlockTimestamp.mul(BigNumber.from(10).pow(18)),\n    );\n\n    return pastMaturity;\n  }\n\n  public async getVariableCashFlow(position: Position): Promise<BigNumber> {\n    if (position === undefined) {\n      return BigNumber.from(0);\n    }\n    const allSwaps = this.getAllSwaps(position);\n    const pastMaturity = await this.atMaturity();\n\n    const [, variableCashFlow] = await this.getAccruedCashflow(allSwaps, pastMaturity);\n\n    return variableCashFlow;\n  }\n\n  public async getFixedCashFlow(position: Position): Promise<number> {\n    if (position === undefined) {\n      return 0;\n    }\n\n    const allSwaps = this.getAllSwaps(position);\n    const pastMaturity = await this.atMaturity();\n\n    const [fixedCashFlow] = await this.getAccruedCashflow(allSwaps, pastMaturity);\n\n    return this.descale(fixedCashFlow);\n  }\n\n  public async getScaledUnderlyingBorrowBalance(): Promise<BigNumber> {\n    if (!this.signer) {\n      throw new Error('Wallet not connected');\n    }\n\n    const protocolId = this.rateOracle.protocolId;\n    if (protocolId === 6 && !this.cToken) {\n      const compoundRateOracle = CompoundBorrowRateOracle__factory.connect(\n        this.rateOracle.id,\n        this.signer,\n      );\n      const cTokenAddress = await compoundRateOracle.ctoken();\n      this.cToken = cTokenFactory.connect(cTokenAddress, this.signer);\n    } else if (protocolId === 5 && !this.aaveVariableDebtToken) {\n      const aaveRateOracle = AaveBorrowRateOracle__factory.connect(this.rateOracle.id, this.signer);\n\n      const lendingPoolAddress = await aaveRateOracle.aaveLendingPool();\n      const lendingPool = IAaveV2LendingPool__factory.connect(lendingPoolAddress, this.signer);\n      if (!this.underlyingToken.id) {\n        throw new Error('missing underlying token address');\n      }\n      const reserve = await lendingPool.getReserveData(this.underlyingToken.id);\n      const variableDebtTokenAddress = reserve.variableDebtTokenAddress;\n      this.aaveVariableDebtToken = IERC20Minimal__factory.connect(\n        variableDebtTokenAddress,\n        this.signer,\n      );\n    }\n\n    let borrowBalance = BigNumber.from(0);\n    if (this.cToken) {\n      // compound\n      const userAddress = await this.signer.getAddress();\n      borrowBalance = await this.cToken.callStatic.borrowBalanceCurrent(userAddress);\n    } else if (this.aaveVariableDebtToken) {\n      // aave\n      const userAddress = await this.signer.getAddress();\n      borrowBalance = await this.aaveVariableDebtToken.balanceOf(userAddress);\n    }\n\n    return borrowBalance;\n  }\n\n  public async getUnderlyingBorrowBalance(): Promise<number> {\n    const borrowBalance = await this.getScaledUnderlyingBorrowBalance();\n    return this.descale(borrowBalance);\n  }\n\n  public async getFixedBorrowBalance(position: Position): Promise<number> {\n    const fixedCashFlow = await this.getFixedCashFlow(position);\n    await position.refreshInfo();\n    const notional = position.variableTokenBalance;\n\n    return notional - fixedCashFlow;\n  }\n\n  // get variable debt: debt from underlying protocol - fixed debt on Voltz\n  public async getAggregatedBorrowBalance(position: Position): Promise<number> {\n    const variableCashFlow = await this.getVariableCashFlow(position);\n    await position.refreshInfo();\n    const notional = position.variableTokenBalance;\n    const notionalWithVariableCashFlow = notional + this.amm.descale(variableCashFlow);\n\n    const notionalWithVariableCashFlowAndBuffer = notionalWithVariableCashFlow * 1.001;\n\n    const underlyingBorrowBalance = this.amm.descale(await this.getScaledUnderlyingBorrowBalance());\n\n    if (underlyingBorrowBalance >= notionalWithVariableCashFlowAndBuffer) {\n      return underlyingBorrowBalance - notionalWithVariableCashFlow;\n    }\n    return 0;\n  }\n\n  public async getBorrowInfo(infoPostSwapArgs: AMMGetInfoPostSwapArgs): Promise<BorrowSwapInfo> {\n    if (!this.signer) {\n      throw new Error('Wallet not connected');\n    }\n\n    const infoPostSwap = await this.amm.getInfoPostSwap(infoPostSwapArgs);\n\n    const variableAPYToMaturity = await this.amm.getVariableFactor(\n      BigNumber.from(this.termStartTimestamp.toString()),\n      BigNumber.from(this.termEndTimestamp.toString()),\n    );\n\n    const termStartTimestamp = BigNumber.from(this.termStartTimestamp.toString())\n      .div(BigNumber.from(10).pow(18))\n      .toNumber();\n    const termEndTimestamp = BigNumber.from(this.termEndTimestamp.toString())\n      .div(BigNumber.from(10).pow(18))\n      .toNumber();\n    const fixedFactor = ((termEndTimestamp - termStartTimestamp) / ONE_YEAR_IN_SECONDS) * 0.01;\n\n    let fcMargin = -(\n      infoPostSwap.fixedTokenDeltaBalance * fixedFactor +\n      infoPostSwap.variableTokenDeltaBalance * variableAPYToMaturity\n    );\n    fcMargin = (fcMargin + infoPostSwap.fee) * 1.01;\n    return {\n      borrowMarginRequirement: fcMargin > 0 ? fcMargin : 0,\n      ...infoPostSwap,\n    };\n  }\n\n  public async getFixedBorrowBalanceInUSD(position: Position): Promise<number> {\n    const balanceInTokens = await this.getFixedBorrowBalance(position);\n    if (this.amm && this.amm.isETH) {\n      const EthToUsdPrice = await geckoEthToUsd(process.env.REACT_APP_COINGECKO_API_KEY || '');\n      return balanceInTokens * EthToUsdPrice;\n    }\n    return balanceInTokens;\n  }\n\n  public async getUnderlyingBorrowBalanceInUSD(): Promise<number> {\n    const balanceInTokens = await this.getUnderlyingBorrowBalance();\n    if (this.amm && this.amm.isETH) {\n      const EthToUsdPrice = await geckoEthToUsd(process.env.REACT_APP_COINGECKO_API_KEY || '');\n      return balanceInTokens * EthToUsdPrice;\n    }\n    return balanceInTokens;\n  }\n\n  public async getAggregatedBorrowBalanceInUSD(position: Position): Promise<number> {\n    const balanceInTokens = await this.getAggregatedBorrowBalance(position);\n    if (this.amm && this.amm.isETH) {\n      const EthToUsdPrice = await geckoEthToUsd(process.env.REACT_APP_COINGECKO_API_KEY || '');\n      return balanceInTokens * EthToUsdPrice;\n    }\n    return balanceInTokens;\n  }\n}\n\nexport default BorrowAMM;\n"]}