{"version":3,"file":"getMellowLPVaults.js","sourceRoot":"/","sources":["entities/mellow/config/getMellowLPVaults.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,qEAA+C;AAC/C,mEAA6C;AAC7C,mCAAqC;AAG9B,IAAM,iBAAiB,GAAG,UAAC,EAMjC;QALC,OAAO,aAAA,EACP,WAAW,iBAAA;IAKX,IAAM,MAAM,GAAG,IAAA,kBAAS,EAAC;QACvB,OAAO,SAAA;QACP,WAAW,aAAA;KACZ,CAAC,CAAC;IAEH,IAAM,MAAM,GAAoB,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,UAAC,IAAI,IAAK,OAAA,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAlB,CAAkB,CAAC,CAAC,GAAG,CAC3F,UAAC,IAAI;QACH,IAAM,KAAK,GAAG,IAAI,uBAAa,CAAC;YAC9B,EAAE,EAAE,IAAI,CAAC,UAAU;YACnB,iBAAiB,EAAE,MAAM,CAAC,kBAAkB;YAC5C,qBAAqB,EAAE,IAAI,CAAC,cAAc;YAC1C,QAAQ,EAAE,MAAM,CAAC,QAAQ;YACzB,QAAQ,wBACH,IAAI,CAAC,QAAQ,KAChB,eAAe,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,UAAC,QAAQ,EAAE,YAAY;oBAClE,IAAI,YAAY,CAAC,MAAM,GAAG,CAAC,EAAE;wBAC3B,IAAM,cAAc,GAAG,YAAY,CAAC,KAAK,CAAC,MAAM,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,EAArB,CAAqB,CAAC,CAAC;wBAC/E,uCAAW,QAAQ,SAAK,cAAc,QAAE;qBACzC;oBACD,OAAO,QAAQ,CAAC;gBAClB,CAAC,EAAE,EAAc,CAAC,GACnB;SACF,CAAC,CAAC;QAEH,OAAO,KAAK,CAAC;IACf,CAAC,CACF,CAAC;IAEF,IAAM,OAAO,GAAoB,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,UAAC,IAAI,IAAK,OAAA,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAlB,CAAkB,CAAC,CAAC,GAAG,CAC7F,UAAC,IAAI;QACH,IAAM,KAAK,GAAG,IAAI,wBAAc,CAAC;YAC/B,EAAE,EAAE,iBAAU,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,WAAW,EAAE,CAAE;YACjD,mBAAmB,EAAE,IAAI,CAAC,MAAM;YAChC,QAAQ,EAAE,MAAM,CAAC,QAAQ;YACzB,QAAQ,wBACH,IAAI,CAAC,QAAQ,KAChB,eAAe,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,UAAC,QAAQ,EAAE,YAAY;oBAClE,IAAI,YAAY,CAAC,MAAM,GAAG,CAAC,EAAE;wBAC3B,IAAM,cAAc,GAAG,YAAY,CAAC,KAAK,CAAC,MAAM,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,EAArB,CAAqB,CAAC,CAAC;wBAC/E,uCAAW,QAAQ,SAAK,cAAc,QAAE;qBACzC;oBACD,OAAO,QAAQ,CAAC;gBAClB,CAAC,EAAE,EAAc,CAAC,GACnB;SACF,CAAC,CAAC;QAEH,OAAO,KAAK,CAAC;IACf,CAAC,CACF,CAAC;IAEF,OAAO,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;AAChC,CAAC,CAAC;AA1DW,QAAA,iBAAiB,qBA0D5B","sourcesContent":["import MellowLpRouter from '../mellowLpRouter';\nimport MellowLpVault from '../mellowLpVault';\nimport { getConfig } from './config';\nimport { MellowProduct } from './types';\n\nexport const getMellowLPVaults = ({\n  network,\n  providerURL,\n}: {\n  network: string;\n  providerURL: string;\n}): MellowProduct[] => {\n  const config = getConfig({\n    network,\n    providerURL,\n  });\n\n  const vaults: MellowProduct[] = config.MELLOW_VAULTS.filter((item) => item.metadata.show).map(\n    (item) => {\n      const vault = new MellowLpVault({\n        id: item.voltzVault,\n        ethWrapperAddress: config.MELLOW_ETH_WRAPPER,\n        erc20RootVaultAddress: item.erc20RootVault,\n        provider: config.PROVIDER,\n        metadata: {\n          ...item.metadata,\n          underlyingPools: item.metadata.vaults.reduce((allPools, currentVault) => {\n            if (currentVault.weight > 0) {\n              const appendingPools = currentVault.pools.filter((p) => !allPools.includes(p));\n              return [...allPools, ...appendingPools];\n            }\n            return allPools;\n          }, [] as string[]),\n        },\n      });\n\n      return vault;\n    },\n  );\n\n  const routers: MellowProduct[] = config.MELLOW_ROUTERS.filter((item) => item.metadata.show).map(\n    (item) => {\n      const vault = new MellowLpRouter({\n        id: `mellow-${item.metadata.token.toLowerCase()}`,\n        mellowRouterAddress: item.router,\n        provider: config.PROVIDER,\n        metadata: {\n          ...item.metadata,\n          underlyingPools: item.metadata.vaults.reduce((allPools, currentVault) => {\n            if (currentVault.weight > 0) {\n              const appendingPools = currentVault.pools.filter((p) => !allPools.includes(p));\n              return [...allPools, ...appendingPools];\n            }\n            return allPools;\n          }, [] as string[]),\n        },\n      });\n\n      return vault;\n    },\n  );\n\n  return routers.concat(vaults);\n};\n"]}