{"version":3,"file":"mellowLpRouter.js","sourceRoot":"/","sources":["entities/mellow/mellowLpRouter.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable no-await-in-loop */\n/* eslint-disable no-restricted-syntax */\n/* eslint-disable no-console */\n\nimport {\n  Signer,\n  providers,\n  ethers,\n  BigNumberish,\n  BigNumber,\n  ContractReceipt,\n  Contract,\n} from 'ethers';\nimport { isUndefined } from 'lodash';\nimport { toBn } from 'evm-bn';\n\nimport { getTokenInfo } from '../../services/getTokenInfo';\n\nimport { getGasBuffer, MaxUint256Bn, TresholdApprovalBn } from '../../constants';\n\nimport { abi as Erc20RootVaultABI } from '../../ABIs/Erc20RootVault.json';\nimport { abi as Erc20RootVaultGovernanceABI } from '../../ABIs/Erc20RootVaultGovernance.json';\nimport { abi as IERC20MinimalABI } from '../../ABIs/IERC20Minimal.json';\nimport { abi as MellowMultiVaultRouterABI } from '../../ABIs/MellowMultiVaultRouterABI.json';\nimport { sentryTracker } from '../../utils/sentry';\nimport { closeOrPastMaturity, MellowProductMetadata } from './config';\nimport { convertGasUnitsToUSD } from '../../utils/mellowHelpers/convertGasUnitsToUSD';\n\nexport type MellowLpRouterArgs = {\n  id: string;\n  mellowRouterAddress: string; // live in env variable per router contract\n  provider: providers.Provider;\n  metadata: MellowProductMetadata & {\n    underlyingPools: string[];\n  };\n};\n\ntype BatchedDeposit = {\n  author: string;\n  amount: BigNumber;\n};\n\nclass MellowLpRouter {\n  public readonly id: string;\n  public readonly mellowRouterAddress: string;\n  public readonly provider: providers.Provider;\n  metadata: MellowProductMetadata & {\n    underlyingPools: string[];\n  };\n\n  public readOnlyContracts?: {\n    token: Contract;\n    mellowRouterContract: Contract;\n    erc20RootVault: Contract[];\n    erc20RootVaultGovernance: Contract[];\n  };\n\n  public writeContracts?: {\n    token: Contract;\n    erc20RootVault: Contract[];\n    mellowRouter: Contract;\n  };\n\n  public signer?: Signer;\n\n  public vaultCumulative?: number;\n  public vaultCap?: number;\n\n  public userIndividualCommittedDeposits: number[] = [];\n  public userIndividualPendingDeposit: number[] = [];\n\n  public userWalletBalance?: number;\n\n  public userAddress?: string;\n\n  public vaultInitialized = false;\n  public userInitialized = false;\n\n  public vaultsCount = 0;\n\n  public constructor({ mellowRouterAddress, id, provider, metadata }: MellowLpRouterArgs) {\n    this.mellowRouterAddress = mellowRouterAddress;\n    this.id = id;\n    this.provider = provider;\n    this.metadata = metadata;\n  }\n\n  descale = (amount: BigNumberish, decimals: number): number => {\n    return Number(ethers.utils.formatUnits(amount, decimals));\n  };\n\n  scale = (amount: number): BigNumber => {\n    return ethers.utils.parseUnits(amount.toString(), this.tokenDecimals);\n  };\n\n  validateWeights = (weights: number[]): boolean => {\n    if (!weights.every((value) => Number.isInteger(value))) {\n      // All values of default weights must be integer\n      return false;\n    }\n\n    if (weights.length !== this.vaultsCount) {\n      // Lengths of vault indices and default weights array do not match\n      return false;\n    }\n\n    return true;\n  };\n\n  // NEXT: to offload this to subgraph\n  vaultInit = async (): Promise<void> => {\n    if (this.vaultInitialized) {\n      return;\n    }\n\n    if (isUndefined(this.provider)) {\n      return;\n    }\n\n    // Instantiate the mellowRouterContract\n    const mellowRouterContract = new ethers.Contract(\n      this.mellowRouterAddress,\n      MellowMultiVaultRouterABI,\n      this.provider,\n    );\n\n    // Get the token from mellowRouter.token() here\n    const tokenAddress = await mellowRouterContract.token();\n    const tokenContract = new Contract(tokenAddress, IERC20MinimalABI, this.provider);\n\n    // erc20rootvault addresses\n    const ERC20RootVaultAddresses: string[] = await mellowRouterContract.getVaults();\n    this.vaultsCount = ERC20RootVaultAddresses.length;\n\n    // Map the addresses so that each of them is instantiated into a contract\n    const erc20RootVaultContracts = ERC20RootVaultAddresses.map(\n      (address: string) => new ethers.Contract(address, Erc20RootVaultABI, this.provider),\n    );\n\n    // Instantiate an empty array of addresses\n    const erc20RootVaultGovernanceAddresses = [];\n    for (const erc20RootVaultContract of erc20RootVaultContracts) {\n      erc20RootVaultGovernanceAddresses.push(await erc20RootVaultContract.vaultGovernance());\n    }\n\n    // ERC20RootVaultGovernanceContracts stores every governance contract associated with this router\n    const erc20RootVaultGovernanceContracts = erc20RootVaultGovernanceAddresses.map(\n      (address: string) => new ethers.Contract(address, Erc20RootVaultGovernanceABI, this.provider),\n    );\n\n    this.readOnlyContracts = {\n      token: tokenContract,\n      erc20RootVault: erc20RootVaultContracts,\n      erc20RootVaultGovernance: erc20RootVaultGovernanceContracts,\n      mellowRouterContract,\n    };\n\n    await this.refreshVaultCumulative();\n\n    this.userIndividualCommittedDeposits = new Array(this.vaultsCount).fill(0x0);\n    this.userIndividualPendingDeposit = new Array(this.vaultsCount).fill(0x0);\n\n    this.vaultInitialized = true;\n  };\n\n  userInit = async (signer: Signer): Promise<void> => {\n    this.signer = signer;\n\n    if (this.userInitialized) {\n      return;\n    }\n\n    if (!this.vaultInitialized) {\n      return;\n    }\n\n    if (isUndefined(this.readOnlyContracts)) {\n      throw new Error('Uninitialized contracts.');\n    }\n\n    this.userAddress = await this.signer.getAddress();\n\n    this.writeContracts = {\n      token: new Contract(this.readOnlyContracts.token.address, IERC20MinimalABI, this.signer),\n      erc20RootVault: this.readOnlyContracts.erc20RootVault.map(\n        (contract) => new ethers.Contract(contract.address, Erc20RootVaultABI, this.signer),\n      ),\n      mellowRouter: new ethers.Contract(\n        this.mellowRouterAddress,\n        MellowMultiVaultRouterABI,\n        this.signer,\n      ),\n    };\n\n    await this.refreshUserDeposit();\n    await this.refreshWalletBalance();\n\n    this.userInitialized = true;\n  };\n\n  public get tokenName(): string {\n    if (isUndefined(this.readOnlyContracts)) {\n      return '-';\n    }\n\n    return getTokenInfo(this.readOnlyContracts.token.address).name;\n  }\n\n  public get isETH(): boolean {\n    return this.tokenName === 'ETH';\n  }\n\n  public get tokenDecimals(): number {\n    if (isUndefined(this.readOnlyContracts)) {\n      return 18;\n    }\n\n    return getTokenInfo(this.readOnlyContracts.token.address).decimals;\n  }\n\n  public get expired(): boolean {\n    const latestMaturity = Math.max(...this.metadata.vaults.map((v) => v.maturityTimestampMS));\n    return closeOrPastMaturity(latestMaturity);\n  }\n\n  public get depositable(): boolean {\n    return !this.metadata.deprecated && !this.expired;\n  }\n\n  public withdrawable(vaultIndex: number): boolean {\n    return (\n      this.metadata.vaults[vaultIndex].withdrawable &&\n      Date.now().valueOf() > this.metadata.vaults[vaultIndex].maturityTimestampMS\n    );\n  }\n\n  public rolloverable(vaultIndex: number): boolean {\n    return this.withdrawable(vaultIndex);\n  }\n\n  public get userComittedDeposit(): number {\n    return this.userIndividualCommittedDeposits.reduce((total, deposit) => total + deposit, 0);\n  }\n\n  public get userPendingDeposit(): number {\n    return this.userIndividualPendingDeposit.reduce((total, deposit) => total + deposit, 0);\n  }\n\n  public get userIndividualDeposits(): number[] {\n    if (\n      !(this.userIndividualPendingDeposit.length === this.userIndividualCommittedDeposits.length)\n    ) {\n      return [];\n    }\n\n    return this.userIndividualPendingDeposit.map(\n      (pendingDeposit, index) => pendingDeposit + this.userIndividualCommittedDeposits[index],\n    );\n  }\n\n  public get userDeposit(): number {\n    return this.userIndividualDeposits.reduce((total, deposit) => total + deposit, 0);\n  }\n\n  refreshVaultCumulative = async (): Promise<void> => {\n    this.vaultCumulative = 0;\n    this.vaultCap = 0;\n\n    if (isUndefined(this.readOnlyContracts)) {\n      return;\n    }\n\n    for (const erc20RootVaultContract of this.readOnlyContracts.erc20RootVault) {\n      const totalLpTokens = await erc20RootVaultContract.totalSupply();\n      const tvl = await erc20RootVaultContract.tvl();\n\n      const nft = await erc20RootVaultContract.nft();\n\n      for (const erc20RootVaultGovernanceContract of this.readOnlyContracts\n        .erc20RootVaultGovernance) {\n        const strategyParams = await erc20RootVaultGovernanceContract.strategyParams(nft);\n\n        const vaultCumulative = this.descale(tvl.minTokenAmounts[0], this.tokenDecimals);\n        const vaultCap = this.descale(\n          totalLpTokens.mul(toBn('1', 18)).div(strategyParams.tokenLimit),\n          16,\n        );\n\n        this.vaultCumulative += vaultCumulative;\n        this.vaultCap += vaultCap;\n      }\n    }\n  };\n\n  refreshUserComittedDeposit = async (): Promise<void> => {\n    this.userIndividualCommittedDeposits = this.userIndividualCommittedDeposits.map(() => 0);\n\n    if (\n      isUndefined(this.userAddress) ||\n      isUndefined(this.readOnlyContracts) ||\n      isUndefined(this.tokenDecimals)\n    ) {\n      return;\n    }\n\n    const lpTokensBalances: BigNumber[] =\n      await this.readOnlyContracts.mellowRouterContract.getLPTokenBalances(this.userAddress);\n\n    for (let i = 0; i < this.readOnlyContracts.erc20RootVault.length; i += 1) {\n      const erc20RootVaultContract = this.readOnlyContracts.erc20RootVault[i];\n      const lpTokensBalance = lpTokensBalances[i];\n\n      const totalLpTokens = await erc20RootVaultContract.totalSupply();\n\n      const tvl = await erc20RootVaultContract.tvl();\n\n      if (totalLpTokens.gt(0)) {\n        const userFunds = lpTokensBalance.mul(tvl[0][0]).div(totalLpTokens);\n        this.userIndividualCommittedDeposits[i] = this.descale(userFunds, this.tokenDecimals);\n      }\n    }\n  };\n\n  refreshUserPendingDeposit = async (): Promise<void> => {\n    this.userIndividualPendingDeposit = this.userIndividualPendingDeposit.map(() => 0);\n\n    if (\n      isUndefined(this.userAddress) ||\n      isUndefined(this.readOnlyContracts) ||\n      isUndefined(this.tokenDecimals)\n    ) {\n      return;\n    }\n\n    for (let i = 0; i < this.vaultsCount; i += 1) {\n      const batchedDeposits: BatchedDeposit[] =\n        await this.readOnlyContracts.mellowRouterContract.getBatchedDeposits(i);\n\n      const userBatchedDeposits: BatchedDeposit[] = batchedDeposits.filter(\n        (batchedDeposit) => batchedDeposit.author.toLowerCase() === this.userAddress?.toLowerCase(),\n      );\n\n      const userPendingFunds = userBatchedDeposits.reduce(\n        (sum, batchedDeposit) => sum.add(batchedDeposit.amount),\n        BigNumber.from(0),\n      );\n\n      const userPendingDeposit = this.descale(userPendingFunds, this.tokenDecimals);\n      this.userIndividualPendingDeposit[i] += userPendingDeposit;\n    }\n  };\n\n  refreshUserDeposit = async (): Promise<void> => {\n    await this.refreshUserComittedDeposit();\n    await this.refreshUserPendingDeposit();\n  };\n\n  refreshWalletBalance = async (): Promise<void> => {\n    if (\n      isUndefined(this.userAddress) ||\n      isUndefined(this.readOnlyContracts) ||\n      isUndefined(this.provider) ||\n      isUndefined(this.tokenDecimals)\n    ) {\n      this.userWalletBalance = 0;\n      return;\n    }\n\n    const walletBalance = this.isETH\n      ? await this.provider.getBalance(this.userAddress)\n      : await this.readOnlyContracts.token.balanceOf(this.userAddress);\n\n    this.userWalletBalance = this.descale(walletBalance, this.tokenDecimals);\n  };\n\n  isTokenApproved = async (): Promise<boolean> => {\n    if (this.isETH) {\n      return true;\n    }\n\n    if (\n      isUndefined(this.userAddress) ||\n      isUndefined(this.readOnlyContracts) ||\n      isUndefined(this.tokenDecimals)\n    ) {\n      return false;\n    }\n\n    const tokenApproval = await this.readOnlyContracts.token.allowance(\n      this.userAddress,\n      this.writeContracts?.mellowRouter.address,\n    );\n\n    return tokenApproval.gte(TresholdApprovalBn);\n  };\n\n  approveToken = async (): Promise<ContractReceipt> => {\n    if (isUndefined(this.readOnlyContracts) || isUndefined(this.writeContracts)) {\n      throw new Error('Uninitialized contracts.');\n    }\n\n    const gasLimit = await this.writeContracts.token.estimateGas.approve(\n      this.writeContracts.mellowRouter.address,\n      MaxUint256Bn,\n    );\n\n    const tx = await this.writeContracts.token.approve(\n      this.writeContracts.mellowRouter.address,\n      MaxUint256Bn,\n      {\n        gasLimit: getGasBuffer(gasLimit),\n      },\n    );\n\n    try {\n      const receipt = await tx.wait();\n      return receipt;\n    } catch (error) {\n      sentryTracker.captureException(error);\n      sentryTracker.captureMessage('Unsuccessful approval confirmation.');\n      throw new Error('Unsuccessful approval confirmation.');\n    }\n  };\n\n  deposit = async (\n    amount: number,\n    _weights: number[],\n    registration?: boolean | undefined,\n  ): Promise<ContractReceipt> => {\n    if (\n      isUndefined(this.readOnlyContracts) ||\n      isUndefined(this.writeContracts) ||\n      isUndefined(this.userAddress)\n    ) {\n      throw new Error('Uninitialized contracts.');\n    }\n\n    const weights = _weights;\n    while (weights.length < this.vaultsCount) {\n      weights.push(0);\n    }\n\n    if (!this.validateWeights(weights)) {\n      throw new Error('Weights are invalid');\n    }\n\n    const scaledAmount = this.scale(amount);\n    const tempOverrides: { value?: BigNumber; gasLimit?: BigNumber } = {};\n\n    if (this.isETH) {\n      tempOverrides.value = scaledAmount;\n    }\n\n    if (registration !== undefined) {\n      try {\n        if (this.isETH) {\n          this.writeContracts.mellowRouter.callStatic.depositEthAndRegisterForAutoRollover(\n            weights,\n            registration,\n            tempOverrides,\n          );\n        } else {\n          await this.writeContracts.mellowRouter.callStatic.depositErc20AndRegisterForAutoRollover(\n            scaledAmount,\n            weights,\n            registration,\n          );\n        }\n      } catch (error) {\n        console.error('Error when simulating depositAndRegisterForAutoRollover.', error);\n        sentryTracker.captureException(error);\n        sentryTracker.captureMessage('Unsuccessful depositAndRegisterForAutoRollover simulation.');\n        throw new Error('Unsuccessful depositAndRegisterForAutoRollover simulation.');\n      }\n\n      if (this.isETH) {\n        const gasLimit =\n          await this.writeContracts.mellowRouter.estimateGas.depositEthAndRegisterForAutoRollover(\n            weights,\n            registration,\n            tempOverrides,\n          );\n        tempOverrides.gasLimit = getGasBuffer(gasLimit);\n      } else {\n        const gasLimit =\n          await this.writeContracts.mellowRouter.estimateGas.depositErc20AndRegisterForAutoRollover(\n            scaledAmount,\n            weights,\n            registration,\n            tempOverrides,\n          );\n        tempOverrides.gasLimit = getGasBuffer(gasLimit);\n      }\n\n      const tx = this.isETH\n        ? await this.writeContracts.mellowRouter.depositEthAndRegisterForAutoRollover(\n            weights,\n            registration,\n            tempOverrides,\n          )\n        : await this.writeContracts.mellowRouter.depositErc20AndRegisterForAutoRollover(\n            scaledAmount,\n            weights,\n            registration,\n            tempOverrides,\n          );\n\n      try {\n        const receipt = await tx.wait();\n\n        try {\n          await this.refreshUserDeposit();\n        } catch (error) {\n          sentryTracker.captureException(error);\n          sentryTracker.captureMessage(\n            'User deposit failed to refresh after depositAndRegisterForAutoRollover',\n          );\n          console.error(\n            'User deposit failed to refresh after depositAndRegisterForAutoRollover.',\n            error,\n          );\n        }\n\n        try {\n          await this.refreshWalletBalance();\n        } catch (error) {\n          sentryTracker.captureException(error);\n          sentryTracker.captureMessage(\n            'Wallet user balance failed to refresh after depositAndRegisterForAutoRollover',\n          );\n          console.error(\n            'Wallet user balance failed to refresh after depositAndRegisterForAutoRollover.',\n            error,\n          );\n        }\n\n        return receipt;\n      } catch (error) {\n        console.error('Unsuccessful depositAndRegisterForAutoRollover confirmation.', error);\n        sentryTracker.captureException(error);\n        sentryTracker.captureMessage(\n          'Unsuccessful depositAndRegisterForAutoRollover confirmation.',\n        );\n        throw new Error('Unsuccessful depositAndRegisterForAutoRollover confirmation.');\n      }\n    } else {\n      try {\n        if (this.isETH) {\n          this.writeContracts.mellowRouter.callStatic.depositEth(weights, tempOverrides);\n        } else {\n          await this.writeContracts.mellowRouter.callStatic.depositErc20(scaledAmount, weights);\n        }\n      } catch (error) {\n        console.error('Error when simulating deposit.', error);\n        sentryTracker.captureException(error);\n        sentryTracker.captureMessage('Unsuccessful deposit simulation.');\n        throw new Error('Unsuccessful deposit simulation.');\n      }\n\n      if (this.isETH) {\n        const gasLimit = await this.writeContracts.mellowRouter.estimateGas.depositEth(\n          weights,\n          tempOverrides,\n        );\n        tempOverrides.gasLimit = getGasBuffer(gasLimit);\n      } else {\n        const gasLimit = await this.writeContracts.mellowRouter.estimateGas.depositErc20(\n          scaledAmount,\n          weights,\n          tempOverrides,\n        );\n        tempOverrides.gasLimit = getGasBuffer(gasLimit);\n      }\n\n      const tx = this.isETH\n        ? await this.writeContracts.mellowRouter.depositEth(weights, tempOverrides)\n        : await this.writeContracts.mellowRouter.depositErc20(scaledAmount, weights, tempOverrides);\n\n      try {\n        const receipt = await tx.wait();\n\n        try {\n          await this.refreshUserDeposit();\n        } catch (error) {\n          sentryTracker.captureException(error);\n          sentryTracker.captureMessage('User deposit failed to refresh after deposit');\n          console.error('User deposit failed to refresh after deposit.', error);\n        }\n\n        try {\n          await this.refreshWalletBalance();\n        } catch (error) {\n          sentryTracker.captureException(error);\n          sentryTracker.captureMessage('Wallet user balance failed to refresh after deposit');\n          console.error('Wallet user balance failed to refresh after deposit.', error);\n        }\n\n        return receipt;\n      } catch (error) {\n        console.error('Unsuccessful deposit confirmation.', error);\n        sentryTracker.captureException(error);\n        sentryTracker.captureMessage('Unsuccessful deposit confirmation.');\n        throw new Error('Unsuccessful deposit confirmation.');\n      }\n    }\n  };\n\n  withdraw = async (vaultIndex: number): Promise<ContractReceipt> => {\n    if (\n      isUndefined(this.readOnlyContracts) ||\n      isUndefined(this.writeContracts) ||\n      isUndefined(this.userAddress)\n    ) {\n      throw new Error('Uninitialized contracts.');\n    }\n\n    const subvaultsCount: number = (\n      await this.readOnlyContracts.erc20RootVault[vaultIndex].subvaultNfts()\n    ).length;\n\n    const minTokenAmounts = BigNumber.from(0);\n    const vaultsOptions = new Array(subvaultsCount).fill(0x0);\n\n    console.log(`Calling claimLPTokens(${vaultIndex}, ${[minTokenAmounts]}, [${vaultsOptions}])`);\n\n    try {\n      await this.writeContracts.mellowRouter.callStatic.claimLPTokens(\n        vaultIndex,\n        [minTokenAmounts],\n        vaultsOptions,\n      );\n    } catch (err) {\n      console.error('Error during claimLPTokens:', err);\n      sentryTracker.captureException(err);\n      sentryTracker.captureMessage('Unsuccessful claimLPTokens simulation.');\n      throw new Error('Unsuccessful claimLPTokens simulation.');\n    }\n\n    const gasLimit = await this.writeContracts.mellowRouter.estimateGas.claimLPTokens(\n      vaultIndex,\n      [minTokenAmounts],\n      vaultsOptions,\n    );\n\n    const tx = await this.writeContracts.mellowRouter.claimLPTokens(\n      vaultIndex,\n      [minTokenAmounts],\n      vaultsOptions,\n      {\n        gasLimit: getGasBuffer(gasLimit),\n      },\n    );\n\n    try {\n      const receipt = await tx.wait();\n\n      try {\n        await this.refreshWalletBalance();\n      } catch (err) {\n        sentryTracker.captureException(err);\n        sentryTracker.captureMessage('Wallet user balance failed to refresh after withdrawal');\n        console.error('Wallet user balance failed to refresh after withdraw');\n      }\n\n      try {\n        await this.refreshUserDeposit();\n      } catch (err) {\n        sentryTracker.captureException(err);\n        sentryTracker.captureMessage('User deposit failed to refresh after withdrawal');\n        console.error('User deposit failed to refresh after withdraw');\n      }\n\n      return receipt;\n    } catch (err) {\n      sentryTracker.captureException(err);\n      sentryTracker.captureMessage('Unsucessful withdrawal confirmation.');\n      throw new Error('Unsucessful withdraw confirmation.');\n    }\n  };\n\n  rollover = async (vaultIndex: number, _weights: number[]): Promise<ContractReceipt> => {\n    if (\n      isUndefined(this.readOnlyContracts) ||\n      isUndefined(this.writeContracts) ||\n      isUndefined(this.userAddress)\n    ) {\n      throw new Error('Uninitialized contracts.');\n    }\n\n    const weights = _weights;\n    while (weights.length < this.vaultsCount) {\n      weights.push(0);\n    }\n\n    if (!this.validateWeights(weights)) {\n      throw new Error('Weights are invalid');\n    }\n\n    const subvaultsCount: number = (\n      await this.readOnlyContracts.erc20RootVault[vaultIndex].subvaultNfts()\n    ).length;\n\n    const minTokenAmounts = BigNumber.from(0);\n    const vaultsOptions = new Array(subvaultsCount).fill(0x0);\n\n    console.log(\n      `Calling rolloverLPTokens(${vaultIndex}, ${[\n        minTokenAmounts,\n      ]}, [${vaultsOptions}], ${weights})`,\n    );\n\n    try {\n      await this.writeContracts.mellowRouter.callStatic.rolloverLPTokens(\n        vaultIndex,\n        [minTokenAmounts],\n        vaultsOptions,\n        weights,\n      );\n    } catch (err) {\n      console.error('Error during rolloverLPTokens', err);\n      throw new Error('Unsuccessful rolloverLPTokens simulation.');\n    }\n\n    const gasLimit = await this.writeContracts.mellowRouter.estimateGas.rolloverLPTokens(\n      vaultIndex,\n      [minTokenAmounts],\n      vaultsOptions,\n      weights,\n    );\n\n    const tx = await this.writeContracts.mellowRouter.rolloverLPTokens(\n      vaultIndex,\n      [minTokenAmounts],\n      vaultsOptions,\n      weights,\n      {\n        gasLimit: getGasBuffer(gasLimit),\n      },\n    );\n\n    try {\n      const receipt = await tx.wait();\n\n      try {\n        await this.refreshWalletBalance();\n      } catch (err) {\n        sentryTracker.captureException(err);\n        sentryTracker.captureMessage('Wallet user balance failed to refresh after rollover');\n        console.error('Wallet user balance failed to refresh after rollover');\n      }\n\n      try {\n        await this.refreshUserDeposit();\n      } catch (err) {\n        sentryTracker.captureException(err);\n        sentryTracker.captureMessage('User deposit failed to refresh after rollover');\n        console.error('User deposit failed to refresh after rollover');\n      }\n\n      return receipt;\n    } catch (err) {\n      sentryTracker.captureException(err);\n      sentryTracker.captureMessage('Unsucessful rollover confirmation.');\n      throw new Error('Unsucessful rollover confirmation.');\n    }\n  };\n\n  registerForAutoRollover = async (registration: boolean): Promise<ContractReceipt> => {\n    if (isUndefined(this.writeContracts) || isUndefined(this.userAddress)) {\n      throw new Error('Uninitialized contracts.');\n    }\n\n    try {\n      await this.writeContracts.mellowRouter.callStatic.registerForAutoRollover(registration);\n    } catch (err) {\n      sentryTracker.captureException(err);\n      sentryTracker.captureMessage('Unsuccessful auto-rollover registration simulation');\n      console.error('Error during registration for auto-rollover', err);\n      throw new Error('Unsuccessful auto-rollover registration simulation');\n    }\n\n    const gasLimit = await this.writeContracts.mellowRouter.estimateGas.registerForAutoRollover(\n      registration,\n    );\n\n    const tx = await this.writeContracts.mellowRouter.registerForAutoRollover(registration, {\n      gasLimit: getGasBuffer(gasLimit),\n    });\n\n    try {\n      const receipt = await tx.wait();\n\n      return receipt;\n    } catch (err) {\n      sentryTracker.captureException(err);\n      sentryTracker.captureMessage('Unsucessful auto-rollover registration confirmation.');\n      throw new Error('Unsucessful auto-rollover registration confirmation.');\n    }\n  };\n\n  gasRegisterForAutoRollover = async (registration: boolean): Promise<number> => {\n    if (isUndefined(this.writeContracts) || isUndefined(this.userAddress)) {\n      throw new Error('Uninitialized contracts.');\n    }\n\n    try {\n      await this.writeContracts.mellowRouter.callStatic.registerForAutoRollover(registration);\n    } catch (err) {\n      sentryTracker.captureException(err);\n      sentryTracker.captureMessage('Unsuccessful auto-rollover registration simulation');\n      console.error('Error during registration for auto-rollover', err);\n      throw new Error('Unsuccessful auto-rollover registration simulation');\n    }\n\n    // returns gas estimate in gas units\n    const gasUnitsEstimate =\n      await this.writeContracts.mellowRouter.estimateGas.registerForAutoRollover(registration);\n\n    // convert gas estimate from gas units into usd\n    const gasPriceUSD = await convertGasUnitsToUSD(gasUnitsEstimate);\n    return gasPriceUSD;\n  };\n\n  getAutorolloverRegistrationFlag = async (): Promise<boolean> => {\n    if (isUndefined(this.readOnlyContracts) || isUndefined(this.userAddress)) {\n      throw new Error('Uninitialized contracts.');\n    }\n\n    try {\n      const isWalletAutorolloverRegistered =\n        await this.readOnlyContracts.mellowRouterContract.isRegisteredForAutoRollover(\n          this.userAddress,\n        );\n      return isWalletAutorolloverRegistered;\n    } catch (err) {\n      sentryTracker.captureException(err);\n      sentryTracker.captureMessage(\n        'Unsuccessful auto-rollover registration verificaiton simulation',\n      );\n      console.error('Error during auto-rollover registration verificaiton simulation', err);\n      throw new Error('Unsuccessful auto-rollover registration verificaiton simulation');\n    }\n  };\n}\n\nexport default MellowLpRouter;\n"]}