{"version":3,"file":"mellowLpVault.js","sourceRoot":"/","sources":["entities/mellow/mellowLpVault.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable no-console */\n\nimport {\n  Signer,\n  providers,\n  ethers,\n  BigNumberish,\n  BigNumber,\n  ContractReceipt,\n  Contract,\n} from 'ethers';\nimport { isUndefined } from 'lodash';\nimport { toBn } from 'evm-bn';\n\nimport { getTokenInfo } from '../../services/getTokenInfo';\nimport { getGasBuffer, MaxUint256Bn, TresholdApprovalBn } from '../../constants';\n\nimport { abi as Erc20RootVaultABI } from '../../ABIs/Erc20RootVault.json';\nimport { abi as Erc20RootVaultGovernanceABI } from '../../ABIs/Erc20RootVaultGovernance.json';\nimport { abi as IERC20MinimalABI } from '../../ABIs/IERC20Minimal.json';\nimport { abi as MellowDepositWrapperABI } from '../../ABIs/MellowDepositWrapper.json';\nimport { sentryTracker } from '../../utils/sentry';\nimport { MellowProductMetadata } from './config/types';\nimport { closeOrPastMaturity } from './config';\n\nexport type MellowLpVaultArgs = {\n  id: string;\n  ethWrapperAddress: string;\n  erc20RootVaultAddress: string;\n  provider: providers.Provider;\n  metadata: MellowProductMetadata & {\n    underlyingPools: string[];\n  };\n};\n\nclass MellowLpVault {\n  public readonly id: string;\n  public readonly provider: providers.Provider;\n  metadata: MellowProductMetadata & {\n    underlyingPools: string[];\n  };\n\n  public readonly ethWrapperAddress: string;\n  public readonly erc20RootVaultAddress: string;\n\n  public readOnlyContracts?: {\n    token: Contract;\n    erc20RootVault: Contract[];\n    erc20RootVaultGovernance: Contract[];\n  };\n\n  public writeContracts?: {\n    token: Contract;\n    erc20RootVault: Contract[];\n    ethWrapper: Contract;\n  };\n\n  public signer?: Signer;\n\n  public vaultCumulative?: number;\n  public vaultCap?: number;\n\n  public userIndividualCommittedDeposits: number[] = [];\n  public userIndividualPendingDeposit: number[] = [];\n\n  public userWalletBalance?: number;\n\n  public userAddress?: string;\n\n  public vaultInitialized = false;\n  public userInitialized = false;\n\n  public vaultsCount = 1;\n\n  public constructor({\n    id,\n    ethWrapperAddress,\n    erc20RootVaultAddress,\n    provider,\n    metadata,\n  }: MellowLpVaultArgs) {\n    this.id = id;\n    this.ethWrapperAddress = ethWrapperAddress;\n    this.erc20RootVaultAddress = erc20RootVaultAddress;\n    this.provider = provider;\n    this.metadata = metadata;\n\n    if (!(this.metadata.vaults.length === 1)) {\n      throw Error('This should be used for only one vault');\n    }\n\n    this.userIndividualCommittedDeposits = [0];\n    this.userIndividualPendingDeposit = [0];\n  }\n\n  descale = (amount: BigNumberish, decimals: number): number => {\n    return Number(ethers.utils.formatUnits(amount, decimals));\n  };\n\n  scale = (amount: number): BigNumber => {\n    return ethers.utils.parseUnits(amount.toString(), this.tokenDecimals);\n  };\n\n  // NEXT: to offload this to subgraph\n  vaultInit = async (): Promise<void> => {\n    if (this.vaultInitialized) {\n      return;\n    }\n\n    if (isUndefined(this.provider)) {\n      return;\n    }\n\n    const erc20RootVaultContract = new ethers.Contract(\n      this.erc20RootVaultAddress,\n      Erc20RootVaultABI,\n      this.provider,\n    );\n\n    const tokenAddress = (await erc20RootVaultContract.vaultTokens())[0];\n    const tokenContract = new Contract(tokenAddress, IERC20MinimalABI, this.provider);\n\n    const erc20RootVaultGovernanceAddress = await erc20RootVaultContract.vaultGovernance();\n    const erc20RootVaultGovernanceContract = new ethers.Contract(\n      erc20RootVaultGovernanceAddress,\n      Erc20RootVaultGovernanceABI,\n      this.provider,\n    );\n\n    this.readOnlyContracts = {\n      token: tokenContract,\n      erc20RootVault: [erc20RootVaultContract],\n      erc20RootVaultGovernance: [erc20RootVaultGovernanceContract],\n    };\n\n    await this.refreshVaultCumulative();\n\n    this.vaultInitialized = true;\n  };\n\n  userInit = async (signer: Signer): Promise<void> => {\n    this.signer = signer;\n\n    if (this.userInitialized) {\n      return;\n    }\n\n    if (!this.vaultInitialized) {\n      return;\n    }\n\n    if (isUndefined(this.readOnlyContracts)) {\n      throw new Error('Uninitialized contracts.');\n    }\n\n    this.userAddress = await this.signer.getAddress();\n\n    this.writeContracts = {\n      token: new ethers.Contract(\n        this.readOnlyContracts.token.address,\n        IERC20MinimalABI,\n        this.signer,\n      ),\n      erc20RootVault: this.readOnlyContracts.erc20RootVault.map(\n        (contract) => new ethers.Contract(contract.address, Erc20RootVaultABI, this.signer),\n      ),\n      ethWrapper: new ethers.Contract(this.ethWrapperAddress, MellowDepositWrapperABI, this.signer),\n    };\n\n    await this.refreshUserDeposit();\n    await this.refreshWalletBalance();\n\n    this.userInitialized = true;\n  };\n\n  public get tokenName(): string {\n    if (isUndefined(this.readOnlyContracts)) {\n      return '-';\n    }\n\n    return getTokenInfo(this.readOnlyContracts.token.address).name;\n  }\n\n  public get isETH(): boolean {\n    return this.tokenName === 'ETH';\n  }\n\n  public get tokenDecimals(): number {\n    if (isUndefined(this.readOnlyContracts)) {\n      return 18;\n    }\n\n    return getTokenInfo(this.readOnlyContracts.token.address).decimals;\n  }\n\n  public get expired(): boolean {\n    const latestMaturity = Math.max(...this.metadata.vaults.map((v) => v.maturityTimestampMS));\n    return closeOrPastMaturity(latestMaturity);\n  }\n\n  public get depositable(): boolean {\n    return !this.metadata.deprecated && !this.expired;\n  }\n\n  public withdrawable(): boolean {\n    return (\n      this.metadata.vaults[0].withdrawable &&\n      Date.now().valueOf() > this.metadata.vaults[0].maturityTimestampMS\n    );\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  public rolloverable(): boolean {\n    return false;\n  }\n\n  public get userComittedDeposit(): number {\n    return this.userIndividualCommittedDeposits.reduce((total, deposit) => total + deposit, 0);\n  }\n\n  public get userPendingDeposit(): number {\n    return this.userIndividualPendingDeposit.reduce((total, deposit) => total + deposit, 0);\n  }\n\n  public get userIndividualDeposits(): number[] {\n    if (\n      !(this.userIndividualPendingDeposit.length === this.userIndividualCommittedDeposits.length)\n    ) {\n      return [];\n    }\n\n    return this.userIndividualPendingDeposit.map(\n      (pendingDeposit, index) => pendingDeposit + this.userIndividualCommittedDeposits[index],\n    );\n  }\n\n  public get userDeposit(): number {\n    return this.userIndividualDeposits.reduce((total, deposit) => total + deposit, 0);\n  }\n\n  refreshVaultCumulative = async (): Promise<void> => {\n    if (isUndefined(this.readOnlyContracts)) {\n      this.vaultCumulative = 0;\n      this.vaultCap = 0;\n      return;\n    }\n\n    const totalLpTokens = await this.readOnlyContracts.erc20RootVault[0].totalSupply();\n\n    if (totalLpTokens.eq(0)) {\n      this.vaultCumulative = 0;\n      this.vaultCap = 0;\n      return;\n    }\n\n    const tvl = await this.readOnlyContracts.erc20RootVault[0].tvl();\n\n    const nft = await this.readOnlyContracts.erc20RootVault[0].nft();\n    const strategyParams = await this.readOnlyContracts.erc20RootVaultGovernance[0].strategyParams(\n      nft,\n    );\n\n    this.vaultCumulative = this.descale(tvl.minTokenAmounts[0], this.tokenDecimals);\n    this.vaultCap = this.descale(\n      totalLpTokens.mul(toBn('1', 18)).div(strategyParams.tokenLimit),\n      16,\n    );\n  };\n\n  refreshUserDeposit = async (): Promise<void> => {\n    this.userIndividualCommittedDeposits = [0];\n    if (\n      isUndefined(this.userAddress) ||\n      isUndefined(this.readOnlyContracts) ||\n      isUndefined(this.tokenDecimals)\n    ) {\n      return;\n    }\n\n    const lpTokens = await this.readOnlyContracts.erc20RootVault[0].balanceOf(this.userAddress);\n    const totalLpTokens = await this.readOnlyContracts.erc20RootVault[0].totalSupply();\n\n    const tvl = await this.readOnlyContracts.erc20RootVault[0].tvl();\n\n    if (totalLpTokens.gt(0)) {\n      const userFunds = lpTokens.mul(tvl[0][0]).div(totalLpTokens);\n      this.userIndividualCommittedDeposits[0] = this.descale(userFunds, this.tokenDecimals);\n    } else {\n      this.userIndividualCommittedDeposits[0] = 0;\n    }\n  };\n\n  refreshWalletBalance = async (): Promise<void> => {\n    if (\n      isUndefined(this.userAddress) ||\n      isUndefined(this.readOnlyContracts) ||\n      isUndefined(this.provider) ||\n      isUndefined(this.tokenDecimals)\n    ) {\n      this.userWalletBalance = 0;\n      return;\n    }\n\n    const walletBalance = this.isETH\n      ? await this.provider.getBalance(this.userAddress)\n      : await this.readOnlyContracts.token.balanceOf(this.userAddress);\n\n    this.userWalletBalance = this.descale(walletBalance, this.tokenDecimals);\n  };\n\n  isTokenApproved = async (): Promise<boolean> => {\n    if (this.isETH) {\n      return true;\n    }\n\n    if (\n      isUndefined(this.userAddress) ||\n      isUndefined(this.readOnlyContracts) ||\n      isUndefined(this.tokenDecimals)\n    ) {\n      return false;\n    }\n\n    const tokenApproval = await this.readOnlyContracts.token.allowance(\n      this.userAddress,\n      this.readOnlyContracts.erc20RootVault[0].address,\n    );\n\n    return tokenApproval.gte(TresholdApprovalBn);\n  };\n\n  approveToken = async (): Promise<ContractReceipt> => {\n    if (isUndefined(this.readOnlyContracts) || isUndefined(this.writeContracts)) {\n      throw new Error('Uninitialized contracts.');\n    }\n\n    const gasLimit = await this.writeContracts.token.estimateGas.approve(\n      this.readOnlyContracts.erc20RootVault[0].address,\n      MaxUint256Bn,\n    );\n\n    const tx = await this.writeContracts.token.approve(\n      this.readOnlyContracts.erc20RootVault[0].address,\n      MaxUint256Bn,\n      {\n        gasLimit: getGasBuffer(gasLimit),\n      },\n    );\n\n    try {\n      const receipt = await tx.wait();\n      return receipt;\n    } catch (error) {\n      console.error('Unsuccessful approval confirmation.', error);\n      sentryTracker.captureException(error);\n      sentryTracker.captureMessage('Unsuccessful approval confirmation.');\n      throw new Error('Unsuccessful approval confirmation.');\n    }\n  };\n\n  deposit = async (amount: number): Promise<ContractReceipt> => {\n    if (\n      isUndefined(this.readOnlyContracts) ||\n      isUndefined(this.writeContracts) ||\n      isUndefined(this.userAddress)\n    ) {\n      throw new Error('Uninitialized contracts.');\n    }\n\n    const scaledAmount = this.scale(amount);\n    const minLPTokens = BigNumber.from(0);\n\n    const tempOverrides: { value?: BigNumber; gasLimit?: BigNumber } = {};\n\n    if (this.isETH) {\n      tempOverrides.value = scaledAmount;\n    }\n\n    try {\n      if (this.isETH) {\n        this.writeContracts.ethWrapper.callStatic.deposit(\n          this.readOnlyContracts.erc20RootVault[0].address,\n          minLPTokens,\n          [],\n          tempOverrides,\n        );\n      } else {\n        await this.writeContracts.erc20RootVault[0].callStatic.deposit(\n          [scaledAmount],\n          minLPTokens,\n          [],\n        );\n      }\n    } catch (error) {\n      console.error('Unsuccessful deposit simulation.', error);\n      sentryTracker.captureException(error);\n      sentryTracker.captureMessage('Unsuccessful deposit simulation.');\n      throw new Error('Unsuccessful deposit simulation.');\n    }\n\n    if (this.isETH) {\n      const gasLimit = await this.writeContracts.ethWrapper.estimateGas.deposit(\n        this.readOnlyContracts.erc20RootVault[0].address,\n        minLPTokens,\n        [],\n        tempOverrides,\n      );\n      tempOverrides.gasLimit = getGasBuffer(gasLimit);\n    } else {\n      const gasLimit = await this.writeContracts.erc20RootVault[0].estimateGas.deposit(\n        [scaledAmount],\n        minLPTokens,\n        [],\n      );\n      tempOverrides.gasLimit = getGasBuffer(gasLimit);\n    }\n\n    const tx = this.isETH\n      ? await this.writeContracts.ethWrapper.deposit(\n          this.readOnlyContracts.erc20RootVault[0].address,\n          minLPTokens,\n          [],\n          tempOverrides,\n        )\n      : await this.writeContracts.erc20RootVault[0].deposit(\n          [scaledAmount],\n          minLPTokens,\n          [],\n          tempOverrides,\n        );\n\n    try {\n      const receipt = await tx.wait();\n\n      try {\n        await this.refreshWalletBalance();\n      } catch (error) {\n        sentryTracker.captureException(error);\n        sentryTracker.captureMessage('Wallet user balance failed to refresh after deposit');\n        console.error('Wallet user balance failed to refresh after deposit.', error);\n      }\n\n      try {\n        await this.refreshUserDeposit();\n      } catch (error) {\n        sentryTracker.captureException(error);\n        sentryTracker.captureMessage('User deposit failed to refresh after deposit');\n        console.error('User deposit failed to refresh after deposit.', error);\n      }\n\n      try {\n        await this.refreshVaultCumulative();\n      } catch (error) {\n        sentryTracker.captureException(error);\n        sentryTracker.captureMessage('Vault accumulative failed to refresh after deposit');\n        console.error('Vault accumulative failed to refresh after deposit.', error);\n      }\n\n      return receipt;\n    } catch (err) {\n      console.error('Unsucessful deposit confirmation.', err);\n      sentryTracker.captureException(err);\n      sentryTracker.captureMessage('Unsucessful deposit confirmation.');\n      throw new Error('Unsucessful deposit confirmation.');\n    }\n  };\n\n  withdraw = async (): Promise<ContractReceipt> => {\n    if (\n      isUndefined(this.readOnlyContracts) ||\n      isUndefined(this.writeContracts) ||\n      isUndefined(this.userAddress)\n    ) {\n      throw new Error('Uninitialized contracts.');\n    }\n\n    // Get the balance of LP tokens\n    const lpTokens = await this.readOnlyContracts.erc20RootVault[0].balanceOf(this.userAddress);\n\n    // Get the number of subvaults to input the correct vault options\n    const subvaultsCount: number = (await this.readOnlyContracts.erc20RootVault[0].subvaultNfts())\n      .length;\n\n    // Default arguments for withdraw\n    const minTokenAmounts = BigNumber.from(0);\n    const vaultsOptions = new Array(subvaultsCount).fill(0x0);\n    console.log(\n      `Calling withdraw(${this.userAddress}, ${lpTokens.toString()}, ${[\n        minTokenAmounts.toString(),\n      ]}, ${vaultsOptions})`,\n    );\n\n    // Simulate the withdrawal\n    try {\n      await this.writeContracts.erc20RootVault[0].callStatic.withdraw(\n        this.userAddress,\n        lpTokens,\n        [minTokenAmounts],\n        vaultsOptions,\n      );\n    } catch (error) {\n      console.error('Error in withdrawal simulation:', error);\n      sentryTracker.captureException(error);\n      sentryTracker.captureMessage('Unsuccessful withdrawal simulation.');\n      throw new Error('Unsuccessful withdrawal simulation.');\n    }\n\n    // Estimate the gas for this transaction\n    const gasLimit = await this.writeContracts.erc20RootVault[0].estimateGas.withdraw(\n      this.userAddress,\n      lpTokens,\n      [minTokenAmounts],\n      vaultsOptions,\n    );\n\n    // Send the transaction\n    const tx = await this.writeContracts.erc20RootVault[0].withdraw(\n      this.userAddress,\n      lpTokens,\n      [minTokenAmounts],\n      vaultsOptions,\n      {\n        gasLimit: getGasBuffer(gasLimit),\n      },\n    );\n\n    // Wait for the confirmation and update the state post-operation\n    try {\n      const receipt = await tx.wait();\n\n      try {\n        await this.refreshWalletBalance();\n      } catch (err) {\n        sentryTracker.captureException(err);\n        sentryTracker.captureMessage('Wallet user balance failed to refresh after withdrawal');\n        console.error('Wallet user balance failed to refresh after withdrawal.', err);\n      }\n\n      try {\n        await this.refreshUserDeposit();\n      } catch (err) {\n        sentryTracker.captureException(err);\n        sentryTracker.captureMessage('User deposit failed to refresh after withdrawal');\n        console.error('User deposit failed to refresh after withdrawal.', err);\n      }\n\n      return receipt;\n    } catch (err) {\n      sentryTracker.captureException(err);\n      sentryTracker.captureMessage('Unsucessful withdrawal confirmation.');\n      throw new Error('Unsucessful withdraw confirmation.');\n    }\n  };\n\n  rollover = async (): Promise<ContractReceipt> => {\n    throw new Error('This is not supported.');\n  };\n\n  registerForAutoRollover = async (): Promise<ContractReceipt> => {\n    throw new Error('This is not supported');\n  };\n\n  gasRegisterForAutoRollover = async (): Promise<number> => {\n    return 0;\n  };\n\n  getAutorolloverRegistrationFlag = async (): Promise<boolean> => {\n    return false;\n  };\n}\n\nexport default MellowLpVault;\n"]}