{"version":3,"file":"tick.js","sourceRoot":"/","sources":["entities/tick.ts"],"names":[],"mappings":";;;;;;AAAA,8CAAwB;AACxB,kEAAuC;AAEvC,8CAA6C;AAQ7C;IAKE,cAAY,EAA4D;YAA1D,KAAK,WAAA,EAAE,cAAc,oBAAA,EAAE,YAAY,kBAAA;QAC/C,IAAA,wBAAS,EAAC,KAAK,IAAI,mBAAQ,CAAC,QAAQ,IAAI,KAAK,IAAI,mBAAQ,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QAC5E,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,cAAc,GAAG,cAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;QAClD,IAAI,CAAC,YAAY,GAAG,cAAI,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;IAChD,CAAC;IACH,WAAC;AAAD,CAAC,AAXD,IAWC;AAXY,oBAAI","sourcesContent":["import JSBI from 'jsbi';\nimport invariant from 'tiny-invariant';\nimport { BigIntish } from '../types';\nimport { TickMath } from '../utils/tickMath';\n\nexport interface TickConstructorArgs {\n  index: number;\n  liquidityGross: BigIntish;\n  liquidityNet: BigIntish;\n}\n\nexport class Tick {\n  public readonly index: number;\n  public readonly liquidityGross: JSBI;\n  public readonly liquidityNet: JSBI;\n\n  constructor({ index, liquidityGross, liquidityNet }: TickConstructorArgs) {\n    invariant(index >= TickMath.MIN_TICK && index <= TickMath.MAX_TICK, 'TICK');\n    this.index = index;\n    this.liquidityGross = JSBI.BigInt(liquidityGross);\n    this.liquidityNet = JSBI.BigInt(liquidityNet);\n  }\n}\n"]}