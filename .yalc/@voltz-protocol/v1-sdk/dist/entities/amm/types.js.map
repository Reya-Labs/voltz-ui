{"version":3,"file":"types.js","sourceRoot":"/","sources":["entities/amm/types.ts"],"names":[],"mappings":";;;AAiKA,IAAY,kBAKX;AALD,WAAY,kBAAkB;IAC5B,qEAAa,CAAA;IACb,+DAAU,CAAA;IACV,iEAAW,CAAA;IACX,iEAAW,CAAA;AACb,CAAC,EALW,kBAAkB,GAAlB,0BAAkB,KAAlB,0BAAkB,QAK7B","sourcesContent":["import { providers, Signer } from 'ethers';\nimport JSBI from 'jsbi';\nimport { Price } from '../fractions/price';\nimport Position from '../position';\nimport RateOracle from '../rateOracle';\nimport Token from '../token';\n\nexport type AMMConstructorArgs = {\n  id: string;\n  signer: Signer | null;\n  provider?: providers.Provider;\n\n  factoryAddress: string;\n  marginEngineAddress: string;\n  rateOracle: RateOracle;\n  underlyingToken: Token;\n\n  termStartTimestamp: JSBI;\n  termEndTimestamp: JSBI;\n\n  tickSpacing: number;\n  wethAddress: string;\n\n  ethPrice?: () => Promise<number>;\n};\n\n// swap\n\nexport type AMMGetInfoPostSwapArgs = {\n  position?: Position;\n  isFT: boolean;\n  notional: number;\n  fixedRateLimit?: number;\n  fixedLow: number;\n  fixedHigh: number;\n  margin?: number;\n};\n\nexport type AMMSwapArgs = {\n  isFT: boolean;\n  notional: number;\n  margin: number;\n  fixedRateLimit?: number;\n  fixedLow: number;\n  fixedHigh: number;\n  fullyCollateralisedVTSwap?: boolean;\n};\n\nexport type AMMSwapWithWethArgs = {\n  isFT: boolean;\n  notional: number;\n  margin: number;\n  marginEth?: number;\n  fixedRateLimit?: number;\n  fixedLow: number;\n  fixedHigh: number;\n};\n\nexport type InfoPostSwap = {\n  marginRequirement: number;\n  availableNotional: number;\n  fee: number;\n  slippage: number;\n  averageFixedRate: number;\n  fixedTokenDeltaBalance: number;\n  variableTokenDeltaBalance: number;\n  fixedTokenDeltaUnbalanced: number;\n  maxAvailableNotional?: number;\n};\n\nexport type ExpectedApyArgs = {\n  margin: number;\n  position?: Position;\n  fixedLow: number;\n  fixedHigh: number;\n  fixedTokenDeltaUnbalanced: number;\n  availableNotional: number;\n  predictedVariableApy: number;\n};\n\nexport type ExpectedApyInfo = {\n  expectedApy: number;\n  expectedCashflow: number;\n};\n\n// rollover with swap\n\nexport type AMMRolloverWithSwapArgs = {\n  isFT: boolean;\n  notional: number;\n  margin: number;\n  fixedRateLimit?: number;\n  fixedLow: number;\n  fixedHigh: number;\n  newMarginEngine: string;\n  rolloverPosition: {\n    tickLower: number;\n    tickUpper: number;\n    settlementBalance: number;\n  };\n};\n\n// mint\n\nexport type AMMMintArgs = {\n  fixedLow: number;\n  fixedHigh: number;\n  notional: number;\n  margin: number;\n};\n\nexport type AMMMintWithWethArgs = {\n  fixedLow: number;\n  fixedHigh: number;\n  notional: number;\n  marginEth?: number;\n  margin: number;\n};\n\nexport type AMMGetInfoPostMintArgs = {\n  fixedLow: number;\n  fixedHigh: number;\n  notional: number;\n};\n\n// rollover with swap\n\nexport type AMMRolloverWithMintArgs = {\n  fixedLow: number;\n  fixedHigh: number;\n  notional: number;\n  margin: number;\n  newMarginEngine: string;\n  rolloverPosition: {\n    tickLower: number;\n    tickUpper: number;\n    settlementBalance: number;\n  };\n};\n\n// burn\n\nexport type AMMBurnArgs = Omit<AMMMintArgs, 'margin'>;\n\n// update position margin\n\nexport type AMMUpdatePositionMarginArgs = {\n  owner?: string;\n  fixedLow: number;\n  fixedHigh: number;\n  marginDelta: number;\n};\n\n// settlement\n\nexport type AMMSettlePositionArgs = {\n  owner?: string;\n  fixedLow: number;\n  fixedHigh: number;\n};\n\nexport enum HealthFactorStatus {\n  NOT_FOUND = 0,\n  DANGER = 1,\n  WARNING = 2,\n  HEALTHY = 3,\n}\n\nexport type ClosestTickAndFixedRate = {\n  closestUsableTick: number;\n  closestUsableFixedRate: Price;\n};\n"]}