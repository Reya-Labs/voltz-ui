{"version":3,"file":"amm.js","sourceRoot":"/","sources":["entities/amm/amm.ts"],"names":[],"mappings":"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","sourcesContent":["import JSBI from 'jsbi';\nimport { ethers, providers, BigNumber, ContractReceipt, Signer, utils } from 'ethers';\nimport { DateTime } from 'luxon';\n\nimport { SwapPeripheryParams, MintOrBurnParams } from '../../types';\nimport {\n  MIN_FIXED_RATE,\n  MAX_FIXED_RATE,\n  MaxUint256Bn,\n  TresholdApprovalBn,\n  getGasBuffer,\n} from '../../constants';\nimport {\n  Periphery__factory as peripheryFactory,\n  MarginEngine__factory as marginEngineFactory,\n  Factory__factory as factoryFactory,\n  IERC20Minimal__factory as tokenFactory,\n  BaseRateOracle__factory as baseRateOracleFactory,\n  ICToken__factory as iCTokenFactory,\n  CompoundRateOracle,\n  CompoundRateOracle__factory as compoundRateOracleFactory,\n  CompoundBorrowRateOracle,\n  AaveBorrowRateOracle__factory as aaveBorrowRateOracleFactory,\n  IAaveV2LendingPool__factory as iAaveV2LendingPoolFactory,\n  CompoundBorrowRateOracle__factory as compoundBorrowRateOracleFactory,\n} from '../../typechain';\nimport RateOracle from '../rateOracle';\nimport { TickMath } from '../../utils/tickMath';\nimport timestampWadToDateTime from '../../utils/timestampWadToDateTime';\nimport { fixedRateToClosestTick, tickToFixedRate } from '../../utils/priceTickConversions';\nimport { nearestUsableTick } from '../../utils/nearestUsableTick';\nimport Token from '../token';\nimport { Price } from '../fractions/price';\nimport { TokenAmount } from '../fractions/tokenAmount';\nimport {\n  decodeInfoPostMint,\n  decodeInfoPostSwap,\n  getReadableErrorMessage,\n} from '../../utils/errors/errorHandling';\nimport { getExpectedApy } from '../../services/getExpectedApy';\nimport { getAccruedCashflow, transformSwaps } from '../../services/getAccruedCashflow';\n\nimport { getProtocolPrefix } from '../../services/getTokenInfo';\n\nimport { sentryTracker } from '../../utils/sentry';\nimport {\n  AMMConstructorArgs,\n  AMMRolloverWithSwapArgs,\n  AMMRolloverWithMintArgs,\n  AMMGetInfoPostSwapArgs,\n  InfoPostSwap,\n  ExpectedApyInfo,\n  AMMSwapArgs,\n  AMMGetInfoPostMintArgs,\n  AMMMintArgs,\n  AMMBurnArgs,\n  AMMUpdatePositionMarginArgs,\n  AMMSettlePositionArgs,\n  ClosestTickAndFixedRate,\n  ExpectedApyArgs,\n  AMMSwapWithWethArgs,\n  AMMMintWithWethArgs,\n} from './types';\nimport { geckoEthToUsd } from '../../utils/priceFetch';\n\nexport class AMM {\n  public readonly id: string;\n  public readonly signer: Signer | null;\n  public readonly provider?: providers.Provider;\n  public readonly factoryAddress: string;\n  public readonly marginEngineAddress: string;\n  public readonly rateOracle: RateOracle;\n  public readonly termStartTimestamp: JSBI;\n  public readonly termEndTimestamp: JSBI;\n  public readonly underlyingToken: Token;\n  public readonly tickSpacing: number;\n  public readonly isETH: boolean;\n  public readonly wethAddress: string;\n  public readonly ethPrice: () => Promise<number>;\n\n  public constructor({\n    id,\n    signer,\n    provider,\n    factoryAddress,\n    marginEngineAddress,\n    rateOracle,\n    termStartTimestamp,\n    termEndTimestamp,\n    underlyingToken,\n    tickSpacing,\n    wethAddress,\n    ethPrice,\n  }: AMMConstructorArgs) {\n    this.id = id;\n    this.signer = signer;\n    this.provider = provider || signer?.provider;\n    this.factoryAddress = factoryAddress;\n    this.marginEngineAddress = marginEngineAddress;\n    this.rateOracle = rateOracle;\n    this.termStartTimestamp = termStartTimestamp;\n    this.termEndTimestamp = termEndTimestamp;\n    this.underlyingToken = underlyingToken;\n    this.tickSpacing = tickSpacing;\n    this.wethAddress = wethAddress;\n    this.isETH = this.underlyingToken.name === 'ETH';\n    this.ethPrice =\n      ethPrice || (() => geckoEthToUsd(process.env.REACT_APP_COINGECKO_API_KEY || ''));\n  }\n\n  // expected apy\n  expectedApy = async (\n    ft: BigNumber,\n    vt: BigNumber,\n    margin: number,\n    rate: number,\n  ): Promise<[number, number]> => {\n    const now = Math.round(new Date().getTime() / 1000);\n\n    const end =\n      BigNumber.from(this.termEndTimestamp.toString()).div(BigNumber.from(10).pow(12)).toNumber() /\n      1000000;\n\n    let scaledFt = 0;\n    let scaledVt = 0;\n\n    if (this.underlyingToken.decimals <= 6) {\n      scaledFt = ft.toNumber() / 10 ** this.underlyingToken.decimals;\n      scaledVt = vt.toNumber() / 10 ** this.underlyingToken.decimals;\n    } else {\n      scaledFt =\n        ft.div(BigNumber.from(10).pow(this.underlyingToken.decimals - 6)).toNumber() / 1000000;\n      scaledVt =\n        vt.div(BigNumber.from(10).pow(this.underlyingToken.decimals - 6)).toNumber() / 1000000;\n    }\n\n    const [pnl, ecs] = getExpectedApy(now, end, scaledFt, scaledVt, margin, rate);\n\n    return [100 * pnl, ecs];\n  };\n\n  // rollover with swap\n\n  public async rolloverWithSwap({\n    isFT,\n    notional,\n    margin,\n    fixedRateLimit,\n    fixedLow,\n    fixedHigh,\n    newMarginEngine,\n    rolloverPosition,\n  }: AMMRolloverWithSwapArgs): Promise<ContractReceipt> {\n    if (!this.signer) {\n      throw new Error('Wallet not connected');\n    }\n\n    if (notional <= 0) {\n      throw new Error('Amount of notional must be greater than 0');\n    }\n\n    if (margin < 0) {\n      throw new Error('Amount of margin cannot be negative');\n    }\n\n    if (!this.underlyingToken.id) {\n      throw new Error('No underlying error');\n    }\n\n    const owner = await this.signer.getAddress();\n\n    const { closestUsableTick: tickUpper } = this.closestTickAndFixedRate(fixedLow);\n    const { closestUsableTick: tickLower } = this.closestTickAndFixedRate(fixedHigh);\n\n    let sqrtPriceLimitX96;\n    if (fixedRateLimit) {\n      const { closestUsableTick: tickLimit } = this.closestTickAndFixedRate(fixedRateLimit);\n      sqrtPriceLimitX96 = TickMath.getSqrtRatioAtTick(tickLimit).toString();\n    } else if (isFT) {\n      sqrtPriceLimitX96 = TickMath.getSqrtRatioAtTick(TickMath.MAX_TICK - 1).toString();\n    } else {\n      sqrtPriceLimitX96 = TickMath.getSqrtRatioAtTick(TickMath.MIN_TICK + 1).toString();\n    }\n\n    const factoryContract = factoryFactory.connect(this.factoryAddress, this.signer);\n    const peripheryAddress = await factoryContract.periphery();\n    const peripheryContract = peripheryFactory.connect(peripheryAddress, this.signer);\n    const scaledNotional = this.scale(notional);\n\n    // Get the margin delta in underlying ERC20 tokens and ETH\n    let scaledMarginDelta = '0';\n    const tempOverrides: { value?: BigNumber; gasLimit?: BigNumber } = {};\n\n    if (this.isETH) {\n      // Get the settlement margin from the previous position\n      const settlementBalance = rolloverPosition.settlementBalance;\n\n      if (settlementBalance >= margin) {\n        // Case 1. If you get from the settled pool more than want to roll over\n        scaledMarginDelta = this.scale(margin);\n      } else {\n        // Case 2. if you get from the settled pool less than want to roll over, then need to deposit extra ETH\n        scaledMarginDelta = this.scale(settlementBalance);\n        tempOverrides.value = BigNumber.from(this.scale(margin - settlementBalance));\n      }\n    } else {\n      scaledMarginDelta = this.scale(margin);\n    }\n\n    const swapPeripheryParams = {\n      marginEngine: newMarginEngine,\n      isFT,\n      notional: scaledNotional,\n      sqrtPriceLimitX96,\n      tickLower,\n      tickUpper,\n      marginDelta: scaledMarginDelta,\n    };\n\n    await peripheryContract.callStatic\n      .rolloverWithSwap(\n        this.marginEngineAddress,\n        owner,\n        rolloverPosition.tickLower,\n        rolloverPosition.tickUpper,\n        swapPeripheryParams,\n        tempOverrides,\n      )\n      .catch(async (error: any) => {\n        const errorMessage = getReadableErrorMessage(error);\n        throw new Error(errorMessage);\n      });\n\n    const estimatedGas = await peripheryContract.estimateGas\n      .rolloverWithSwap(\n        this.marginEngineAddress,\n        owner,\n        rolloverPosition.tickLower,\n        rolloverPosition.tickUpper,\n        swapPeripheryParams,\n        tempOverrides,\n      )\n      .catch((error) => {\n        const errorMessage = getReadableErrorMessage(error);\n        throw new Error(errorMessage);\n      });\n\n    tempOverrides.gasLimit = getGasBuffer(estimatedGas);\n\n    const swapTransaction = await peripheryContract\n      .rolloverWithSwap(\n        this.marginEngineAddress,\n        owner,\n        rolloverPosition.tickLower,\n        rolloverPosition.tickUpper,\n        swapPeripheryParams,\n        tempOverrides,\n      )\n      .catch((error) => {\n        sentryTracker.captureException(error);\n        sentryTracker.captureMessage('Transaction Confirmation Error');\n        throw new Error('Transaction Confirmation Error');\n      });\n\n    try {\n      const receipt = await swapTransaction.wait();\n      return receipt;\n    } catch (error) {\n      sentryTracker.captureException(error);\n      sentryTracker.captureMessage('Transaction Confirmation Error');\n      throw new Error('Transaction Confirmation Error');\n    }\n  }\n\n  // rollover with mint\n\n  public async rolloverWithMint({\n    fixedLow,\n    fixedHigh,\n    notional,\n    margin,\n    newMarginEngine,\n    rolloverPosition,\n  }: AMMRolloverWithMintArgs): Promise<ContractReceipt> {\n    if (!this.signer) {\n      throw new Error('Wallet not connected');\n    }\n\n    if (notional <= 0) {\n      throw new Error('Amount of notional must be greater than 0');\n    }\n\n    if (margin < 0) {\n      throw new Error('Amount of margin cannot be negative');\n    }\n\n    if (!this.underlyingToken.id) {\n      throw new Error('No underlying error');\n    }\n\n    const owner = await this.signer.getAddress();\n\n    const { closestUsableTick: tickUpper } = this.closestTickAndFixedRate(fixedLow);\n    const { closestUsableTick: tickLower } = this.closestTickAndFixedRate(fixedHigh);\n\n    const factoryContract = factoryFactory.connect(this.factoryAddress, this.signer);\n    const peripheryAddress = await factoryContract.periphery();\n    const peripheryContract = peripheryFactory.connect(peripheryAddress, this.signer);\n    const scaledNotional = this.scale(notional);\n\n    // Get the margin delta in underlying ERC20 tokens and ETH\n    let scaledMarginDelta = '0';\n    const tempOverrides: { value?: BigNumber; gasLimit?: BigNumber } = {};\n\n    if (this.isETH) {\n      // Get the settlement margin from the previous position\n\n      const settlementMargin = rolloverPosition.settlementBalance;\n      if (settlementMargin >= margin) {\n        // Case 1. If you get from the settled pool more than want to roll over\n        scaledMarginDelta = this.scale(margin);\n      } else {\n        // Case 2. if you get from the settled pool less than want to roll over, then need to deposit extra ETH\n        scaledMarginDelta = this.scale(settlementMargin);\n        tempOverrides.value = BigNumber.from(this.scale(margin)).sub(\n          BigNumber.from(scaledMarginDelta),\n        );\n      }\n    } else {\n      scaledMarginDelta = this.scale(margin);\n    }\n\n    const mintOrBurnParams = {\n      marginEngine: newMarginEngine,\n      tickLower,\n      tickUpper,\n      notional: scaledNotional,\n      isMint: true,\n      marginDelta: scaledMarginDelta,\n    };\n\n    await peripheryContract.callStatic\n      .rolloverWithMint(\n        this.marginEngineAddress,\n        owner,\n        rolloverPosition.tickLower,\n        rolloverPosition.tickUpper,\n        mintOrBurnParams,\n        tempOverrides,\n      )\n      .catch((error) => {\n        const errorMessage = getReadableErrorMessage(error);\n        throw new Error(errorMessage);\n      });\n\n    const estimatedGas = await peripheryContract.estimateGas\n      .rolloverWithMint(\n        this.marginEngineAddress,\n        owner,\n        rolloverPosition.tickLower,\n        rolloverPosition.tickUpper,\n        mintOrBurnParams,\n        tempOverrides,\n      )\n      .catch((error) => {\n        const errorMessage = getReadableErrorMessage(error);\n        throw new Error(errorMessage);\n      });\n\n    tempOverrides.gasLimit = getGasBuffer(estimatedGas);\n\n    const mintTransaction = await peripheryContract\n      .rolloverWithMint(\n        this.marginEngineAddress,\n        owner,\n        rolloverPosition.tickLower,\n        rolloverPosition.tickUpper,\n        mintOrBurnParams,\n        tempOverrides,\n      )\n      .catch((error) => {\n        sentryTracker.captureException(error);\n        sentryTracker.captureMessage('Transaction Confirmation Error');\n        throw new Error('Transaction Confirmation Error');\n      });\n\n    try {\n      const receipt = await mintTransaction.wait();\n      return receipt;\n    } catch (error) {\n      sentryTracker.captureException(error);\n      sentryTracker.captureMessage('Transaction Confirmation Error');\n      throw new Error('Transaction Confirmation Error');\n    }\n  }\n\n  // swap\n\n  public async getInfoPostSwap({\n    isFT,\n    notional,\n    fixedRateLimit,\n    fixedLow,\n    fixedHigh,\n  }: AMMGetInfoPostSwapArgs): Promise<InfoPostSwap> {\n    if (!this.signer) {\n      throw new Error('Wallet not connected');\n    }\n\n    if (fixedLow >= fixedHigh) {\n      throw new Error('Lower Rate must be smaller than Upper Rate');\n    }\n\n    if (fixedLow < MIN_FIXED_RATE) {\n      throw new Error('Lower Rate is too low');\n    }\n\n    if (fixedHigh > MAX_FIXED_RATE) {\n      throw new Error('Upper Rate is too high');\n    }\n\n    if (notional <= 0) {\n      throw new Error('Amount of notional must be greater than 0');\n    }\n\n    const signerAddress = await this.signer.getAddress();\n\n    const { closestUsableTick: tickUpper } = this.closestTickAndFixedRate(fixedLow);\n    const { closestUsableTick: tickLower } = this.closestTickAndFixedRate(fixedHigh);\n\n    let sqrtPriceLimitX96;\n    if (fixedRateLimit) {\n      const { closestUsableTick: tickLimit } = this.closestTickAndFixedRate(fixedRateLimit);\n      sqrtPriceLimitX96 = TickMath.getSqrtRatioAtTick(tickLimit).toString();\n    } else if (isFT) {\n      sqrtPriceLimitX96 = TickMath.getSqrtRatioAtTick(TickMath.MAX_TICK - 1).toString();\n    } else {\n      sqrtPriceLimitX96 = TickMath.getSqrtRatioAtTick(TickMath.MIN_TICK + 1).toString();\n    }\n\n    const scaledNotional = this.scale(notional);\n\n    const factoryContract = factoryFactory.connect(this.factoryAddress, this.signer);\n    const peripheryAddress = await factoryContract.periphery();\n\n    const peripheryContract = peripheryFactory.connect(peripheryAddress, this.signer);\n    const swapPeripheryParams: SwapPeripheryParams = {\n      marginEngine: this.marginEngineAddress,\n      isFT,\n      notional: scaledNotional,\n      sqrtPriceLimitX96,\n      tickLower,\n      tickUpper,\n      marginDelta: '0',\n    };\n\n    const tickBefore = await peripheryContract.getCurrentTick(this.marginEngineAddress);\n    let tickAfter = 0;\n    let marginRequirement: BigNumber = BigNumber.from(0);\n    let fee = BigNumber.from(0);\n    let availableNotional = BigNumber.from(0);\n    let fixedTokenDeltaUnbalanced = BigNumber.from(0);\n    let fixedTokenDelta = BigNumber.from(0);\n\n    await peripheryContract.callStatic.swap(swapPeripheryParams).then(\n      (result: any) => {\n        availableNotional = result[1];\n        fee = result[2];\n        fixedTokenDeltaUnbalanced = result[3];\n        marginRequirement = result[4];\n        tickAfter = parseInt(result[5], 10);\n        fixedTokenDelta = result[0];\n      },\n      (error: any) => {\n        const result = decodeInfoPostSwap(error);\n        marginRequirement = result.marginRequirement;\n        tickAfter = result.tick;\n        fee = result.fee;\n        availableNotional = result.availableNotional;\n        fixedTokenDeltaUnbalanced = result.fixedTokenDeltaUnbalanced;\n        fixedTokenDelta = result.fixedTokenDelta;\n      },\n    );\n\n    const fixedRateBefore = tickToFixedRate(tickBefore);\n    const fixedRateAfter = tickToFixedRate(tickAfter);\n\n    const fixedRateDelta = fixedRateAfter.subtract(fixedRateBefore);\n    const fixedRateDeltaRaw = fixedRateDelta.toNumber();\n\n    const marginEngineContract = marginEngineFactory.connect(this.marginEngineAddress, this.signer);\n    const currentMargin = (\n      await marginEngineContract.callStatic.getPosition(signerAddress, tickLower, tickUpper)\n    ).margin;\n\n    const scaledCurrentMargin = this.descale(currentMargin);\n    const scaledAvailableNotional = this.descale(availableNotional);\n    const scaledFee = this.descale(fee);\n    const scaledMarginRequirement = (this.descale(marginRequirement) + scaledFee) * 1.01;\n\n    const additionalMargin =\n      scaledMarginRequirement > scaledCurrentMargin\n        ? scaledMarginRequirement - scaledCurrentMargin\n        : 0;\n\n    const averageFixedRate = availableNotional.eq(BigNumber.from(0))\n      ? 0\n      : fixedTokenDeltaUnbalanced.mul(BigNumber.from(1000)).div(availableNotional).toNumber() /\n        1000;\n\n    let maxAvailableNotional = BigNumber.from(0);\n    const swapPeripheryParamsLargeSwap = {\n      marginEngine: this.marginEngineAddress,\n      isFT,\n      notional: this.scale(1000000000000000),\n      sqrtPriceLimitX96,\n      tickLower,\n      tickUpper,\n      marginDelta: '0',\n    };\n    await peripheryContract.callStatic.swap(swapPeripheryParamsLargeSwap).then(\n      (result: any) => {\n        maxAvailableNotional = result[1];\n      },\n      (error: any) => {\n        const result = decodeInfoPostSwap(error);\n        maxAvailableNotional = result.availableNotional;\n      },\n    );\n    const scaledMaxAvailableNotional = this.descale(maxAvailableNotional);\n\n    const result: InfoPostSwap = {\n      marginRequirement: additionalMargin,\n      availableNotional:\n        scaledAvailableNotional < 0 ? -scaledAvailableNotional : scaledAvailableNotional,\n      fee: scaledFee < 0 ? -scaledFee : scaledFee,\n      slippage: fixedRateDeltaRaw < 0 ? -fixedRateDeltaRaw : fixedRateDeltaRaw,\n      averageFixedRate: averageFixedRate < 0 ? -averageFixedRate : averageFixedRate,\n      fixedTokenDeltaBalance: this.descale(fixedTokenDelta),\n      variableTokenDeltaBalance: this.descale(availableNotional),\n      fixedTokenDeltaUnbalanced: this.descale(fixedTokenDeltaUnbalanced),\n      maxAvailableNotional:\n        scaledMaxAvailableNotional < 0 ? -scaledMaxAvailableNotional : scaledMaxAvailableNotional,\n    };\n\n    return result;\n  }\n\n  public async getExpectedApyInfo({\n    margin,\n    position,\n    fixedLow,\n    fixedHigh,\n    fixedTokenDeltaUnbalanced,\n    availableNotional,\n    predictedVariableApy,\n  }: ExpectedApyArgs): Promise<ExpectedApyInfo> {\n    if (!this.signer) {\n      throw new Error('Wallet not connected');\n    }\n\n    if (!this.provider) {\n      throw new Error('Blockchain not connected');\n    }\n\n    if (fixedLow >= fixedHigh) {\n      throw new Error('Lower Rate must be smaller than Upper Rate');\n    }\n\n    if (fixedLow < MIN_FIXED_RATE) {\n      throw new Error('Lower Rate is too low');\n    }\n\n    if (fixedHigh > MAX_FIXED_RATE) {\n      throw new Error('Upper Rate is too high');\n    }\n\n    const { closestUsableTick: tickUpper } = this.closestTickAndFixedRate(fixedLow);\n    const { closestUsableTick: tickLower } = this.closestTickAndFixedRate(fixedHigh);\n\n    const signerAddress = await this.signer.getAddress();\n\n    const marginEngineContract = marginEngineFactory.connect(this.marginEngineAddress, this.signer);\n    const currentMargin = (\n      await marginEngineContract.callStatic.getPosition(signerAddress, tickLower, tickUpper)\n    ).margin;\n\n    const rateOracleContract = baseRateOracleFactory.connect(this.rateOracle.id, this.provider);\n\n    const lastBlock = await this.provider.getBlockNumber();\n    const lastBlockTimestamp = BigNumber.from(\n      (await this.provider.getBlock(lastBlock - 1)).timestamp,\n    );\n\n    const scaledCurrentMargin = this.descale(currentMargin);\n\n    let positionMargin = 0;\n    let accruedCashflow = 0;\n    let positionUft = BigNumber.from(0);\n    let positionVt = BigNumber.from(0);\n\n    if (position) {\n      positionUft = position.swaps.reduce(\n        (acc, swap) => acc.add(swap.fixedTokenDeltaUnbalanced.toString()),\n        BigNumber.from(0),\n      );\n\n      positionVt = position.swaps.reduce(\n        (acc, swap) => acc.add(swap.variableTokenDelta.toString()),\n        BigNumber.from(0),\n      );\n\n      positionMargin = scaledCurrentMargin;\n\n      try {\n        if (position.swaps.length > 0) {\n          const accruedCashflowInfo = await getAccruedCashflow({\n            swaps: transformSwaps(position.swaps, this.underlyingToken.decimals),\n            rateOracle: rateOracleContract,\n            currentTime: Number(lastBlockTimestamp.toString()),\n            endTime: Number(utils.formatUnits(this.termEndTimestamp.toString(), 18)),\n          });\n          accruedCashflow = accruedCashflowInfo.accruedCashflow;\n        }\n      } catch (error) {\n        sentryTracker.captureException(error);\n      }\n    }\n\n    const [expectedApy, expectedCashflow] = await this.expectedApy(\n      positionUft.add(this.scale(fixedTokenDeltaUnbalanced)),\n      positionVt.add(this.scale(availableNotional)),\n      margin + positionMargin + accruedCashflow,\n      predictedVariableApy,\n    );\n\n    const result: ExpectedApyInfo = {\n      expectedApy,\n      expectedCashflow,\n    };\n\n    return result;\n  }\n\n  public async swap({\n    isFT,\n    notional,\n    margin,\n    fixedRateLimit,\n    fixedLow,\n    fixedHigh,\n    fullyCollateralisedVTSwap,\n  }: AMMSwapArgs): Promise<ContractReceipt> {\n    if (!this.provider) {\n      throw new Error('Blockchain not connected');\n    }\n\n    if (!this.signer) {\n      throw new Error('Wallet not connected');\n    }\n\n    if (fixedLow >= fixedHigh) {\n      throw new Error('Lower Rate must be smaller than Upper Rate');\n    }\n\n    if (fixedLow < MIN_FIXED_RATE) {\n      throw new Error('Lower Rate is too low');\n    }\n\n    if (fixedHigh > MAX_FIXED_RATE) {\n      throw new Error('Upper Rate is too high');\n    }\n\n    if (notional <= 0) {\n      throw new Error('Amount of notional must be greater than 0');\n    }\n\n    if (!this.underlyingToken.id) {\n      throw new Error('No underlying error');\n    }\n\n    const { closestUsableTick: tickUpper } = this.closestTickAndFixedRate(fixedLow);\n    const { closestUsableTick: tickLower } = this.closestTickAndFixedRate(fixedHigh);\n\n    let sqrtPriceLimitX96;\n    if (fixedRateLimit) {\n      const { closestUsableTick: tickLimit } = this.closestTickAndFixedRate(fixedRateLimit);\n      sqrtPriceLimitX96 = TickMath.getSqrtRatioAtTick(tickLimit).toString();\n    } else if (isFT) {\n      sqrtPriceLimitX96 = TickMath.getSqrtRatioAtTick(TickMath.MAX_TICK - 1).toString();\n    } else {\n      sqrtPriceLimitX96 = TickMath.getSqrtRatioAtTick(TickMath.MIN_TICK + 1).toString();\n    }\n\n    const factoryContract = factoryFactory.connect(this.factoryAddress, this.signer);\n    const peripheryAddress = await factoryContract.periphery();\n\n    const peripheryContract = peripheryFactory.connect(peripheryAddress, this.signer);\n    const scaledNotional = this.scale(notional);\n\n    let swapPeripheryParams: SwapPeripheryParams;\n    const tempOverrides: { value?: BigNumber; gasLimit?: BigNumber } = {};\n\n    if (this.isETH) {\n      swapPeripheryParams = {\n        marginEngine: this.marginEngineAddress,\n        isFT,\n        notional: scaledNotional,\n        sqrtPriceLimitX96,\n        tickLower,\n        tickUpper,\n        marginDelta: 0, //\n      };\n\n      tempOverrides.value = ethers.utils.parseEther(margin.toFixed(18).toString());\n    } else {\n      const scaledMarginDelta = this.scale(margin);\n\n      swapPeripheryParams = {\n        marginEngine: this.marginEngineAddress,\n        isFT,\n        notional: scaledNotional,\n        sqrtPriceLimitX96,\n        tickLower,\n        tickUpper,\n        marginDelta: scaledMarginDelta,\n      };\n    }\n\n    let swapTransaction;\n    if (fullyCollateralisedVTSwap === undefined || fullyCollateralisedVTSwap === false) {\n      await peripheryContract.callStatic\n        .swap(swapPeripheryParams, tempOverrides)\n        .catch(async (error: any) => {\n          const errorMessage = getReadableErrorMessage(error);\n          throw new Error(errorMessage);\n        });\n\n      const estimatedGas = await peripheryContract.estimateGas\n        .swap(swapPeripheryParams, tempOverrides)\n        .catch((error) => {\n          const errorMessage = getReadableErrorMessage(error);\n          throw new Error(errorMessage);\n        });\n\n      tempOverrides.gasLimit = getGasBuffer(estimatedGas);\n\n      swapTransaction = await peripheryContract\n        .swap(swapPeripheryParams, tempOverrides)\n        .catch((error) => {\n          sentryTracker.captureException(error);\n          sentryTracker.captureMessage('Transaction Confirmation Error');\n          throw new Error('Transaction Confirmation Error');\n        });\n    } else {\n      const rateOracleContract = baseRateOracleFactory.connect(this.rateOracle.id, this.provider);\n      const variableFactorFromStartToNowWad = await rateOracleContract.callStatic.variableFactor(\n        BigNumber.from(this.termStartTimestamp.toString()),\n        BigNumber.from(this.termEndTimestamp.toString()),\n      );\n\n      await peripheryContract.callStatic\n        .fullyCollateralisedVTSwap(\n          swapPeripheryParams,\n          variableFactorFromStartToNowWad,\n          tempOverrides,\n        )\n        .catch(async (error: any) => {\n          const errorMessage = getReadableErrorMessage(error);\n          throw new Error(errorMessage);\n        });\n\n      const estimatedGas = await peripheryContract.estimateGas\n        .fullyCollateralisedVTSwap(\n          swapPeripheryParams,\n          variableFactorFromStartToNowWad,\n          tempOverrides,\n        )\n        .catch((error) => {\n          const errorMessage = getReadableErrorMessage(error);\n          throw new Error(errorMessage);\n        });\n\n      tempOverrides.gasLimit = getGasBuffer(estimatedGas);\n\n      swapTransaction = await peripheryContract\n        .fullyCollateralisedVTSwap(\n          swapPeripheryParams,\n          variableFactorFromStartToNowWad,\n          tempOverrides,\n        )\n        .catch((error) => {\n          sentryTracker.captureException(error);\n          sentryTracker.captureMessage('Transaction Confirmation Error');\n          throw new Error('Transaction Confirmation Error');\n        });\n    }\n\n    try {\n      const receipt = await swapTransaction.wait();\n      return receipt;\n    } catch (error) {\n      sentryTracker.captureException(error);\n      sentryTracker.captureMessage('Transaction Confirmation Error');\n      throw new Error('Transaction Confirmation Error');\n    }\n  }\n\n  public async swapWithWeth({\n    isFT,\n    notional,\n    margin,\n    marginEth,\n    fixedRateLimit,\n    fixedLow,\n    fixedHigh,\n  }: AMMSwapWithWethArgs): Promise<ContractReceipt> {\n    if (!this.signer) {\n      throw new Error('Wallet not connected');\n    }\n\n    if (fixedLow >= fixedHigh) {\n      throw new Error('Lower Rate must be smaller than Upper Rate');\n    }\n\n    if (fixedLow < MIN_FIXED_RATE) {\n      throw new Error('Lower Rate is too low');\n    }\n\n    if (fixedHigh > MAX_FIXED_RATE) {\n      throw new Error('Upper Rate is too high');\n    }\n\n    if (notional <= 0) {\n      throw new Error('Amount of notional must be greater than 0');\n    }\n\n    if (margin < 0) {\n      throw new Error('Amount of margin cannot be negative');\n    }\n\n    if (marginEth && marginEth < 0) {\n      throw new Error('Amount of margin in ETH cannot be negative');\n    }\n\n    if (!this.underlyingToken.id) {\n      throw new Error('No underlying error');\n    }\n\n    const { closestUsableTick: tickUpper } = this.closestTickAndFixedRate(fixedLow);\n    const { closestUsableTick: tickLower } = this.closestTickAndFixedRate(fixedHigh);\n\n    let sqrtPriceLimitX96;\n    if (fixedRateLimit) {\n      const { closestUsableTick: tickLimit } = this.closestTickAndFixedRate(fixedRateLimit);\n      sqrtPriceLimitX96 = TickMath.getSqrtRatioAtTick(tickLimit).toString();\n    } else if (isFT) {\n      sqrtPriceLimitX96 = TickMath.getSqrtRatioAtTick(TickMath.MAX_TICK - 1).toString();\n    } else {\n      sqrtPriceLimitX96 = TickMath.getSqrtRatioAtTick(TickMath.MIN_TICK + 1).toString();\n    }\n\n    const factoryContract = factoryFactory.connect(this.factoryAddress, this.signer);\n    const peripheryAddress = await factoryContract.periphery();\n    const peripheryContract = peripheryFactory.connect(peripheryAddress, this.signer);\n    const scaledNotional = this.scale(notional);\n\n    const tempOverrides: { value?: BigNumber; gasLimit?: BigNumber } = {};\n\n    if (this.isETH && marginEth) {\n      tempOverrides.value = ethers.utils.parseEther(marginEth.toFixed(18).toString());\n    }\n\n    const scaledMarginDelta = this.scale(margin);\n\n    const swapPeripheryParams = {\n      marginEngine: this.marginEngineAddress,\n      isFT,\n      notional: scaledNotional,\n      sqrtPriceLimitX96,\n      tickLower,\n      tickUpper,\n      marginDelta: scaledMarginDelta,\n    };\n\n    await peripheryContract.callStatic\n      .swap(swapPeripheryParams, tempOverrides)\n      .catch(async (error: any) => {\n        const errorMessage = getReadableErrorMessage(error);\n        throw new Error(errorMessage);\n      });\n\n    const estimatedGas = await peripheryContract.estimateGas\n      .swap(swapPeripheryParams, tempOverrides)\n      .catch((error) => {\n        const errorMessage = getReadableErrorMessage(error);\n        throw new Error(errorMessage);\n      });\n\n    tempOverrides.gasLimit = getGasBuffer(estimatedGas);\n\n    const swapTransaction = await peripheryContract\n      .swap(swapPeripheryParams, tempOverrides)\n      .catch((error) => {\n        const errorMessage = getReadableErrorMessage(error);\n        throw new Error(errorMessage);\n      })\n      .catch((error) => {\n        sentryTracker.captureException(error);\n        sentryTracker.captureMessage('Transaction Confirmation Error');\n        throw new Error('Transaction Confirmation Error');\n      });\n\n    try {\n      const receipt = await swapTransaction.wait();\n      return receipt;\n    } catch (error) {\n      sentryTracker.captureException(error);\n      sentryTracker.captureMessage('Transaction Confirmation Error');\n      throw new Error('Transaction Confirmation Error');\n    }\n  }\n\n  // mint\n\n  public async getInfoPostMint({\n    fixedLow,\n    fixedHigh,\n    notional,\n  }: AMMGetInfoPostMintArgs): Promise<number> {\n    if (!this.signer) {\n      throw new Error('Wallet not connected');\n    }\n\n    if (fixedLow >= fixedHigh) {\n      throw new Error('Lower Rate must be smaller than Upper Rate');\n    }\n\n    if (fixedLow < MIN_FIXED_RATE) {\n      throw new Error('Lower Rate is too low');\n    }\n\n    if (fixedHigh > MAX_FIXED_RATE) {\n      throw new Error('Upper Rate is too high');\n    }\n\n    if (notional <= 0) {\n      throw new Error('Amount of notional must be greater than 0');\n    }\n\n    const signerAddress = await this.signer.getAddress();\n    const { closestUsableTick: tickUpper } = this.closestTickAndFixedRate(fixedLow);\n    const { closestUsableTick: tickLower } = this.closestTickAndFixedRate(fixedHigh);\n\n    const factoryContract = factoryFactory.connect(this.factoryAddress, this.signer);\n    const peripheryAddress = await factoryContract.periphery();\n\n    const peripheryContract = peripheryFactory.connect(peripheryAddress, this.signer);\n    const scaledNotional = this.scale(notional);\n    const mintOrBurnParams: MintOrBurnParams = {\n      marginEngine: this.marginEngineAddress,\n      tickLower,\n      tickUpper,\n      notional: scaledNotional,\n      isMint: true,\n      marginDelta: '0',\n    };\n\n    let marginRequirement = BigNumber.from('0');\n    await peripheryContract.callStatic.mintOrBurn(mintOrBurnParams).then(\n      (result) => {\n        marginRequirement = BigNumber.from(result);\n      },\n      (error) => {\n        const result = decodeInfoPostMint(error);\n        marginRequirement = result.marginRequirement;\n      },\n    );\n\n    const marginEngineContract = marginEngineFactory.connect(this.marginEngineAddress, this.signer);\n    const currentMargin = (\n      await marginEngineContract.callStatic.getPosition(signerAddress, tickLower, tickUpper)\n    ).margin;\n\n    const scaledCurrentMargin = this.descale(currentMargin);\n    const scaledMarginRequirement = this.descale(marginRequirement) * 1.01;\n\n    if (scaledMarginRequirement > scaledCurrentMargin) {\n      return scaledMarginRequirement - scaledCurrentMargin;\n    }\n    return 0;\n  }\n\n  public async mint({\n    fixedLow,\n    fixedHigh,\n    notional,\n    margin,\n  }: AMMMintArgs): Promise<ContractReceipt> {\n    if (!this.signer) {\n      throw new Error('Wallet not connected');\n    }\n\n    if (fixedLow >= fixedHigh) {\n      throw new Error('Lower Rate must be smaller than Upper Rate');\n    }\n\n    if (fixedLow < MIN_FIXED_RATE) {\n      throw new Error('Lower Rate is too low');\n    }\n\n    if (fixedHigh > MAX_FIXED_RATE) {\n      throw new Error('Upper Rate is too high');\n    }\n\n    if (notional <= 0) {\n      throw new Error('Amount of notional must be greater than 0');\n    }\n\n    if (margin < 0) {\n      throw new Error('Amount of margin cannot be negative');\n    }\n\n    if (!this.underlyingToken.id) {\n      throw new Error('No underlying error');\n    }\n\n    const { closestUsableTick: tickUpper } = this.closestTickAndFixedRate(fixedLow);\n    const { closestUsableTick: tickLower } = this.closestTickAndFixedRate(fixedHigh);\n\n    const factoryContract = factoryFactory.connect(this.factoryAddress, this.signer);\n    const peripheryAddress = await factoryContract.periphery();\n\n    const peripheryContract = peripheryFactory.connect(peripheryAddress, this.signer);\n    const scaledNotional = this.scale(notional);\n\n    let mintOrBurnParams: MintOrBurnParams;\n    const tempOverrides: { value?: BigNumber; gasLimit?: BigNumber } = {};\n\n    if (this.isETH) {\n      mintOrBurnParams = {\n        marginEngine: this.marginEngineAddress,\n        tickLower,\n        tickUpper,\n        notional: scaledNotional,\n        isMint: true,\n        marginDelta: 0,\n      };\n\n      tempOverrides.value = ethers.utils.parseEther(margin.toFixed(18).toString());\n    } else {\n      const scaledMarginDelta = this.scale(margin);\n\n      mintOrBurnParams = {\n        marginEngine: this.marginEngineAddress,\n        tickLower,\n        tickUpper,\n        notional: scaledNotional,\n        isMint: true,\n        marginDelta: scaledMarginDelta,\n      };\n    }\n\n    await peripheryContract.callStatic\n      .mintOrBurn(mintOrBurnParams, tempOverrides)\n      .catch((error) => {\n        const errorMessage = getReadableErrorMessage(error);\n        throw new Error(errorMessage);\n      });\n\n    const estimatedGas = await peripheryContract.estimateGas\n      .mintOrBurn(mintOrBurnParams, tempOverrides)\n      .catch((error) => {\n        const errorMessage = getReadableErrorMessage(error);\n        throw new Error(errorMessage);\n      });\n\n    tempOverrides.gasLimit = getGasBuffer(estimatedGas);\n\n    const mintTransaction = await peripheryContract\n      .mintOrBurn(mintOrBurnParams, tempOverrides)\n      .catch((error) => {\n        sentryTracker.captureException(error);\n        sentryTracker.captureMessage('Transaction Confirmation Error');\n        throw new Error('Transaction Confirmation Error');\n      });\n\n    try {\n      const receipt = await mintTransaction.wait();\n      return receipt;\n    } catch (error) {\n      sentryTracker.captureException(error);\n      sentryTracker.captureMessage('Transaction Confirmation Error');\n      throw new Error('Transaction Confirmation Error');\n    }\n  }\n\n  public async mintWithWeth({\n    fixedLow,\n    fixedHigh,\n    notional,\n    margin,\n    marginEth,\n  }: AMMMintWithWethArgs): Promise<ContractReceipt> {\n    if (!this.signer) {\n      throw new Error('Wallet not connected');\n    }\n\n    if (fixedLow >= fixedHigh) {\n      throw new Error('Lower Rate must be smaller than Upper Rate');\n    }\n\n    if (fixedLow < MIN_FIXED_RATE) {\n      throw new Error('Lower Rate is too low');\n    }\n\n    if (fixedHigh > MAX_FIXED_RATE) {\n      throw new Error('Upper Rate is too high');\n    }\n\n    if (notional <= 0) {\n      throw new Error('Amount of notional must be greater than 0');\n    }\n\n    if (margin < 0) {\n      throw new Error('Amount of margin cannot be negative');\n    }\n\n    if (marginEth && marginEth < 0) {\n      throw new Error('Amount of margin in ETH cannot be negative');\n    }\n\n    if (!this.underlyingToken.id) {\n      throw new Error('No underlying error');\n    }\n\n    const { closestUsableTick: tickUpper } = this.closestTickAndFixedRate(fixedLow);\n    const { closestUsableTick: tickLower } = this.closestTickAndFixedRate(fixedHigh);\n\n    const factoryContract = factoryFactory.connect(this.factoryAddress, this.signer);\n    const peripheryAddress = await factoryContract.periphery();\n    const peripheryContract = peripheryFactory.connect(peripheryAddress, this.signer);\n    const scaledNotional = this.scale(notional);\n\n    const tempOverrides: { value?: BigNumber; gasLimit?: BigNumber } = {};\n\n    if (this.isETH && marginEth) {\n      tempOverrides.value = ethers.utils.parseEther(marginEth.toFixed(18).toString());\n    }\n\n    const scaledMarginDelta = this.scale(margin);\n\n    const mintOrBurnParams = {\n      marginEngine: this.marginEngineAddress,\n      tickLower,\n      tickUpper,\n      notional: scaledNotional,\n      isMint: true,\n      marginDelta: scaledMarginDelta,\n    };\n\n    await peripheryContract.callStatic\n      .mintOrBurn(mintOrBurnParams, tempOverrides)\n      .catch((error) => {\n        const errorMessage = getReadableErrorMessage(error);\n        throw new Error(errorMessage);\n      });\n\n    const estimatedGas = await peripheryContract.estimateGas\n      .mintOrBurn(mintOrBurnParams, tempOverrides)\n      .catch((error) => {\n        const errorMessage = getReadableErrorMessage(error);\n        throw new Error(errorMessage);\n      });\n\n    tempOverrides.gasLimit = getGasBuffer(estimatedGas);\n\n    const mintTransaction = await peripheryContract\n      .mintOrBurn(mintOrBurnParams, tempOverrides)\n      .catch((error) => {\n        sentryTracker.captureException(error);\n        sentryTracker.captureMessage('Transaction Confirmation Error');\n        throw new Error('Transaction Confirmation Error');\n      });\n\n    try {\n      const receipt = await mintTransaction.wait();\n      return receipt;\n    } catch (error) {\n      sentryTracker.captureException(error);\n      sentryTracker.captureMessage('Transaction Confirmation Error');\n      throw new Error('Transaction Confirmation Error');\n    }\n  }\n\n  // burn\n\n  public async burn({ fixedLow, fixedHigh, notional }: AMMBurnArgs): Promise<ContractReceipt> {\n    if (!this.signer) {\n      throw new Error('Wallet not connected');\n    }\n\n    if (fixedLow >= fixedHigh) {\n      throw new Error('Lower Rate must be smaller than Upper Rate');\n    }\n\n    if (fixedLow < MIN_FIXED_RATE) {\n      throw new Error('Lower Rate is too low');\n    }\n\n    if (fixedHigh > MAX_FIXED_RATE) {\n      throw new Error('Upper Rate is too high');\n    }\n\n    if (notional <= 0) {\n      throw new Error('Amount of notional must be greater than 0');\n    }\n\n    const { closestUsableTick: tickUpper } = this.closestTickAndFixedRate(fixedLow);\n    const { closestUsableTick: tickLower } = this.closestTickAndFixedRate(fixedHigh);\n\n    const factoryContract = factoryFactory.connect(this.factoryAddress, this.signer);\n    const peripheryAddress = await factoryContract.periphery();\n\n    const peripheryContract = peripheryFactory.connect(peripheryAddress, this.signer);\n\n    const scaledNotional = this.scale(notional);\n\n    const mintOrBurnParams: MintOrBurnParams = {\n      marginEngine: this.marginEngineAddress,\n      tickLower,\n      tickUpper,\n      notional: scaledNotional,\n      isMint: false,\n      marginDelta: '0',\n    };\n\n    await peripheryContract.callStatic.mintOrBurn(mintOrBurnParams).catch((error) => {\n      const errorMessage = getReadableErrorMessage(error);\n      throw new Error(errorMessage);\n    });\n\n    const estimatedGas = await peripheryContract.estimateGas.mintOrBurn(mintOrBurnParams);\n\n    const burnTransaction = await peripheryContract\n      .mintOrBurn(mintOrBurnParams, {\n        gasLimit: getGasBuffer(estimatedGas),\n      })\n      .catch((error) => {\n        sentryTracker.captureException(error);\n        sentryTracker.captureMessage('Transaction Confirmation Error');\n        throw new Error('Transaction Confirmation Error');\n      });\n\n    try {\n      const receipt = await burnTransaction.wait();\n      return receipt;\n    } catch (error) {\n      sentryTracker.captureException(error);\n      sentryTracker.captureMessage('Transaction Confirmation Error');\n      throw new Error('Transaction Confirmation Error');\n    }\n  }\n\n  // update position margin\n\n  public async updatePositionMargin({\n    fixedLow,\n    fixedHigh,\n    marginDelta,\n  }: AMMUpdatePositionMarginArgs): Promise<ContractReceipt> {\n    if (!this.signer) {\n      throw new Error('Wallet not connected');\n    }\n\n    if (!this.signer) {\n      throw new Error('Wallet not connected');\n    }\n\n    if (marginDelta === 0) {\n      throw new Error('No margin delta to update');\n    }\n\n    if (!this.underlyingToken.id) {\n      throw new Error('No underlying error');\n    }\n\n    const { closestUsableTick: tickUpper } = this.closestTickAndFixedRate(fixedLow);\n    const { closestUsableTick: tickLower } = this.closestTickAndFixedRate(fixedHigh);\n\n    const tempOverrides: { value?: BigNumber; gasLimit?: BigNumber } = {};\n    let scaledMarginDelta: string;\n\n    if (this.isETH && marginDelta > 0) {\n      tempOverrides.value = ethers.utils.parseEther(marginDelta.toFixed(18).toString());\n      scaledMarginDelta = '0';\n    } else {\n      scaledMarginDelta = this.scale(marginDelta);\n    }\n\n    const factoryContract = factoryFactory.connect(this.factoryAddress, this.signer);\n    const peripheryAddress = await factoryContract.periphery();\n\n    const peripheryContract = peripheryFactory.connect(peripheryAddress, this.signer);\n\n    await peripheryContract.callStatic\n      .updatePositionMargin(\n        this.marginEngineAddress,\n        tickLower,\n        tickUpper,\n        scaledMarginDelta,\n        false,\n        tempOverrides,\n      )\n      .catch(async (error: any) => {\n        const errorMessage = getReadableErrorMessage(error);\n        throw new Error(errorMessage);\n      });\n\n    const estimatedGas = await peripheryContract.estimateGas.updatePositionMargin(\n      this.marginEngineAddress,\n      tickLower,\n      tickUpper,\n      scaledMarginDelta,\n      false,\n      tempOverrides,\n    );\n\n    tempOverrides.gasLimit = getGasBuffer(estimatedGas);\n\n    const updatePositionMarginTransaction = await peripheryContract\n      .updatePositionMargin(\n        this.marginEngineAddress,\n        tickLower,\n        tickUpper,\n        scaledMarginDelta,\n        false,\n        tempOverrides,\n      )\n      .catch((error) => {\n        sentryTracker.captureException(error);\n        sentryTracker.captureMessage('Transaction Confirmation Error');\n        throw new Error('Transaction Confirmation Error');\n      });\n\n    try {\n      const receipt = await updatePositionMarginTransaction.wait();\n      return receipt;\n    } catch (error) {\n      sentryTracker.captureException(error);\n      sentryTracker.captureMessage('Transaction Confirmation Error');\n      throw new Error('Transaction Confirmation Error');\n    }\n  }\n\n  // settlement\n\n  public async settlePosition({\n    owner,\n    fixedLow,\n    fixedHigh,\n  }: AMMSettlePositionArgs): Promise<ContractReceipt> {\n    if (!this.signer) {\n      throw new Error('Wallet not connected');\n    }\n\n    const effectiveOwner = !owner ? await this.signer.getAddress() : owner;\n\n    const { closestUsableTick: tickUpper } = this.closestTickAndFixedRate(fixedLow);\n    const { closestUsableTick: tickLower } = this.closestTickAndFixedRate(fixedHigh);\n\n    const factoryContract = factoryFactory.connect(this.factoryAddress, this.signer);\n    const peripheryAddress = await factoryContract.periphery();\n\n    const peripheryContract = peripheryFactory.connect(peripheryAddress, this.signer);\n\n    await peripheryContract.callStatic\n      .settlePositionAndWithdrawMargin(\n        this.marginEngineAddress,\n        effectiveOwner,\n        tickLower,\n        tickUpper,\n      )\n      .catch((error) => {\n        const errorMessage = getReadableErrorMessage(error);\n        throw new Error(errorMessage);\n      });\n\n    const estimatedGas = await peripheryContract.estimateGas.settlePositionAndWithdrawMargin(\n      this.marginEngineAddress,\n      effectiveOwner,\n      tickLower,\n      tickUpper,\n    );\n\n    const settlePositionTransaction = await peripheryContract\n      .settlePositionAndWithdrawMargin(\n        this.marginEngineAddress,\n        effectiveOwner,\n        tickLower,\n        tickUpper,\n        {\n          gasLimit: getGasBuffer(estimatedGas),\n        },\n      )\n      .catch((error) => {\n        sentryTracker.captureException(error);\n        sentryTracker.captureMessage('Transaction Confirmation Error');\n        throw new Error('Transaction Confirmation Error');\n      });\n\n    try {\n      const receipt = await settlePositionTransaction.wait();\n      return receipt;\n    } catch (error) {\n      sentryTracker.captureException(error);\n      sentryTracker.captureMessage('Transaction Confirmation Error');\n      throw new Error('Transaction Confirmation Error');\n    }\n  }\n\n  // scale/descale according to underlying token\n  public scale(value: number): string {\n    const price = Price.fromNumber(value);\n    const tokenAmount = TokenAmount.fromFractionalAmount(\n      this.underlyingToken,\n      price.numerator,\n      price.denominator,\n    );\n    const scaledValue = tokenAmount.scale();\n\n    return scaledValue;\n  }\n\n  public descale(value: BigNumber): number {\n    return Number(ethers.utils.formatUnits(value, this.underlyingToken.decimals));\n  }\n\n  // token approval for periphery\n  public async isTokenApprovedForPeriphery({\n    forceErc20Check,\n    approvalAmount, // Unscaled, e.g. dollars not wei\n  }: {\n    forceErc20Check: boolean;\n    approvalAmount?: number;\n  }): Promise<boolean> {\n    if (!forceErc20Check && this.isETH) {\n      return true;\n    }\n\n    const scaledAmount = approvalAmount && this.scale(approvalAmount);\n\n    if (!this.signer) {\n      throw new Error('Wallet not connected');\n    }\n\n    const signerAddress = await this.signer.getAddress();\n\n    const tokenAddress = this.underlyingToken.id;\n    const token = tokenFactory.connect(tokenAddress, this.signer);\n\n    const factoryContract = factoryFactory.connect(this.factoryAddress, this.signer);\n    const peripheryAddress = await factoryContract.periphery();\n    const allowance = await token.allowance(signerAddress, peripheryAddress);\n\n    if (scaledAmount === undefined) {\n      return allowance.gte(TresholdApprovalBn);\n    }\n    return allowance.gte(scaledAmount);\n  }\n\n  public async approveUnderlyingTokenForPeriphery(): Promise<void> {\n    if (!this.underlyingToken.id) {\n      throw new Error('No underlying token');\n    }\n\n    if (!this.signer) {\n      throw new Error('Wallet not connected');\n    }\n\n    const tokenAddress = this.underlyingToken.id;\n    const token = tokenFactory.connect(tokenAddress, this.signer);\n\n    const factoryContract = factoryFactory.connect(this.factoryAddress, this.signer);\n    const peripheryAddress = await factoryContract.periphery();\n\n    let estimatedGas;\n    try {\n      estimatedGas = await token.estimateGas.approve(peripheryAddress, MaxUint256Bn);\n    } catch (error) {\n      sentryTracker.captureException(error);\n      sentryTracker.captureMessage(\n        `Could not increase periphery allowance (${tokenAddress}, ${await this.signer.getAddress()}, ${MaxUint256Bn.toString()})`,\n      );\n      throw new Error(\n        `Unable to approve. If your existing allowance is non-zero but lower than needed, some tokens like USDT require you to call approve(\"${peripheryAddress}\", 0) before you can increase the allowance.`,\n      );\n    }\n\n    const approvalTransaction = await token\n      .approve(peripheryAddress, MaxUint256Bn, {\n        gasLimit: getGasBuffer(estimatedGas),\n      })\n      .catch((error) => {\n        sentryTracker.captureException(error);\n        sentryTracker.captureMessage('Transaction Confirmation Error');\n        throw new Error('Transaction Confirmation Error');\n      });\n\n    try {\n      await approvalTransaction.wait();\n    } catch (error) {\n      sentryTracker.captureException(error);\n      sentryTracker.captureMessage('Token approval failed');\n      throw new Error('Token approval failed');\n    }\n  }\n\n  // protocol name\n\n  public get protocol(): string {\n    const tokenName = this.underlyingToken.name;\n\n    const prefix = getProtocolPrefix(this.rateOracle.protocolId);\n\n    return `${prefix}${tokenName}`;\n  }\n\n  // start and end dates\n\n  public get startDateTime(): DateTime {\n    return timestampWadToDateTime(this.termStartTimestamp);\n  }\n\n  public get endDateTime(): DateTime {\n    return timestampWadToDateTime(this.termEndTimestamp);\n  }\n\n  public async getFixedApr(): Promise<number> {\n    if (!this.provider) {\n      throw new Error('Blockchain not connected');\n    }\n    const factoryContract = factoryFactory.connect(this.factoryAddress, this.provider);\n    const peripheryAddress = await factoryContract.periphery();\n\n    const peripheryContract = peripheryFactory.connect(peripheryAddress, this.provider);\n    const currentTick = await peripheryContract.callStatic.getCurrentTick(this.marginEngineAddress);\n    const apr = tickToFixedRate(currentTick).toNumber();\n\n    return apr;\n  }\n\n  public async getVariableFactor(\n    termStartTimestamp: BigNumber,\n    termEndTimestamp: BigNumber,\n  ): Promise<number> {\n    if (!this.provider) {\n      throw new Error('Blockchain not connected');\n    }\n    const rateOracleContract = baseRateOracleFactory.connect(this.rateOracle.id, this.provider);\n    try {\n      const result = await rateOracleContract.callStatic.variableFactor(\n        termStartTimestamp,\n        termEndTimestamp,\n      );\n      const resultScaled = result.div(BigNumber.from(10).pow(12)).toNumber() / 1000000;\n      return resultScaled;\n    } catch (error) {\n      sentryTracker.captureException(error);\n      sentryTracker.captureMessage('Cannot get variable factor');\n      throw new Error('Cannot get variable factor');\n    }\n  }\n\n  // tick functionalities\n\n  public closestTickAndFixedRate(fixedRate: number): ClosestTickAndFixedRate {\n    const inRangeFixedRate = Math.min(Math.max(fixedRate, MIN_FIXED_RATE), MAX_FIXED_RATE);\n\n    const fixedRatePrice = Price.fromNumber(inRangeFixedRate);\n    const closestTick: number = fixedRateToClosestTick(fixedRatePrice);\n    const closestUsableTick: number = nearestUsableTick(closestTick, this.tickSpacing);\n    const closestUsableFixedRate: Price = tickToFixedRate(closestUsableTick);\n\n    return {\n      closestUsableTick,\n      closestUsableFixedRate,\n    };\n  }\n\n  public getNextUsableFixedRate(fixedRate: number, count: number): number {\n    let { closestUsableTick } = this.closestTickAndFixedRate(fixedRate);\n    closestUsableTick -= count * this.tickSpacing;\n    return tickToFixedRate(closestUsableTick).toNumber();\n  }\n\n  // balance checks\n\n  public async underlyingTokens(): Promise<number> {\n    if (!this.signer) {\n      throw new Error('Wallet not connected');\n    }\n\n    const signerAddress = await this.signer.getAddress();\n\n    let currentBalance: BigNumber;\n    if (this.isETH) {\n      if (!this.provider) {\n        throw new Error('Provider not connected');\n      }\n\n      currentBalance = await this.provider.getBalance(signerAddress);\n    } else {\n      if (!this.underlyingToken.id) {\n        throw new Error('No underlying token');\n      }\n\n      const tokenAddress = this.underlyingToken.id;\n      const token = tokenFactory.connect(tokenAddress, this.signer);\n\n      currentBalance = await token.balanceOf(signerAddress);\n    }\n\n    return this.descale(currentBalance);\n  }\n\n  // one week look-back window apy\n\n  async getInstantApy(): Promise<number> {\n    if (!this.provider) {\n      throw new Error('Blockchain not connected');\n    }\n\n    const blocksPerDay = 6570; // 13.15 seconds per block\n    const blockPerHour = 274;\n\n    switch (this.rateOracle.protocolId) {\n      case 1: {\n        if (!this.underlyingToken.id) {\n          throw new Error('No underlying error');\n        }\n\n        const rateOracleContract = aaveBorrowRateOracleFactory.connect(\n          this.rateOracle.id,\n          this.provider,\n        );\n        const lendingPoolAddress = await rateOracleContract.aaveLendingPool();\n        const lendingPool = iAaveV2LendingPoolFactory.connect(lendingPoolAddress, this.provider);\n        const reservesData = await lendingPool.getReserveData(this.underlyingToken.id);\n        const rateInRay = reservesData.currentLiquidityRate;\n        const result = rateInRay.div(BigNumber.from(10).pow(21)).toNumber() / 1000000;\n        return result;\n      }\n      case 2: {\n        const daysPerYear = 365;\n        const rateOracle = compoundRateOracleFactory.connect(this.rateOracle.id, this.provider);\n        const cTokenAddress = await (rateOracle as CompoundRateOracle).ctoken();\n        const cTokenContract = iCTokenFactory.connect(cTokenAddress, this.provider);\n        const supplyRatePerBlock = await cTokenContract.supplyRatePerBlock();\n        const supplyApy =\n          ((supplyRatePerBlock.toNumber() / 1e18) * blocksPerDay + 1) ** daysPerYear - 1;\n        return supplyApy;\n      }\n\n      case 3: {\n        const lastBlock = await this.provider.getBlockNumber();\n        const to = BigNumber.from((await this.provider.getBlock(lastBlock - 1)).timestamp);\n        const from = BigNumber.from(\n          (await this.provider.getBlock(lastBlock - 28 * blockPerHour)).timestamp,\n        );\n\n        const rateOracleContract = baseRateOracleFactory.connect(this.rateOracle.id, this.provider);\n\n        const oneWeekApy = await rateOracleContract.callStatic.getApyFromTo(from, to);\n\n        return oneWeekApy.div(BigNumber.from(1000000000000)).toNumber() / 1000000;\n      }\n\n      case 4: {\n        const lastBlock = await this.provider.getBlockNumber();\n        const to = BigNumber.from((await this.provider.getBlock(lastBlock - 1)).timestamp);\n        const from = BigNumber.from(\n          (await this.provider.getBlock(lastBlock - 28 * blockPerHour)).timestamp,\n        );\n\n        const rateOracleContract = baseRateOracleFactory.connect(this.rateOracle.id, this.provider);\n\n        const oneWeekApy = await rateOracleContract.callStatic.getApyFromTo(from, to);\n\n        return oneWeekApy.div(BigNumber.from(1000000000000)).toNumber() / 1000000;\n      }\n\n      case 5: {\n        if (!this.underlyingToken.id) {\n          throw new Error('No underlying error');\n        }\n\n        const rateOracleContract = aaveBorrowRateOracleFactory.connect(\n          this.rateOracle.id,\n          this.provider,\n        );\n        const lendingPoolAddress = await rateOracleContract.aaveLendingPool();\n        const lendingPool = iAaveV2LendingPoolFactory.connect(lendingPoolAddress, this.provider);\n        const reservesData = await lendingPool.getReserveData(this.underlyingToken.id);\n        const rateInRay = reservesData.currentVariableBorrowRate;\n        const result = rateInRay.div(BigNumber.from(10).pow(21)).toNumber() / 1000000;\n        return result;\n      }\n\n      case 6: {\n        const daysPerYear = 365;\n\n        const rateOracle = compoundBorrowRateOracleFactory.connect(\n          this.rateOracle.id,\n          this.provider,\n        );\n\n        const cTokenAddress = await (rateOracle as CompoundBorrowRateOracle).ctoken();\n        const cTokenContract = iCTokenFactory.connect(cTokenAddress, this.provider);\n\n        const borrowRatePerBlock = await cTokenContract.borrowRatePerBlock();\n        const borrowApy =\n          ((borrowRatePerBlock.toNumber() / 1e18) * blocksPerDay + 1) ** daysPerYear - 1;\n        return borrowApy;\n      }\n\n      default:\n        throw new Error('Unrecognized protocol');\n    }\n  }\n}\n"]}