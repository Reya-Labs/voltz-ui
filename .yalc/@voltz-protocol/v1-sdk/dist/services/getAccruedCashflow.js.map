{"version":3,"file":"getAccruedCashflow.js","sourceRoot":"/","sources":["services/getAccruedCashflow.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable no-await-in-loop */\n/* eslint-disable no-lonely-if */\nimport { BigNumber, utils } from 'ethers';\nimport { ONE_YEAR_IN_SECONDS } from '../constants';\nimport { Swap } from '../entities';\nimport { BaseRateOracle } from '../typechain';\n\nconst getAnnualizedTime = (start: number, end: number): number => {\n  return (end - start) / ONE_YEAR_IN_SECONDS;\n};\n\nexport type AccruedCashflowInfo = {\n  avgFixedRate: number;\n  accruedCashflow: number;\n};\n\nexport type TransformedSwap = {\n  avgFixedRate: number;\n  notional: number;\n  time: number;\n};\n\nexport type AccruedCashflowArgs = {\n  swaps: TransformedSwap[];\n  rateOracle: BaseRateOracle;\n  currentTime: number;\n  endTime: number;\n};\n\n// get all swaps of some position, descale the values to numbers and sort by time\nexport function transformSwaps(swaps: Swap[], decimals: number): TransformedSwap[] {\n  return swaps\n    .map((s) => {\n      return {\n        notional: Number(\n          utils.formatUnits(BigNumber.from(s.variableTokenDelta.toString()), decimals),\n        ),\n        time: Number(s.transactionTimestamp.toString()),\n        avgFixedRate: Math.abs(\n          Number(\n            utils.formatUnits(\n              BigNumber.from(s.fixedTokenDeltaUnbalanced.toString())\n                .mul(BigNumber.from(10).pow(18))\n                .div(BigNumber.from(s.variableTokenDelta.toString())),\n              20,\n            ),\n          ),\n        ),\n      };\n    })\n    .sort((a, b) => a.time - b.time);\n}\n\n// get accrued cashflow of some position between two timestamps\nasync function getAccruedCashflowBetween(\n  notional: number,\n  fixedRate: number,\n  rateOracle: BaseRateOracle,\n  from: number,\n  to: number,\n) {\n  // if notional > 0 -- VT, receives variable, pays fixed\n  // if notional < 0 -- FT, received fixed, pays variable\n\n  const nTime = getAnnualizedTime(from, to);\n  const variableRate = Number(utils.formatUnits(await rateOracle.getApyFromTo(from, to), 18));\n\n  return notional * nTime * (variableRate - fixedRate);\n}\n\n// in the case of an unwind, get the locked \"profit\" in the fixed token balance\n// e.g. some position of 1,000 VT notional @ avg fixed rate 5%\n// an unwind of 500 FT notional is triggered @ avg fixed rate 6% (at time T)\n// the locked \"profit\" is 500 * (5% - 6%) * (Maturity - T) / YEAR\nfunction getLockedInProfit(\n  notional: number, // notional of unwind\n  timeInYears: number,\n  fixedRate0: number,\n  fixedRate1: number,\n) {\n  // if the notional in unwind > 0, this means that the position is FT, then unwind (VT)\n  // if the notional in unwind < 0, this means that the position is VT, then unwind (FT)\n\n  return notional * timeInYears * (fixedRate0 - fixedRate1);\n}\n\n// get the accrued cashflow and average fixed rate of particular position\nexport const getAccruedCashflow = async ({\n  swaps,\n  rateOracle,\n  currentTime,\n  endTime,\n}: AccruedCashflowArgs): Promise<AccruedCashflowInfo> => {\n  if (swaps.length === 0) {\n    return {\n      avgFixedRate: 0,\n      accruedCashflow: 0,\n    };\n  }\n  let info = {\n    accruedCashflow: 0,\n    ...swaps[0],\n  };\n\n  for (let i = 1; i < swaps.length; i += 1) {\n    const timeUntilMaturity = getAnnualizedTime(swaps[i].time, endTime);\n\n    if (info.notional >= 0) {\n      // overall position: VT\n\n      if (swaps[i].notional < 0) {\n        // swap: FT\n\n        if (info.notional + swaps[i].notional > 0) {\n          // partial unwind\n\n          const lockedInProfit = getLockedInProfit(\n            swaps[i].notional,\n            timeUntilMaturity,\n            info.avgFixedRate,\n            swaps[i].avgFixedRate,\n          );\n\n          const accruedCashflowBetween = await getAccruedCashflowBetween(\n            -swaps[i].notional, // notional > 0\n            info.avgFixedRate,\n            rateOracle,\n            info.time,\n            swaps[i].time,\n          );\n\n          info = {\n            accruedCashflow: info.accruedCashflow + lockedInProfit + accruedCashflowBetween,\n            notional: info.notional + swaps[i].notional,\n            time: info.time,\n            avgFixedRate: info.avgFixedRate,\n          };\n        } else {\n          // full unwind + FT\n\n          const lockedInProfit = getLockedInProfit(\n            -info.notional,\n            timeUntilMaturity,\n            info.avgFixedRate,\n            swaps[i].avgFixedRate,\n          );\n\n          const accruedCashflowBetween = await getAccruedCashflowBetween(\n            info.notional, // notional > 0\n            info.avgFixedRate,\n            rateOracle,\n            info.time,\n            swaps[i].time,\n          );\n\n          info = {\n            accruedCashflow: info.accruedCashflow + lockedInProfit + accruedCashflowBetween,\n            notional: info.notional + swaps[i].notional,\n            time: swaps[i].time,\n            avgFixedRate: swaps[i].avgFixedRate,\n          };\n        }\n      } else {\n        // swap: VT -- extend position\n\n        const accruedCashflowBetween = await getAccruedCashflowBetween(\n          info.notional,\n          info.avgFixedRate,\n          rateOracle,\n          info.time,\n          swaps[i].time,\n        );\n\n        info = {\n          accruedCashflow: info.accruedCashflow + accruedCashflowBetween,\n          notional: info.notional + swaps[i].notional,\n          time: swaps[i].time,\n          avgFixedRate:\n            (info.avgFixedRate * info.notional + swaps[i].avgFixedRate * swaps[i].notional) /\n            (info.notional + swaps[i].notional),\n        };\n      }\n    } else {\n      // position: FT\n\n      if (swaps[i].notional < 0) {\n        // swap: FT -- extend position\n\n        const accruedCashflowBetween = await getAccruedCashflowBetween(\n          info.notional,\n          info.avgFixedRate,\n          rateOracle,\n          info.time,\n          swaps[i].time,\n        );\n\n        info = {\n          accruedCashflow: info.accruedCashflow + accruedCashflowBetween,\n          notional: info.notional + swaps[i].notional,\n          time: swaps[i].time,\n          avgFixedRate:\n            (info.avgFixedRate * info.notional + swaps[i].avgFixedRate * swaps[i].notional) /\n            (info.notional + swaps[i].notional),\n        };\n      } else {\n        // swap: VT\n\n        if (info.notional + swaps[i].notional < 0) {\n          // partial unwind\n\n          const lockedInProfit = getLockedInProfit(\n            swaps[i].notional,\n            timeUntilMaturity,\n            info.avgFixedRate,\n            swaps[i].avgFixedRate,\n          );\n\n          const accruedCashflowBetween = await getAccruedCashflowBetween(\n            -swaps[i].notional, // notional < 0\n            info.avgFixedRate,\n            rateOracle,\n            info.time,\n            swaps[i].time,\n          );\n\n          info = {\n            accruedCashflow: info.accruedCashflow + lockedInProfit + accruedCashflowBetween,\n            notional: info.notional + swaps[i].notional,\n            time: info.time,\n            avgFixedRate: info.avgFixedRate,\n          };\n        } else {\n          // full unwind + VT\n\n          const lockedInProfit = getLockedInProfit(\n            -info.notional,\n            timeUntilMaturity,\n            info.avgFixedRate,\n            swaps[i].avgFixedRate,\n          );\n\n          const accruedCashflowBetween = await getAccruedCashflowBetween(\n            info.notional, // notional < 0\n            info.avgFixedRate,\n            rateOracle,\n            info.time,\n            swaps[i].time,\n          );\n\n          info = {\n            accruedCashflow: info.accruedCashflow + lockedInProfit + accruedCashflowBetween,\n            notional: info.notional + swaps[i].notional,\n            time: swaps[i].time,\n            avgFixedRate: swaps[i].avgFixedRate,\n          };\n        }\n      }\n    }\n  }\n\n  // all swaps are processed, get the accrued of the overall position between the last update and now\n  {\n    const accruedCashflowBetween = await getAccruedCashflowBetween(\n      info.notional,\n      info.avgFixedRate,\n      rateOracle,\n      info.time,\n      currentTime,\n    );\n\n    info = {\n      accruedCashflow: info.accruedCashflow + accruedCashflowBetween,\n      notional: info.notional,\n      time: currentTime,\n      avgFixedRate: info.avgFixedRate,\n    };\n  }\n\n  return {\n    avgFixedRate: 100 * info.avgFixedRate,\n    accruedCashflow: info.accruedCashflow,\n  };\n};\n"]}