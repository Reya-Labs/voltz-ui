import { DateTime } from 'luxon';
import { ethers } from 'ethers';
import { AMM, HealthFactorStatus } from './amm';
import Burn from './burn';
import Liquidation from './liquidation';
import MarginUpdate from './marginUpdate';
import Mint from './mint';
import Settlement from './settlement';
import Swap from './swap';
import { Price } from './fractions/price';
export type PositionConstructorArgs = {
    id: string;
    amm: AMM;
    owner: string;
    tickLower: number;
    tickUpper: number;
    createdTimestamp: number;
    positionType: number;
    mints: Array<Mint>;
    burns: Array<Burn>;
    swaps: Array<Swap>;
    marginUpdates: Array<MarginUpdate>;
    liquidations: Array<Liquidation>;
    settlements: Array<Settlement>;
};
declare class Position {
    readonly id: string;
    readonly createdTimestamp: number;
    readonly amm: AMM;
    readonly owner: string;
    readonly tickLower: number;
    readonly tickUpper: number;
    readonly positionType: number;
    readonly mints: Array<Mint>;
    readonly burns: Array<Burn>;
    readonly swaps: Array<Swap>;
    readonly marginUpdates: Array<MarginUpdate>;
    readonly liquidations: Array<Liquidation>;
    readonly settlements: Array<Settlement>;
    initialized: boolean;
    fixedTokenBalance: number;
    variableTokenBalance: number;
    liquidity: number;
    liquidityInUSD: number;
    notional: number;
    notionalInUSD: number;
    margin: number;
    marginInUSD: number;
    fees: number;
    feesInUSD: number;
    accruedCashflow: number;
    accruedCashflowInUSD: number;
    settlementCashflow: number;
    settlementCashflowInUSD: number;
    liquidationThreshold: number;
    safetyThreshold: number;
    receivingRate: number;
    payingRate: number;
    healthFactor: HealthFactorStatus;
    fixedRateHealthFactor: HealthFactorStatus;
    poolAPR: number;
    isPoolMatured: boolean;
    isSettled: boolean;
    constructor({ id, createdTimestamp, amm, owner, tickLower, tickUpper, positionType, mints, burns, swaps, marginUpdates, liquidations, settlements, }: PositionConstructorArgs);
    get priceLower(): Price;
    get priceUpper(): Price;
    get fixedRateLower(): Price;
    get fixedRateUpper(): Price;
    getNotionalFromLiquidity(liquidity: ethers.BigNumber): number;
    get createdDateTime(): DateTime;
    refreshInfo(): Promise<void>;
    private getSettlementCashflow;
    get settlementBalance(): number;
}
export default Position;
//# sourceMappingURL=position.d.ts.map