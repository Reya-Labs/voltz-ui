{"version":3,"file":"fullMath.js","sourceRoot":"/","sources":["utils/fullMath.ts"],"names":[],"mappings":";;;;;;AAAA,8CAAwB;AACxB,0CAAyC;AAEzC;IACE;;OAEG;IACH;IAAuB,CAAC;IAEV,yBAAgB,GAA9B,UAA+B,CAAO,EAAE,CAAO,EAAE,WAAiB;QAChE,IAAM,OAAO,GAAG,cAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACpC,IAAI,MAAM,GAAG,cAAI,CAAC,MAAM,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;QAC/C,IAAI,cAAI,CAAC,QAAQ,CAAC,cAAI,CAAC,SAAS,CAAC,OAAO,EAAE,WAAW,CAAC,EAAE,gBAAI,CAAC;YAAE,MAAM,GAAG,cAAI,CAAC,GAAG,CAAC,MAAM,EAAE,eAAG,CAAC,CAAC;QAC9F,OAAO,MAAM,CAAC;IAChB,CAAC;IACH,eAAC;AAAD,CAAC,AAZD,IAYC;AAZqB,4BAAQ","sourcesContent":["import JSBI from 'jsbi';\nimport { ONE, ZERO } from '../constants';\n\nexport abstract class FullMath {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  public static mulDivRoundingUp(a: JSBI, b: JSBI, denominator: JSBI): JSBI {\n    const product = JSBI.multiply(a, b);\n    let result = JSBI.divide(product, denominator);\n    if (JSBI.notEqual(JSBI.remainder(product, denominator), ZERO)) result = JSBI.add(result, ONE);\n    return result;\n  }\n}\n"]}