{"version":3,"file":"mostSignificantBit.js","sourceRoot":"/","sources":["utils/mostSignificantBit.ts"],"names":[],"mappings":";;;;;;AAAA,8CAAwB;AACxB,kEAAuC;AACvC,0CAAgD;AAEhD,IAAM,GAAG,GAAG,cAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;AAC3B,IAAM,WAAW,GAAG,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,UAAC,GAAW,IAAqB,OAAA;IACrF,GAAG;IACH,cAAI,CAAC,YAAY,CAAC,GAAG,EAAE,cAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;CACzC,EAHsF,CAGtF,CAAC,CAAC;AAEH,SAAgB,kBAAkB,CAAC,CAAO;IACxC,IAAA,wBAAS,EAAC,cAAI,CAAC,WAAW,CAAC,CAAC,EAAE,gBAAI,CAAC,EAAE,MAAM,CAAC,CAAC;IAC7C,IAAA,wBAAS,EAAC,cAAI,CAAC,eAAe,CAAC,CAAC,EAAE,sBAAU,CAAC,EAAE,KAAK,CAAC,CAAC;IAEtD,IAAI,GAAG,GAAG,CAAC,CAAC;IACZ,KAA2B,UAAW,EAAX,2BAAW,EAAX,yBAAW,EAAX,IAAW,EAAE;QAA7B,IAAA,sBAAY,EAAX,KAAK,QAAA,EAAE,GAAG,QAAA;QACpB,IAAI,cAAI,CAAC,kBAAkB,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE;YACnC,6CAA6C;YAC7C,CAAC,GAAG,cAAI,CAAC,gBAAgB,CAAC,CAAC,EAAE,cAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;YACjD,GAAG,IAAI,KAAK,CAAC;SACd;KACF;IACD,OAAO,GAAG,CAAC;AACb,CAAC;AAbD,gDAaC","sourcesContent":["import JSBI from 'jsbi';\nimport invariant from 'tiny-invariant';\nimport { MaxUint256, ZERO } from '../constants';\n\nconst TWO = JSBI.BigInt(2);\nconst POWERS_OF_2 = [128, 64, 32, 16, 8, 4, 2, 1].map((pow: number): [number, JSBI] => [\n  pow,\n  JSBI.exponentiate(TWO, JSBI.BigInt(pow)),\n]);\n\nexport function mostSignificantBit(x: JSBI): number {\n  invariant(JSBI.greaterThan(x, ZERO), 'ZERO');\n  invariant(JSBI.lessThanOrEqual(x, MaxUint256), 'MAX');\n\n  let msb = 0;\n  for (const [power, min] of POWERS_OF_2) {\n    if (JSBI.greaterThanOrEqual(x, min)) {\n      // eslint-disable-next-line no-param-reassign\n      x = JSBI.signedRightShift(x, JSBI.BigInt(power));\n      msb += power;\n    }\n  }\n  return msb;\n}\n"]}