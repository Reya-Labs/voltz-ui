{"version":3,"file":"getSubgraphRoot.js","sourceRoot":"/","sources":["utils/communitySbt/getSubgraphRoot.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,yCAAqC;AAErC,qDAAoD;AAEpD,IAAM,UAAU,GAAG,oOAUlB,CAAC;AASF,SAAsB,mBAAmB,CACvC,SAAiB,EACjB,WAAmB;;;;;;oBAEb,MAAM,GAAG,IAAA,iCAAe,EAAC,WAAW,CAAC,CAAC;oBAE/B,qBAAM,MAAM,CAAC,KAAK,CAAC;4BAC9B,KAAK,EAAE,IAAA,YAAG,EAAC,UAAU,CAAC;4BACtB,SAAS,EAAE;gCACT,SAAS,WAAA;6BACV;yBACF,CAAC,EAAA;;oBALI,IAAI,GAAG,SAKX;oBAGI,UAAU,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC9C,IAAI,CAAC,UAAU,EAAE;wBACf,sBAAO,SAAS,EAAC;qBAClB;oBAED,sBAAO;4BACL,UAAU,EAAE,UAAU,CAAC,IAAI;4BAC3B,eAAe,EAAE,UAAU,CAAC,eAAe;4BAC3C,cAAc,EAAE,UAAU,CAAC,cAAc;4BACzC,YAAY,EAAE,UAAU,CAAC,YAAY;yBACtC,EAAC;;;;CACH;AAzBD,kDAyBC","sourcesContent":["import { gql } from '@apollo/client';\nimport { Bytes } from 'ethers';\nimport { getApolloClient } from './getApolloClient';\n\nconst rootsQuery = `\n  query($timestamp: BigInt) {\n    roots(where: {startTimestamp_lte: $timestamp, endTimestamp_gte: $timestamp}) {\n        id\n        root\n        startTimestamp\n        endTimestamp\n        metadataURIBase\n    }\n  }\n`;\n\nexport type RootEntity = {\n  merkleRoot: Bytes;\n  baseMetadataUri: string;\n  startTimestamp: number;\n  endTimestamp: number;\n};\n\nexport async function getRootFromSubgraph(\n  timestamp: number,\n  subgraphUrl: string,\n): Promise<RootEntity | undefined> {\n  const client = getApolloClient(subgraphUrl);\n\n  const data = await client.query({\n    query: gql(rootsQuery),\n    variables: {\n      timestamp,\n    },\n  });\n\n  // TODO: add support for multiple roots, [0] is not enough\n  const rootEntity = (data.data.roots || [])[0];\n  if (!rootEntity) {\n    return undefined;\n  }\n\n  return {\n    merkleRoot: rootEntity.root,\n    baseMetadataUri: rootEntity.metadataURIBase,\n    startTimestamp: rootEntity.startTimestamp,\n    endTimestamp: rootEntity.endTimestamp,\n  };\n}\n"]}