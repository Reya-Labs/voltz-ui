{"version":3,"file":"getSubgraphBadges.js","sourceRoot":"/","sources":["utils/communitySbt/getSubgraphBadges.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,yCAAqC;AAGrC,qCAAqC;AACrC,oCAA0C;AAC1C,qDAAoD;AAEpD,SAAsB,iBAAiB,CAAC,EAUvC;;QATC,MAAM,YAAA,EACN,QAAQ,cAAA,EACR,iBAAiB,uBAAA;;;;;;;oBAST,cAAc,GAAoB,EAAE,CAAC;yBAGvC,iBAAiB,EAAjB,wBAAiB;oBACb,UAAU,GAAG,uXAYZ,CAAC;oBACF,MAAM,GAAG,IAAA,iCAAe,EAAC,iBAAiB,CAAC,CAAC;oBAC5C,EAAE,GAAG,UAAG,MAAM,CAAC,WAAW,EAAE,cAAI,QAAQ,CAAE,CAAC;oBACpC,qBAAM,MAAM,CAAC,KAAK,CAI5B;4BACD,KAAK,EAAE,IAAA,YAAG,EAAC,UAAU,CAAC;4BACtB,SAAS,EAAE;gCACT,EAAE,IAAA;6BACH;yBACF,CAAC,EAAA;;oBATI,IAAI,GAAG,SASX;oBAEI,cAAc,GAAG,CACrB,CAAA,MAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,IAAI,0CAAE,UAAU,EAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAC/B,CAAC;oBAC7B,WAAkC,EAAd,iCAAc,EAAd,4BAAc,EAAd,IAAc,EAAE;wBAAzB,KAAK;wBACd,IAAI,QAAQ,CAAC,KAAK,CAAC,gBAAgB,CAAC,GAAG,CAAC,IAAI,QAAQ,CAAC,KAAK,CAAC,eAAe,CAAC,GAAG,CAAC,EAAE;4BAC/E,cAAc,CAAC,IAAI,CAAC;gCAClB,EAAE,EAAE,KAAK,CAAC,EAAE;gCACZ,SAAS,EAAE,KAAK,CAAC,SAAS;gCAC1B,kBAAkB,EAAE,IAAA,kBAAQ,EAAC,QAAQ,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;gCAC9D,iBAAiB,EAAE,IAAA,kBAAQ,EAAC,QAAQ,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;6BAC7D,CAAC,CAAC;yBACJ;qBACF;;wBAGH,sBAAO,cAAc,EAAC;;;oBAEtB,sBAAa,CAAC,gBAAgB,CAAC,OAAK,CAAC,CAAC;oBACtC,sBAAO,EAAE,EAAC;;;;;CAEb;AA9DD,8CA8DC","sourcesContent":["import { gql } from '@apollo/client';\nimport { BadgeResponse } from '../../entities';\nimport { SubgraphBadgeResponse } from '../../entities/communitySbt';\nimport { toMillis } from './helpers';\nimport { sentryTracker } from '../sentry';\nimport { getApolloClient } from './getApolloClient';\n\nexport async function getSubgraphBadges({\n  userId,\n  seasonId,\n  badgesSubgraphUrl,\n}: {\n  userId: string;\n  seasonId: number;\n  seasonStart: number;\n  seasonEnd: number;\n  badgesSubgraphUrl?: string;\n}): Promise<BadgeResponse[]> {\n  try {\n    const badgesResponse: BadgeResponse[] = [];\n\n    // programmatic badges\n    if (badgesSubgraphUrl) {\n      const badgeQuery = `\n                query( $id: String) {\n                    seasonUser(id: $id) {\n                        id\n                        badges {\n                        id\n                        awardedTimestamp\n                        mintedTimestamp\n                        badgeType\n                        }\n                    }\n                }\n            `;\n      const client = getApolloClient(badgesSubgraphUrl);\n      const id = `${userId.toLowerCase()}#${seasonId}`;\n      const data = await client.query<{\n        seasonUser: {\n          badges: SubgraphBadgeResponse[];\n        };\n      }>({\n        query: gql(badgeQuery),\n        variables: {\n          id,\n        },\n      });\n\n      const subgraphBadges = (\n        data?.data?.seasonUser ? data.data.seasonUser.badges : []\n      ) as SubgraphBadgeResponse[];\n      for (const badge of subgraphBadges) {\n        if (parseInt(badge.awardedTimestamp) > 0 || parseInt(badge.mintedTimestamp) > 0) {\n          badgesResponse.push({\n            id: badge.id,\n            badgeType: badge.badgeType,\n            awardedTimestampMs: toMillis(parseInt(badge.awardedTimestamp)),\n            mintedTimestampMs: toMillis(parseInt(badge.mintedTimestamp)),\n          });\n        }\n      }\n    }\n\n    return badgesResponse;\n  } catch (error) {\n    sentryTracker.captureException(error);\n    return [];\n  }\n}\n"]}