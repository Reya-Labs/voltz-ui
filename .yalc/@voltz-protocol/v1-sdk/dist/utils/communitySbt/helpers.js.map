{"version":3,"file":"helpers.js","sourceRoot":"/","sources":["utils/communitySbt/helpers.ts"],"names":[],"mappings":"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","sourcesContent":["import { Bytes, ethers } from 'ethers';\nimport {\n  GOERLI_ONE_HUNDRED_THOUSAND,\n  GOERLI_TWO_MILLON,\n  MAINNET_ONE_HUNDRED_THOUSAND,\n  MAINNET_TWO_MILLON,\n} from '../../constants';\nimport { NON_SUBGRAPH_BADGES_SEASONS, TOP_BADGES_VARIANT } from '../../entities/communitySbt';\nimport { CommunitySBT__factory } from '../../typechain-sbt';\n\nexport function getBadgeTypeFromMetadataUri(metadataURI: string): number {\n  const filenamme = metadataURI.split('/')[3];\n  const badgeType = parseInt(filenamme.split('.')[0]);\n  return badgeType;\n}\n\nexport function decodeBadgeType(input: Bytes): number {\n  const inter = new ethers.utils.Interface(CommunitySBT__factory.abi);\n  const decoded = inter.decodeFunctionData('redeem', input);\n  const badgeType = getBadgeTypeFromMetadataUri(decoded[0].metadataURI);\n  return badgeType;\n}\n\nexport function decodeMultipleBadgeTypes(input: Bytes): number[] {\n  const badgeTypes = new Array<number>();\n  const inter = new ethers.utils.Interface(CommunitySBT__factory.abi);\n  const decoded = inter.decodeFunctionData('multiRedeem', input);\n  for (const leafInfo of decoded[0]) {\n    const badgeType = getBadgeTypeFromMetadataUri(leafInfo.metadataURI);\n    badgeTypes.push(badgeType);\n  }\n  return badgeTypes;\n}\n\nexport function getEtherscanURL(network: string, apiKey: string, userAddress: string): string {\n  switch (network) {\n    case 'goerli':\n      return `https://api-goerli.etherscan.io/api?module=account&action=txlist&address=${userAddress}&page=1&offset=50&sort=desc&apikey=${apiKey}`;\n    case 'mainnet':\n      return `https://api.etherscan.io/api?module=account&action=txlist&address=${userAddress}&page=1&offset=50&sort=desc&apikey=${apiKey}`;\n    default:\n      return '';\n  }\n}\n\nexport function getTopBadgeType(season: number, isTrader: boolean): string | undefined {\n  const actor = isTrader ? 'trader' : 'liquidityProvider';\n  return NON_SUBGRAPH_BADGES_SEASONS[season].find((b) => TOP_BADGES_VARIANT[actor].includes(b));\n}\n\n/**\n * \"Convert seconds to milliseconds, but only if the input is a number and not zero.\"\n *\n * @param {number} seconds - number - The number of seconds to convert to milliseconds.\n * @returns A function that takes a number and returns a number or undefined.\n */\nexport function toMillis(seconds: number): number | undefined {\n  if (Number.isNaN(seconds) || seconds === 0) {\n    return undefined;\n  }\n\n  return seconds * 1000;\n}\n\nexport function get2MRefereeBenchmark(subgraphUrl?: string): number {\n  return subgraphUrl?.includes('goerli') || subgraphUrl?.includes('testnet')\n    ? GOERLI_TWO_MILLON\n    : MAINNET_TWO_MILLON;\n}\n\nexport function get100KRefereeBenchmark(subgraphUrl?: string): number {\n  return subgraphUrl?.includes('goerli') || subgraphUrl?.includes('testnet')\n    ? GOERLI_ONE_HUNDRED_THOUSAND\n    : MAINNET_ONE_HUNDRED_THOUSAND;\n}\n\nexport function getLeavesIpfsUri(seasonId: number, cidsRecord: Array<string>): string {\n  if (!cidsRecord[seasonId]) {\n    throw new Error(`No IPFS CID found for season ${seasonId}`);\n  }\n  return `https://gateway.pinata.cloud/ipfs/${cidsRecord[seasonId]}`;\n}\n\nexport function getSelectedSeasonBadgesUrl(\n  seasonId: number,\n  badgesCids?: string[],\n  currentUrl?: string,\n  nextUrl?: string,\n): string {\n  let selectedBadgesSubgraphUrl = currentUrl;\n  if (badgesCids && badgesCids?.length < seasonId) {\n    selectedBadgesSubgraphUrl = nextUrl;\n  }\n  if (!selectedBadgesSubgraphUrl || !badgesCids) {\n    throw new Error(`Unable to find badges subgraph URL`);\n  }\n  return selectedBadgesSubgraphUrl;\n}\n"]}