{"version":3,"file":"encodeSqrtRatioX96.js","sourceRoot":"/","sources":["utils/encodeSqrtRatioX96.ts"],"names":[],"mappings":";;;;;;AAAA,8CAAwB;AAGxB,+BAA8B;AAE9B;;;;;GAKG;AACH,SAAgB,kBAAkB,CAAC,OAAkB,EAAE,OAAkB;IACvE,IAAM,SAAS,GAAG,cAAI,CAAC,SAAS,CAAC,cAAI,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,cAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;IACzE,IAAM,WAAW,GAAG,cAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IACzC,IAAM,SAAS,GAAG,cAAI,CAAC,MAAM,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;IACtD,OAAO,IAAA,WAAI,EAAC,SAAS,CAAC,CAAC;AACzB,CAAC;AALD,gDAKC","sourcesContent":["import JSBI from 'jsbi';\n\nimport { BigIntish } from '../types';\nimport { sqrt } from './sqrt';\n\n/**\n * Returns the sqrt ratio as a Q64.96 corresponding to a given ratio of amount1 and amount0\n * @param amount1 The numerator amount i.e., the amount of token1\n * @param amount0 The denominator amount i.e., the amount of token0\n * @returns The sqrt ratio\n */\nexport function encodeSqrtRatioX96(amount1: BigIntish, amount0: BigIntish): JSBI {\n  const numerator = JSBI.leftShift(JSBI.BigInt(amount1), JSBI.BigInt(192));\n  const denominator = JSBI.BigInt(amount0);\n  const ratioX192 = JSBI.divide(numerator, denominator);\n  return sqrt(ratioX192);\n}\n"]}