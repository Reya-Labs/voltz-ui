{"version":3,"file":"maxLiquidityForAmounts.js","sourceRoot":"/","sources":["utils/maxLiquidityForAmounts.ts"],"names":[],"mappings":"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","sourcesContent":["import JSBI from 'jsbi';\n\nimport { Q96 } from '../constants';\nimport { BigIntish } from '../types';\n\n/**\n * Returns an imprecise maximum amount of liquidity received for a given amount of token 0.\n * This function is available to accommodate LiquidityAmounts#getLiquidityForAmount0 in the v3 periphery,\n * which could be more precise by at least 32 bits by dividing by Q64 instead of Q96 in the intermediate step,\n * and shifting the subtracted ratio left by 32 bits. This imprecise calculation will likely be replaced in a future\n * v3 router contract.\n * @param sqrtRatioAX96 The price at the lower boundary\n * @param sqrtRatioBX96 The price at the upper boundary\n * @param amount0 The token0 amount\n * @returns liquidity for amount0, imprecise\n */\nfunction maxLiquidityForAmount0Imprecise(\n  sqrtRatioAX96: JSBI,\n  sqrtRatioBX96: JSBI,\n  amount0: BigIntish,\n): JSBI {\n  if (JSBI.greaterThan(sqrtRatioAX96, sqrtRatioBX96)) {\n    // eslint-disable-next-line no-param-reassign\n    [sqrtRatioAX96, sqrtRatioBX96] = [sqrtRatioBX96, sqrtRatioAX96];\n  }\n  const intermediate = JSBI.divide(JSBI.multiply(sqrtRatioAX96, sqrtRatioBX96), Q96);\n  return JSBI.divide(\n    JSBI.multiply(JSBI.BigInt(amount0), intermediate),\n    JSBI.subtract(sqrtRatioBX96, sqrtRatioAX96),\n  );\n}\n\n/**\n * Returns a precise maximum amount of liquidity received for a given amount of token 0 by dividing by Q64 instead of Q96 in the intermediate step,\n * and shifting the subtracted ratio left by 32 bits.\n * @param sqrtRatioAX96 The price at the lower boundary\n * @param sqrtRatioBX96 The price at the upper boundary\n * @param amount0 The token0 amount\n * @returns liquidity for amount0, precise\n */\nfunction maxLiquidityForAmount0Precise(\n  sqrtRatioAX96: JSBI,\n  sqrtRatioBX96: JSBI,\n  amount0: BigIntish,\n): JSBI {\n  if (JSBI.greaterThan(sqrtRatioAX96, sqrtRatioBX96)) {\n    // eslint-disable-next-line no-param-reassign\n    [sqrtRatioAX96, sqrtRatioBX96] = [sqrtRatioBX96, sqrtRatioAX96];\n  }\n\n  const numerator = JSBI.multiply(\n    JSBI.multiply(JSBI.BigInt(amount0), sqrtRatioAX96),\n    sqrtRatioBX96,\n  );\n  const denominator = JSBI.multiply(Q96, JSBI.subtract(sqrtRatioBX96, sqrtRatioAX96));\n\n  return JSBI.divide(numerator, denominator);\n}\n\n/**\n * Computes the maximum amount of liquidity received for a given amount of token1\n * @param sqrtRatioAX96 The price at the lower tick boundary\n * @param sqrtRatioBX96 The price at the upper tick boundary\n * @param amount1 The token1 amount\n * @returns liquidity for amount1\n */\nfunction maxLiquidityForAmount1(\n  sqrtRatioAX96: JSBI,\n  sqrtRatioBX96: JSBI,\n  amount1: BigIntish,\n): JSBI {\n  if (JSBI.greaterThan(sqrtRatioAX96, sqrtRatioBX96)) {\n    // eslint-disable-next-line no-param-reassign\n    [sqrtRatioAX96, sqrtRatioBX96] = [sqrtRatioBX96, sqrtRatioAX96];\n  }\n  return JSBI.divide(\n    JSBI.multiply(JSBI.BigInt(amount1), Q96),\n    JSBI.subtract(sqrtRatioBX96, sqrtRatioAX96),\n  );\n}\n\n/**\n * Computes the maximum amount of liquidity received for a given amount of token0, token1,\n * and the prices at the tick boundaries.\n * @param sqrtRatioCurrentX96 the current price\n * @param sqrtRatioAX96 price at lower boundary\n * @param sqrtRatioBX96 price at upper boundary\n * @param amount0 token0 amount\n * @param amount1 token1 amount\n * @param useFullPrecision if false, liquidity will be maximized according to what the router can calculate,\n * not what core can theoretically support\n */\nexport function maxLiquidityForAmounts(\n  sqrtRatioCurrentX96: JSBI,\n  sqrtRatioAX96: JSBI,\n  sqrtRatioBX96: JSBI,\n  amount0: BigIntish,\n  amount1: BigIntish,\n  useFullPrecision: boolean,\n): JSBI {\n  if (JSBI.greaterThan(sqrtRatioAX96, sqrtRatioBX96)) {\n    // eslint-disable-next-line no-param-reassign\n    [sqrtRatioAX96, sqrtRatioBX96] = [sqrtRatioBX96, sqrtRatioAX96];\n  }\n\n  const maxLiquidityForAmount0 = useFullPrecision\n    ? maxLiquidityForAmount0Precise\n    : maxLiquidityForAmount0Imprecise;\n\n  if (JSBI.lessThanOrEqual(sqrtRatioCurrentX96, sqrtRatioAX96)) {\n    return maxLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0);\n  }\n  if (JSBI.lessThan(sqrtRatioCurrentX96, sqrtRatioBX96)) {\n    const liquidity0 = maxLiquidityForAmount0(sqrtRatioCurrentX96, sqrtRatioBX96, amount0);\n    const liquidity1 = maxLiquidityForAmount1(sqrtRatioAX96, sqrtRatioCurrentX96, amount1);\n    return JSBI.lessThan(liquidity0, liquidity1) ? liquidity0 : liquidity1;\n  }\n  return maxLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1);\n}\n"]}