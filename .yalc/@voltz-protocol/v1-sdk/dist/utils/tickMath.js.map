{"version":3,"file":"tickMath.js","sourceRoot":"/","sources":["utils/tickMath.ts"],"names":[],"mappings":";;;;;;AAAA,8CAAwB;AACxB,kEAAuC;AACvC,0CAAqD;AACrD,2DAA0D;AAE1D,SAAS,QAAQ,CAAC,GAAS,EAAE,KAAa;IACxC,OAAO,cAAI,CAAC,gBAAgB,CAAC,cAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,cAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,cAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;AACzF,CAAC;AAED,IAAM,GAAG,GAAG,cAAI,CAAC,YAAY,CAAC,cAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,cAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;AAE/D;IACE;;OAEG;IACH;IAAuB,CAAC;IAoBxB;;;OAGG;IACW,2BAAkB,GAAhC,UAAiC,IAAY;QAC3C,IAAA,wBAAS,EACP,IAAI,IAAI,QAAQ,CAAC,QAAQ,IAAI,IAAI,IAAI,QAAQ,CAAC,QAAQ,IAAI,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,EAChF,MAAM,CACP,CAAC;QACF,IAAM,OAAO,GAAW,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QAEpD,IAAI,KAAK,GACP,CAAC,OAAO,GAAG,GAAG,CAAC,IAAI,CAAC;YAClB,CAAC,CAAC,cAAI,CAAC,MAAM,CAAC,oCAAoC,CAAC;YACnD,CAAC,CAAC,cAAI,CAAC,MAAM,CAAC,qCAAqC,CAAC,CAAC;QACzD,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC,IAAI,CAAC;YAAE,KAAK,GAAG,QAAQ,CAAC,KAAK,EAAE,oCAAoC,CAAC,CAAC;QACxF,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC,IAAI,CAAC;YAAE,KAAK,GAAG,QAAQ,CAAC,KAAK,EAAE,oCAAoC,CAAC,CAAC;QACxF,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC,IAAI,CAAC;YAAE,KAAK,GAAG,QAAQ,CAAC,KAAK,EAAE,oCAAoC,CAAC,CAAC;QACxF,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC;YAAE,KAAK,GAAG,QAAQ,CAAC,KAAK,EAAE,oCAAoC,CAAC,CAAC;QACzF,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC;YAAE,KAAK,GAAG,QAAQ,CAAC,KAAK,EAAE,oCAAoC,CAAC,CAAC;QACzF,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC;YAAE,KAAK,GAAG,QAAQ,CAAC,KAAK,EAAE,oCAAoC,CAAC,CAAC;QACzF,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC;YAAE,KAAK,GAAG,QAAQ,CAAC,KAAK,EAAE,oCAAoC,CAAC,CAAC;QACzF,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC;YAAE,KAAK,GAAG,QAAQ,CAAC,KAAK,EAAE,oCAAoC,CAAC,CAAC;QAC1F,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC;YAAE,KAAK,GAAG,QAAQ,CAAC,KAAK,EAAE,oCAAoC,CAAC,CAAC;QAC1F,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC;YAAE,KAAK,GAAG,QAAQ,CAAC,KAAK,EAAE,oCAAoC,CAAC,CAAC;QAC1F,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC;YAAE,KAAK,GAAG,QAAQ,CAAC,KAAK,EAAE,oCAAoC,CAAC,CAAC;QAC1F,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC;YAAE,KAAK,GAAG,QAAQ,CAAC,KAAK,EAAE,oCAAoC,CAAC,CAAC;QAC3F,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC;YAAE,KAAK,GAAG,QAAQ,CAAC,KAAK,EAAE,oCAAoC,CAAC,CAAC;QAC3F,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC;YAAE,KAAK,GAAG,QAAQ,CAAC,KAAK,EAAE,oCAAoC,CAAC,CAAC;QAC3F,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC;YAAE,KAAK,GAAG,QAAQ,CAAC,KAAK,EAAE,oCAAoC,CAAC,CAAC;QAC3F,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC;YAAE,KAAK,GAAG,QAAQ,CAAC,KAAK,EAAE,mCAAmC,CAAC,CAAC;QAC3F,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC;YAAE,KAAK,GAAG,QAAQ,CAAC,KAAK,EAAE,kCAAkC,CAAC,CAAC;QAC1F,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC;YAAE,KAAK,GAAG,QAAQ,CAAC,KAAK,EAAE,gCAAgC,CAAC,CAAC;QACxF,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC;YAAE,KAAK,GAAG,QAAQ,CAAC,KAAK,EAAE,2BAA2B,CAAC,CAAC;QAEnF,IAAI,IAAI,GAAG,CAAC;YAAE,KAAK,GAAG,cAAI,CAAC,MAAM,CAAC,sBAAU,EAAE,KAAK,CAAC,CAAC;QAErD,cAAc;QACd,OAAO,cAAI,CAAC,WAAW,CAAC,cAAI,CAAC,SAAS,CAAC,KAAK,EAAE,GAAG,CAAC,EAAE,gBAAI,CAAC;YACvD,CAAC,CAAC,cAAI,CAAC,GAAG,CAAC,cAAI,CAAC,MAAM,CAAC,KAAK,EAAE,GAAG,CAAC,EAAE,eAAG,CAAC;YACxC,CAAC,CAAC,cAAI,CAAC,MAAM,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;IAC9B,CAAC;IAED;;;;OAIG;IACW,2BAAkB,GAAhC,UAAiC,YAAkB;QACjD,IAAA,wBAAS,EACP,cAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,QAAQ,CAAC,cAAc,CAAC;YAC5D,cAAI,CAAC,QAAQ,CAAC,YAAY,EAAE,QAAQ,CAAC,cAAc,CAAC,EACtD,YAAY,CACb,CAAC;QAEF,IAAM,aAAa,GAAG,cAAI,CAAC,SAAS,CAAC,YAAY,EAAE,cAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;QAEpE,IAAM,GAAG,GAAG,IAAA,uCAAkB,EAAC,aAAa,CAAC,CAAC;QAE9C,IAAI,CAAO,CAAC;QACZ,IAAI,cAAI,CAAC,kBAAkB,CAAC,cAAI,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,cAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE;YAC/D,CAAC,GAAG,cAAI,CAAC,gBAAgB,CAAC,aAAa,EAAE,cAAI,CAAC,MAAM,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC;SAClE;aAAM;YACL,CAAC,GAAG,cAAI,CAAC,SAAS,CAAC,aAAa,EAAE,cAAI,CAAC,MAAM,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC;SAC3D;QAED,IAAI,KAAK,GAAS,cAAI,CAAC,SAAS,CAC9B,cAAI,CAAC,QAAQ,CAAC,cAAI,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,cAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EACjD,cAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAChB,CAAC;QAEF,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;YAC3B,CAAC,GAAG,cAAI,CAAC,gBAAgB,CAAC,cAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,cAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;YACjE,IAAM,CAAC,GAAG,cAAI,CAAC,gBAAgB,CAAC,CAAC,EAAE,cAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;YACrD,KAAK,GAAG,cAAI,CAAC,SAAS,CAAC,KAAK,EAAE,cAAI,CAAC,SAAS,CAAC,CAAC,EAAE,cAAI,CAAC,MAAM,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YACtE,CAAC,GAAG,cAAI,CAAC,gBAAgB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;SACjC;QAED,IAAM,aAAa,GAAG,cAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,cAAI,CAAC,MAAM,CAAC,0BAA0B,CAAC,CAAC,CAAC;QAEpF,IAAM,OAAO,GAAG,cAAI,CAAC,QAAQ,CAC3B,cAAI,CAAC,gBAAgB,CACnB,cAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,cAAI,CAAC,MAAM,CAAC,uCAAuC,CAAC,CAAC,EAClF,cAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CACjB,CACF,CAAC;QACF,IAAM,QAAQ,GAAG,cAAI,CAAC,QAAQ,CAC5B,cAAI,CAAC,gBAAgB,CACnB,cAAI,CAAC,GAAG,CAAC,aAAa,EAAE,cAAI,CAAC,MAAM,CAAC,yCAAyC,CAAC,CAAC,EAC/E,cAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CACjB,CACF,CAAC;QAEF,OAAO,OAAO,KAAK,QAAQ;YACzB,CAAC,CAAC,OAAO;YACT,CAAC,CAAC,cAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,kBAAkB,CAAC,QAAQ,CAAC,EAAE,YAAY,CAAC;gBAC3E,CAAC,CAAC,QAAQ;gBACV,CAAC,CAAC,OAAO,CAAC;IACd,CAAC;IApHD;;OAEG;IACW,iBAAQ,GAAG,CAAC,KAAK,CAAC;IAChC;;OAEG;IACW,iBAAQ,GAAW,CAAC,QAAQ,CAAC,QAAQ,CAAC;IAEpD;;OAEG;IACW,uBAAc,GAAS,cAAI,CAAC,MAAM,CAAC,8BAA8B,CAAC,CAAC;IACjF;;OAEG;IACW,uBAAc,GAAS,cAAI,CAAC,MAAM,CAAC,iCAAiC,CAAC,CAAC;IAqGtF,eAAC;CAAA,AA3HD,IA2HC;AA3HqB,4BAAQ","sourcesContent":["import JSBI from 'jsbi';\nimport invariant from 'tiny-invariant';\nimport { MaxUint256, ONE, ZERO } from '../constants';\nimport { mostSignificantBit } from './mostSignificantBit';\n\nfunction mulShift(val: JSBI, mulBy: string): JSBI {\n  return JSBI.signedRightShift(JSBI.multiply(val, JSBI.BigInt(mulBy)), JSBI.BigInt(128));\n}\n\nconst Q32 = JSBI.exponentiate(JSBI.BigInt(2), JSBI.BigInt(32));\n\nexport abstract class TickMath {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * The minimum tick that can be used on any pool.\n   */\n  public static MIN_TICK = -69100;\n  /**\n   * The maximum tick that can be used on any pool.\n   */\n  public static MAX_TICK: number = -TickMath.MIN_TICK;\n\n  /**\n   * The sqrt ratio corresponding to the minimum tick that could be used on any pool.\n   */\n  public static MIN_SQRT_RATIO: JSBI = JSBI.BigInt('2503036416286949174936592462');\n  /**\n   * The sqrt ratio corresponding to the maximum tick that could be used on any pool.\n   */\n  public static MAX_SQRT_RATIO: JSBI = JSBI.BigInt('2507794810551837817144115957740');\n\n  /**\n   * Returns the sqrt ratio as a Q64.96 for the given tick. The sqrt ratio is computed as sqrt(1.0001)^tick\n   * @param tick the tick for which to compute the sqrt ratio\n   */\n  public static getSqrtRatioAtTick(tick: number): JSBI {\n    invariant(\n      tick >= TickMath.MIN_TICK && tick <= TickMath.MAX_TICK && Number.isInteger(tick),\n      'TICK',\n    );\n    const absTick: number = tick < 0 ? tick * -1 : tick;\n\n    let ratio: JSBI =\n      (absTick & 0x1) != 0\n        ? JSBI.BigInt('0xfffcb933bd6fad37aa2d162d1a594001')\n        : JSBI.BigInt('0x100000000000000000000000000000000');\n    if ((absTick & 0x2) != 0) ratio = mulShift(ratio, '0xfff97272373d413259a46990580e213a');\n    if ((absTick & 0x4) != 0) ratio = mulShift(ratio, '0xfff2e50f5f656932ef12357cf3c7fdcc');\n    if ((absTick & 0x8) != 0) ratio = mulShift(ratio, '0xffe5caca7e10e4e61c3624eaa0941cd0');\n    if ((absTick & 0x10) != 0) ratio = mulShift(ratio, '0xffcb9843d60f6159c9db58835c926644');\n    if ((absTick & 0x20) != 0) ratio = mulShift(ratio, '0xff973b41fa98c081472e6896dfb254c0');\n    if ((absTick & 0x40) != 0) ratio = mulShift(ratio, '0xff2ea16466c96a3843ec78b326b52861');\n    if ((absTick & 0x80) != 0) ratio = mulShift(ratio, '0xfe5dee046a99a2a811c461f1969c3053');\n    if ((absTick & 0x100) != 0) ratio = mulShift(ratio, '0xfcbe86c7900a88aedcffc83b479aa3a4');\n    if ((absTick & 0x200) != 0) ratio = mulShift(ratio, '0xf987a7253ac413176f2b074cf7815e54');\n    if ((absTick & 0x400) != 0) ratio = mulShift(ratio, '0xf3392b0822b70005940c7a398e4b70f3');\n    if ((absTick & 0x800) != 0) ratio = mulShift(ratio, '0xe7159475a2c29b7443b29c7fa6e889d9');\n    if ((absTick & 0x1000) != 0) ratio = mulShift(ratio, '0xd097f3bdfd2022b8845ad8f792aa5825');\n    if ((absTick & 0x2000) != 0) ratio = mulShift(ratio, '0xa9f746462d870fdf8a65dc1f90e061e5');\n    if ((absTick & 0x4000) != 0) ratio = mulShift(ratio, '0x70d869a156d2a1b890bb3df62baf32f7');\n    if ((absTick & 0x8000) != 0) ratio = mulShift(ratio, '0x31be135f97d08fd981231505542fcfa6');\n    if ((absTick & 0x10000) != 0) ratio = mulShift(ratio, '0x9aa508b5b7a84e1c677de54f3e99bc9');\n    if ((absTick & 0x20000) != 0) ratio = mulShift(ratio, '0x5d6af8dedb81196699c329225ee604');\n    if ((absTick & 0x40000) != 0) ratio = mulShift(ratio, '0x2216e584f5fa1ea926041bedfe98');\n    if ((absTick & 0x80000) != 0) ratio = mulShift(ratio, '0x48a170391f7dc42444e8fa2');\n\n    if (tick > 0) ratio = JSBI.divide(MaxUint256, ratio);\n\n    // back to Q96\n    return JSBI.greaterThan(JSBI.remainder(ratio, Q32), ZERO)\n      ? JSBI.add(JSBI.divide(ratio, Q32), ONE)\n      : JSBI.divide(ratio, Q32);\n  }\n\n  /**\n   * Returns the tick corresponding to a given sqrt ratio, s.t. #getSqrtRatioAtTick(tick) <= sqrtRatioX96\n   * and #getSqrtRatioAtTick(tick + 1) > sqrtRatioX96\n   * @param sqrtRatioX96 the sqrt ratio as a Q64.96 for which to compute the tick\n   */\n  public static getTickAtSqrtRatio(sqrtRatioX96: JSBI): number {\n    invariant(\n      JSBI.greaterThanOrEqual(sqrtRatioX96, TickMath.MIN_SQRT_RATIO) &&\n        JSBI.lessThan(sqrtRatioX96, TickMath.MAX_SQRT_RATIO),\n      'SQRT_RATIO',\n    );\n\n    const sqrtRatioX128 = JSBI.leftShift(sqrtRatioX96, JSBI.BigInt(32));\n\n    const msb = mostSignificantBit(sqrtRatioX128);\n\n    let r: JSBI;\n    if (JSBI.greaterThanOrEqual(JSBI.BigInt(msb), JSBI.BigInt(128))) {\n      r = JSBI.signedRightShift(sqrtRatioX128, JSBI.BigInt(msb - 127));\n    } else {\n      r = JSBI.leftShift(sqrtRatioX128, JSBI.BigInt(127 - msb));\n    }\n\n    let log_2: JSBI = JSBI.leftShift(\n      JSBI.subtract(JSBI.BigInt(msb), JSBI.BigInt(128)),\n      JSBI.BigInt(64),\n    );\n\n    for (let i = 0; i < 14; i++) {\n      r = JSBI.signedRightShift(JSBI.multiply(r, r), JSBI.BigInt(127));\n      const f = JSBI.signedRightShift(r, JSBI.BigInt(128));\n      log_2 = JSBI.bitwiseOr(log_2, JSBI.leftShift(f, JSBI.BigInt(63 - i)));\n      r = JSBI.signedRightShift(r, f);\n    }\n\n    const log_sqrt10001 = JSBI.multiply(log_2, JSBI.BigInt('255738958999603826347141'));\n\n    const tickLow = JSBI.toNumber(\n      JSBI.signedRightShift(\n        JSBI.subtract(log_sqrt10001, JSBI.BigInt('3402992956809132418596140100660247210')),\n        JSBI.BigInt(128),\n      ),\n    );\n    const tickHigh = JSBI.toNumber(\n      JSBI.signedRightShift(\n        JSBI.add(log_sqrt10001, JSBI.BigInt('291339464771989622907027621153398088495')),\n        JSBI.BigInt(128),\n      ),\n    );\n\n    return tickLow === tickHigh\n      ? tickLow\n      : JSBI.lessThanOrEqual(TickMath.getSqrtRatioAtTick(tickHigh), sqrtRatioX96)\n      ? tickHigh\n      : tickLow;\n  }\n}\n"]}