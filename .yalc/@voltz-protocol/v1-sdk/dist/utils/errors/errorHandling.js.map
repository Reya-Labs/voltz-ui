{"version":3,"file":"errorHandling.js","sourceRoot":"/","sources":["utils/errors/errorHandling.ts"],"names":[],"mappings":"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","sourcesContent":["import { BigNumber, ethers, utils } from 'ethers';\nimport { abi as FactoryABI } from '../../ABIs/Factory.json';\nimport { sentryTracker } from '../sentry';\nimport { CRITICAL_ERROR_MESSAGE } from './constants';\nimport * as errorJson from './errorMapping.json';\n\nconst iface = new ethers.utils.Interface(FactoryABI);\n\nconst getErrorData = (error: any): string => {\n  try {\n    if (typeof error.error.error.data.data === 'string') {\n      return error.error.error.data.data;\n    }\n  } catch (_) {}\n\n  try {\n    if (typeof error.error.data.originalError.data === 'string') {\n      return error.error.data.originalError.data;\n    }\n  } catch (_) {}\n\n  try {\n    if (typeof error.data.data.data === 'string') {\n      return error.data.data.data;\n    }\n  } catch (_) {}\n\n  try {\n    if (typeof error.data.data === 'string') {\n      return error.data.data;\n    }\n  } catch (_) {}\n\n  try {\n    if (typeof error.error.data === 'string') {\n      return error.error.data;\n    }\n  } catch (_) {}\n\n  try {\n    if (typeof error.data === 'string') {\n      return error.data;\n    }\n  } catch (_) {}\n\n  console.error(`Unknown error type. ${error}`);\n  sentryTracker.captureException(error);\n  sentryTracker.captureMessage(`Unknown error type. ${error}`);\n  throw new Error(CRITICAL_ERROR_MESSAGE);\n};\n\nconst getErrorSignature = (error: any): string => {\n  const reason = getErrorData(error);\n\n  try {\n    if (reason.startsWith('0x08c379a0')) {\n      return 'Error';\n    }\n\n    const decodedError = iface.parseError(reason);\n    const errSig = decodedError.signature.split('(')[0];\n    return errSig;\n  } catch {\n    console.error(`Failing to get error signature. ${error}`);\n    sentryTracker.captureException(error);\n    sentryTracker.captureMessage(`Failing to get error signature. ${error}`);\n    throw new Error(CRITICAL_ERROR_MESSAGE);\n  }\n};\n\nconst getReadableErrorMessageWithoutSentry = (error: any): string => {\n  const errSig = getErrorSignature(error);\n\n  if (errSig === 'Error') {\n    const reason = getErrorData(error);\n\n    try {\n      // Remove the error signature\n      const encodedMessage = reason.slice(0, 2).concat(reason.slice(10));\n\n      const rawErrorMessage = utils.defaultAbiCoder.decode(['string'], encodedMessage)[0];\n\n      if (Object.keys(errorJson).some((e) => e === rawErrorMessage)) {\n        return errorJson[rawErrorMessage as keyof typeof errorJson];\n      }\n    } catch (_) {}\n\n    return CRITICAL_ERROR_MESSAGE;\n  }\n\n  try {\n    return errorJson[errSig as keyof typeof errorJson];\n  } catch (_) {}\n\n  return CRITICAL_ERROR_MESSAGE;\n};\n\nexport const getReadableErrorMessage = (error: any): string => {\n  const message = getReadableErrorMessageWithoutSentry(error);\n  sentryTracker.captureException(error);\n  sentryTracker.captureMessage(`Error message: ${message}`);\n  return message;\n};\n\nexport type RawInfoPostMint = {\n  marginRequirement: BigNumber;\n};\n\nexport const decodeInfoPostMint = (error: any): RawInfoPostMint => {\n  const errSig = getErrorSignature(error);\n  if (errSig === 'MarginLessThanMinimum') {\n    const reason = getErrorData(error);\n    const decodingResult = iface.decodeErrorResult(errSig, reason);\n\n    return {\n      marginRequirement: decodingResult.marginRequirement,\n    };\n  }\n\n  sentryTracker.captureException(error);\n  sentryTracker.captureMessage(`Failing to get info post mint.`);\n  throw new Error(getReadableErrorMessage(error));\n};\n\nexport type RawInfoPostSwap = {\n  marginRequirement: BigNumber;\n  tick: number;\n  fee: BigNumber;\n  availableNotional: BigNumber;\n  fixedTokenDeltaUnbalanced: BigNumber;\n  fixedTokenDelta: BigNumber;\n};\n\nexport const decodeInfoPostSwap = (error: any): RawInfoPostSwap => {\n  const errSig = getErrorSignature(error);\n  if (errSig === 'MarginRequirementNotMet') {\n    const reason = getErrorData(error);\n    const decodingResult = iface.decodeErrorResult(errSig, reason);\n\n    return {\n      marginRequirement: decodingResult.marginRequirement,\n      tick: decodingResult.tick,\n      fee: decodingResult.cumulativeFeeIncurred,\n      availableNotional: decodingResult.variableTokenDelta,\n      fixedTokenDelta: decodingResult.fixedTokenDelta,\n      fixedTokenDeltaUnbalanced: decodingResult.fixedTokenDeltaUnbalanced,\n    };\n  }\n\n  sentryTracker.captureException(error);\n  sentryTracker.captureMessage(`Failing to get info post swap.`);\n  throw new Error(getReadableErrorMessage(error));\n};\n"]}