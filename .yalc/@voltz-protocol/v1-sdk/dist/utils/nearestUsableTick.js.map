{"version":3,"file":"nearestUsableTick.js","sourceRoot":"/","sources":["utils/nearestUsableTick.ts"],"names":[],"mappings":";;;;;;AAAA,kEAAuC;AACvC,uCAAsC;AAEtC;;;;GAIG;AACH,SAAgB,iBAAiB,CAAC,IAAY,EAAE,WAAmB;IACjE,IAAA,wBAAS,EAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,SAAS,CAAC,WAAW,CAAC,EAAE,UAAU,CAAC,CAAC;IAC/E,IAAA,wBAAS,EAAC,WAAW,GAAG,CAAC,EAAE,cAAc,CAAC,CAAC;IAC3C,IAAA,wBAAS,EAAC,IAAI,IAAI,mBAAQ,CAAC,QAAQ,IAAI,IAAI,IAAI,mBAAQ,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;IAChF,IAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,WAAW,CAAC,GAAG,WAAW,CAAC;IAC7D,IAAI,OAAO,GAAG,mBAAQ,CAAC,QAAQ;QAAE,OAAO,OAAO,GAAG,WAAW,CAAC;IAC9D,IAAI,OAAO,GAAG,mBAAQ,CAAC,QAAQ;QAAE,OAAO,OAAO,GAAG,WAAW,CAAC;IAC9D,OAAO,OAAO,CAAC;AACjB,CAAC;AARD,8CAQC","sourcesContent":["import invariant from 'tiny-invariant';\nimport { TickMath } from './tickMath';\n\n/**\n * Returns the closest tick that is nearest a given tick and usable for the given tick spacing\n * @param tick the target tick\n * @param tickSpacing the spacing of the pool\n */\nexport function nearestUsableTick(tick: number, tickSpacing: number) {\n  invariant(Number.isInteger(tick) && Number.isInteger(tickSpacing), 'INTEGERS');\n  invariant(tickSpacing > 0, 'TICK_SPACING');\n  invariant(tick >= TickMath.MIN_TICK && tick <= TickMath.MAX_TICK, 'TICK_BOUND');\n  const rounded = Math.round(tick / tickSpacing) * tickSpacing;\n  if (rounded < TickMath.MIN_TICK) return rounded + tickSpacing;\n  if (rounded > TickMath.MAX_TICK) return rounded - tickSpacing;\n  return rounded;\n}\n"]}