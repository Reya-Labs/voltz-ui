{"version":3,"file":"tickList.js","sourceRoot":"/","sources":["utils/tickList.ts"],"names":[],"mappings":"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","sourcesContent":["import JSBI from 'jsbi';\nimport invariant from 'tiny-invariant';\nimport { Tick } from '../entities/tick';\nimport { ZERO } from '../constants';\nimport { isSorted } from './isSorted';\n\nfunction tickComparator(a: Tick, b: Tick) {\n  return a.index - b.index;\n}\n\n/**\n * Utility methods for interacting with sorted lists of ticks\n */\nexport abstract class TickList {\n  /**\n   * Cannot be constructed\n   */\n  private constructor() {}\n\n  public static validateList(ticks: Tick[], tickSpacing: number) {\n    invariant(tickSpacing > 0, 'TICK_SPACING_NONZERO');\n    // ensure ticks are spaced appropriately\n    invariant(\n      ticks.every(({ index }) => index % tickSpacing === 0),\n      'TICK_SPACING',\n    );\n\n    // ensure tick liquidity deltas sum to 0\n    invariant(\n      JSBI.equal(\n        ticks.reduce((accumulator, { liquidityNet }) => JSBI.add(accumulator, liquidityNet), ZERO),\n        ZERO,\n      ),\n      'ZERO_NET',\n    );\n\n    invariant(isSorted(ticks, tickComparator), 'SORTED');\n  }\n\n  public static isBelowSmallest(ticks: readonly Tick[], tick: number): boolean {\n    invariant(ticks.length > 0, 'LENGTH');\n    return tick < ticks[0].index;\n  }\n\n  public static isAtOrAboveLargest(ticks: readonly Tick[], tick: number): boolean {\n    invariant(ticks.length > 0, 'LENGTH');\n    return tick >= ticks[ticks.length - 1].index;\n  }\n\n  public static getTick(ticks: readonly Tick[], index: number): Tick {\n    const tick = ticks[this.binarySearch(ticks, index)];\n    invariant(tick.index === index, 'NOT_CONTAINED');\n    return tick;\n  }\n\n  /**\n   * Finds the largest tick in the list of ticks that is less than or equal to tick\n   * @param ticks list of ticks\n   * @param tick tick to find the largest tick that is less than or equal to tick\n   * @private\n   */\n  private static binarySearch(ticks: readonly Tick[], tick: number): number {\n    invariant(!this.isBelowSmallest(ticks, tick), 'BELOW_SMALLEST');\n\n    let l = 0;\n    let r = ticks.length - 1;\n    let i;\n    while (true) {\n      i = Math.floor((l + r) / 2);\n\n      if (ticks[i].index <= tick && (i === ticks.length - 1 || ticks[i + 1].index > tick)) {\n        return i;\n      }\n\n      if (ticks[i].index < tick) {\n        l = i + 1;\n      } else {\n        r = i - 1;\n      }\n    }\n  }\n\n  public static nextInitializedTick(ticks: readonly Tick[], tick: number, lte: boolean): Tick {\n    if (lte) {\n      invariant(!TickList.isBelowSmallest(ticks, tick), 'BELOW_SMALLEST');\n      if (TickList.isAtOrAboveLargest(ticks, tick)) {\n        return ticks[ticks.length - 1];\n      }\n      const index = this.binarySearch(ticks, tick);\n      return ticks[index];\n    }\n    invariant(!this.isAtOrAboveLargest(ticks, tick), 'AT_OR_ABOVE_LARGEST');\n    if (this.isBelowSmallest(ticks, tick)) {\n      return ticks[0];\n    }\n    const index = this.binarySearch(ticks, tick);\n    return ticks[index + 1];\n  }\n\n  public static nextInitializedTickWithinOneWord(\n    ticks: readonly Tick[],\n    tick: number,\n    lte: boolean,\n    tickSpacing: number,\n  ): [number, boolean] {\n    const compressed = Math.floor(tick / tickSpacing); // matches rounding in the code\n\n    if (lte) {\n      const wordPos = compressed >> 8;\n      const minimum = (wordPos << 8) * tickSpacing;\n\n      if (TickList.isBelowSmallest(ticks, tick)) {\n        return [minimum, false];\n      }\n\n      const index = TickList.nextInitializedTick(ticks, tick, lte).index;\n      const nextInitializedTick = Math.max(minimum, index);\n      return [nextInitializedTick, nextInitializedTick === index];\n    }\n    const wordPos = (compressed + 1) >> 8;\n    const maximum = (((wordPos + 1) << 8) - 1) * tickSpacing;\n\n    if (this.isAtOrAboveLargest(ticks, tick)) {\n      return [maximum, false];\n    }\n\n    const index = this.nextInitializedTick(ticks, tick, lte).index;\n    const nextInitializedTick = Math.min(maximum, index);\n    return [nextInitializedTick, nextInitializedTick === index];\n  }\n}\n"]}