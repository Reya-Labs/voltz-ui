{"version":3,"file":"IERC5192.js","sourceRoot":"/","sources":["typechain-sbt/contracts/IERC5192.ts"],"names":[],"mappings":"","sourcesContent":["/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport type {\n  BaseContract,\n  BigNumber,\n  BigNumberish,\n  BytesLike,\n  CallOverrides,\n  PopulatedTransaction,\n  Signer,\n  utils,\n} from \"ethers\";\nimport type {\n  FunctionFragment,\n  Result,\n  EventFragment,\n} from \"@ethersproject/abi\";\nimport type { Listener, Provider } from \"@ethersproject/providers\";\nimport type {\n  TypedEventFilter,\n  TypedEvent,\n  TypedListener,\n  OnEvent,\n  PromiseOrValue,\n} from \"../common\";\n\nexport interface IERC5192Interface extends utils.Interface {\n  functions: {\n    \"locked(uint256)\": FunctionFragment;\n  };\n\n  getFunction(nameOrSignatureOrTopic: \"locked\"): FunctionFragment;\n\n  encodeFunctionData(\n    functionFragment: \"locked\",\n    values: [PromiseOrValue<BigNumberish>]\n  ): string;\n\n  decodeFunctionResult(functionFragment: \"locked\", data: BytesLike): Result;\n\n  events: {\n    \"Locked(uint256)\": EventFragment;\n    \"Unlocked(uint256)\": EventFragment;\n  };\n\n  getEvent(nameOrSignatureOrTopic: \"Locked\"): EventFragment;\n  getEvent(nameOrSignatureOrTopic: \"Unlocked\"): EventFragment;\n}\n\nexport interface LockedEventObject {\n  tokenId: BigNumber;\n}\nexport type LockedEvent = TypedEvent<[BigNumber], LockedEventObject>;\n\nexport type LockedEventFilter = TypedEventFilter<LockedEvent>;\n\nexport interface UnlockedEventObject {\n  tokenId: BigNumber;\n}\nexport type UnlockedEvent = TypedEvent<[BigNumber], UnlockedEventObject>;\n\nexport type UnlockedEventFilter = TypedEventFilter<UnlockedEvent>;\n\nexport interface IERC5192 extends BaseContract {\n  connect(signerOrProvider: Signer | Provider | string): this;\n  attach(addressOrName: string): this;\n  deployed(): Promise<this>;\n\n  interface: IERC5192Interface;\n\n  queryFilter<TEvent extends TypedEvent>(\n    event: TypedEventFilter<TEvent>,\n    fromBlockOrBlockhash?: string | number | undefined,\n    toBlock?: string | number | undefined\n  ): Promise<Array<TEvent>>;\n\n  listeners<TEvent extends TypedEvent>(\n    eventFilter?: TypedEventFilter<TEvent>\n  ): Array<TypedListener<TEvent>>;\n  listeners(eventName?: string): Array<Listener>;\n  removeAllListeners<TEvent extends TypedEvent>(\n    eventFilter: TypedEventFilter<TEvent>\n  ): this;\n  removeAllListeners(eventName?: string): this;\n  off: OnEvent<this>;\n  on: OnEvent<this>;\n  once: OnEvent<this>;\n  removeListener: OnEvent<this>;\n\n  functions: {\n    locked(\n      tokenId: PromiseOrValue<BigNumberish>,\n      overrides?: CallOverrides\n    ): Promise<[boolean]>;\n  };\n\n  locked(\n    tokenId: PromiseOrValue<BigNumberish>,\n    overrides?: CallOverrides\n  ): Promise<boolean>;\n\n  callStatic: {\n    locked(\n      tokenId: PromiseOrValue<BigNumberish>,\n      overrides?: CallOverrides\n    ): Promise<boolean>;\n  };\n\n  filters: {\n    \"Locked(uint256)\"(tokenId?: null): LockedEventFilter;\n    Locked(tokenId?: null): LockedEventFilter;\n\n    \"Unlocked(uint256)\"(tokenId?: null): UnlockedEventFilter;\n    Unlocked(tokenId?: null): UnlockedEventFilter;\n  };\n\n  estimateGas: {\n    locked(\n      tokenId: PromiseOrValue<BigNumberish>,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n  };\n\n  populateTransaction: {\n    locked(\n      tokenId: PromiseOrValue<BigNumberish>,\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n  };\n}\n"]}