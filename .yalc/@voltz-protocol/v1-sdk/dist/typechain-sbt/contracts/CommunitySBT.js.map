{"version":3,"file":"CommunitySBT.js","sourceRoot":"/","sources":["typechain-sbt/contracts/CommunitySBT.ts"],"names":[],"mappings":"","sourcesContent":["/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport type {\n  BaseContract,\n  BigNumber,\n  BigNumberish,\n  BytesLike,\n  CallOverrides,\n  ContractTransaction,\n  Overrides,\n  PopulatedTransaction,\n  Signer,\n  utils,\n} from \"ethers\";\nimport type {\n  FunctionFragment,\n  Result,\n  EventFragment,\n} from \"@ethersproject/abi\";\nimport type { Listener, Provider } from \"@ethersproject/providers\";\nimport type {\n  TypedEventFilter,\n  TypedEvent,\n  TypedListener,\n  OnEvent,\n  PromiseOrValue,\n} from \"../common\";\n\nexport declare namespace CommunitySBT {\n  export type RootInfoStruct = {\n    merkleRoot: PromiseOrValue<BytesLike>;\n    baseMetadataURI: PromiseOrValue<string>;\n    startTimestamp: PromiseOrValue<BigNumberish>;\n    endTimestamp: PromiseOrValue<BigNumberish>;\n  };\n\n  export type RootInfoStructOutput = [string, string, number, number] & {\n    merkleRoot: string;\n    baseMetadataURI: string;\n    startTimestamp: number;\n    endTimestamp: number;\n  };\n\n  export type LeafInfoStruct = {\n    account: PromiseOrValue<string>;\n    badgeId: PromiseOrValue<BigNumberish>;\n  };\n\n  export type LeafInfoStructOutput = [string, BigNumber] & {\n    account: string;\n    badgeId: BigNumber;\n  };\n}\n\nexport interface CommunitySBTInterface extends utils.Interface {\n  functions: {\n    \"addNewRoot((bytes32,string,uint32,uint32))\": FunctionFragment;\n    \"approve(address,uint256)\": FunctionFragment;\n    \"balanceOf(address)\": FunctionFragment;\n    \"getApproved(uint256)\": FunctionFragment;\n    \"getTokenIdHash(address,bytes32,uint96)\": FunctionFragment;\n    \"invalidateRoot(bytes32)\": FunctionFragment;\n    \"isApprovedForAll(address,address)\": FunctionFragment;\n    \"locked(uint256)\": FunctionFragment;\n    \"multiRedeem((address,uint96)[],bytes32[][],bytes32[])\": FunctionFragment;\n    \"name()\": FunctionFragment;\n    \"owner()\": FunctionFragment;\n    \"ownerOf(uint256)\": FunctionFragment;\n    \"redeem((address,uint96),bytes32[],bytes32)\": FunctionFragment;\n    \"renounceOwnership()\": FunctionFragment;\n    \"rootData(bytes32)\": FunctionFragment;\n    \"safeTransferFrom(address,address,uint256)\": FunctionFragment;\n    \"safeTransferFrom(address,address,uint256,bytes)\": FunctionFragment;\n    \"setApprovalForAll(address,bool)\": FunctionFragment;\n    \"supportsInterface(bytes4)\": FunctionFragment;\n    \"symbol()\": FunctionFragment;\n    \"tokenData(uint256)\": FunctionFragment;\n    \"tokenURI(uint256)\": FunctionFragment;\n    \"totalSupply()\": FunctionFragment;\n    \"transferFrom(address,address,uint256)\": FunctionFragment;\n    \"transferOwnership(address)\": FunctionFragment;\n  };\n\n  getFunction(\n    nameOrSignatureOrTopic:\n      | \"addNewRoot\"\n      | \"approve\"\n      | \"balanceOf\"\n      | \"getApproved\"\n      | \"getTokenIdHash\"\n      | \"invalidateRoot\"\n      | \"isApprovedForAll\"\n      | \"locked\"\n      | \"multiRedeem\"\n      | \"name\"\n      | \"owner\"\n      | \"ownerOf\"\n      | \"redeem\"\n      | \"renounceOwnership\"\n      | \"rootData\"\n      | \"safeTransferFrom(address,address,uint256)\"\n      | \"safeTransferFrom(address,address,uint256,bytes)\"\n      | \"setApprovalForAll\"\n      | \"supportsInterface\"\n      | \"symbol\"\n      | \"tokenData\"\n      | \"tokenURI\"\n      | \"totalSupply\"\n      | \"transferFrom\"\n      | \"transferOwnership\"\n  ): FunctionFragment;\n\n  encodeFunctionData(\n    functionFragment: \"addNewRoot\",\n    values: [CommunitySBT.RootInfoStruct]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"approve\",\n    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"balanceOf\",\n    values: [PromiseOrValue<string>]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"getApproved\",\n    values: [PromiseOrValue<BigNumberish>]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"getTokenIdHash\",\n    values: [\n      PromiseOrValue<string>,\n      PromiseOrValue<BytesLike>,\n      PromiseOrValue<BigNumberish>\n    ]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"invalidateRoot\",\n    values: [PromiseOrValue<BytesLike>]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"isApprovedForAll\",\n    values: [PromiseOrValue<string>, PromiseOrValue<string>]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"locked\",\n    values: [PromiseOrValue<BigNumberish>]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"multiRedeem\",\n    values: [\n      CommunitySBT.LeafInfoStruct[],\n      PromiseOrValue<BytesLike>[][],\n      PromiseOrValue<BytesLike>[]\n    ]\n  ): string;\n  encodeFunctionData(functionFragment: \"name\", values?: undefined): string;\n  encodeFunctionData(functionFragment: \"owner\", values?: undefined): string;\n  encodeFunctionData(\n    functionFragment: \"ownerOf\",\n    values: [PromiseOrValue<BigNumberish>]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"redeem\",\n    values: [\n      CommunitySBT.LeafInfoStruct,\n      PromiseOrValue<BytesLike>[],\n      PromiseOrValue<BytesLike>\n    ]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"renounceOwnership\",\n    values?: undefined\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"rootData\",\n    values: [PromiseOrValue<BytesLike>]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"safeTransferFrom(address,address,uint256)\",\n    values: [\n      PromiseOrValue<string>,\n      PromiseOrValue<string>,\n      PromiseOrValue<BigNumberish>\n    ]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"safeTransferFrom(address,address,uint256,bytes)\",\n    values: [\n      PromiseOrValue<string>,\n      PromiseOrValue<string>,\n      PromiseOrValue<BigNumberish>,\n      PromiseOrValue<BytesLike>\n    ]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"setApprovalForAll\",\n    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"supportsInterface\",\n    values: [PromiseOrValue<BytesLike>]\n  ): string;\n  encodeFunctionData(functionFragment: \"symbol\", values?: undefined): string;\n  encodeFunctionData(\n    functionFragment: \"tokenData\",\n    values: [PromiseOrValue<BigNumberish>]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"tokenURI\",\n    values: [PromiseOrValue<BigNumberish>]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"totalSupply\",\n    values?: undefined\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"transferFrom\",\n    values: [\n      PromiseOrValue<string>,\n      PromiseOrValue<string>,\n      PromiseOrValue<BigNumberish>\n    ]\n  ): string;\n  encodeFunctionData(\n    functionFragment: \"transferOwnership\",\n    values: [PromiseOrValue<string>]\n  ): string;\n\n  decodeFunctionResult(functionFragment: \"addNewRoot\", data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: \"approve\", data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: \"balanceOf\", data: BytesLike): Result;\n  decodeFunctionResult(\n    functionFragment: \"getApproved\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"getTokenIdHash\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"invalidateRoot\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"isApprovedForAll\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(functionFragment: \"locked\", data: BytesLike): Result;\n  decodeFunctionResult(\n    functionFragment: \"multiRedeem\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(functionFragment: \"name\", data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: \"owner\", data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: \"ownerOf\", data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: \"redeem\", data: BytesLike): Result;\n  decodeFunctionResult(\n    functionFragment: \"renounceOwnership\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(functionFragment: \"rootData\", data: BytesLike): Result;\n  decodeFunctionResult(\n    functionFragment: \"safeTransferFrom(address,address,uint256)\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"safeTransferFrom(address,address,uint256,bytes)\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"setApprovalForAll\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"supportsInterface\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(functionFragment: \"symbol\", data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: \"tokenData\", data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: \"tokenURI\", data: BytesLike): Result;\n  decodeFunctionResult(\n    functionFragment: \"totalSupply\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"transferFrom\",\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: \"transferOwnership\",\n    data: BytesLike\n  ): Result;\n\n  events: {\n    \"Approval(address,address,uint256)\": EventFragment;\n    \"ApprovalForAll(address,address,bool)\": EventFragment;\n    \"InvalidatedRoot(bytes32)\": EventFragment;\n    \"Locked(uint256)\": EventFragment;\n    \"NewValidRoot(tuple)\": EventFragment;\n    \"OwnershipTransferred(address,address)\": EventFragment;\n    \"RedeemCommunitySBT(tuple,uint256)\": EventFragment;\n    \"Transfer(address,address,uint256)\": EventFragment;\n    \"Unlocked(uint256)\": EventFragment;\n  };\n\n  getEvent(nameOrSignatureOrTopic: \"Approval\"): EventFragment;\n  getEvent(nameOrSignatureOrTopic: \"ApprovalForAll\"): EventFragment;\n  getEvent(nameOrSignatureOrTopic: \"InvalidatedRoot\"): EventFragment;\n  getEvent(nameOrSignatureOrTopic: \"Locked\"): EventFragment;\n  getEvent(nameOrSignatureOrTopic: \"NewValidRoot\"): EventFragment;\n  getEvent(nameOrSignatureOrTopic: \"OwnershipTransferred\"): EventFragment;\n  getEvent(nameOrSignatureOrTopic: \"RedeemCommunitySBT\"): EventFragment;\n  getEvent(nameOrSignatureOrTopic: \"Transfer\"): EventFragment;\n  getEvent(nameOrSignatureOrTopic: \"Unlocked\"): EventFragment;\n}\n\nexport interface ApprovalEventObject {\n  owner: string;\n  approved: string;\n  tokenId: BigNumber;\n}\nexport type ApprovalEvent = TypedEvent<\n  [string, string, BigNumber],\n  ApprovalEventObject\n>;\n\nexport type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;\n\nexport interface ApprovalForAllEventObject {\n  owner: string;\n  operator: string;\n  approved: boolean;\n}\nexport type ApprovalForAllEvent = TypedEvent<\n  [string, string, boolean],\n  ApprovalForAllEventObject\n>;\n\nexport type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;\n\nexport interface InvalidatedRootEventObject {\n  merkleRoot: string;\n}\nexport type InvalidatedRootEvent = TypedEvent<\n  [string],\n  InvalidatedRootEventObject\n>;\n\nexport type InvalidatedRootEventFilter = TypedEventFilter<InvalidatedRootEvent>;\n\nexport interface LockedEventObject {\n  tokenId: BigNumber;\n}\nexport type LockedEvent = TypedEvent<[BigNumber], LockedEventObject>;\n\nexport type LockedEventFilter = TypedEventFilter<LockedEvent>;\n\nexport interface NewValidRootEventObject {\n  rootInfo: CommunitySBT.RootInfoStructOutput;\n}\nexport type NewValidRootEvent = TypedEvent<\n  [CommunitySBT.RootInfoStructOutput],\n  NewValidRootEventObject\n>;\n\nexport type NewValidRootEventFilter = TypedEventFilter<NewValidRootEvent>;\n\nexport interface OwnershipTransferredEventObject {\n  previousOwner: string;\n  newOwner: string;\n}\nexport type OwnershipTransferredEvent = TypedEvent<\n  [string, string],\n  OwnershipTransferredEventObject\n>;\n\nexport type OwnershipTransferredEventFilter =\n  TypedEventFilter<OwnershipTransferredEvent>;\n\nexport interface RedeemCommunitySBTEventObject {\n  leafInfo: CommunitySBT.LeafInfoStructOutput;\n  tokenId: BigNumber;\n}\nexport type RedeemCommunitySBTEvent = TypedEvent<\n  [CommunitySBT.LeafInfoStructOutput, BigNumber],\n  RedeemCommunitySBTEventObject\n>;\n\nexport type RedeemCommunitySBTEventFilter =\n  TypedEventFilter<RedeemCommunitySBTEvent>;\n\nexport interface TransferEventObject {\n  from: string;\n  to: string;\n  tokenId: BigNumber;\n}\nexport type TransferEvent = TypedEvent<\n  [string, string, BigNumber],\n  TransferEventObject\n>;\n\nexport type TransferEventFilter = TypedEventFilter<TransferEvent>;\n\nexport interface UnlockedEventObject {\n  tokenId: BigNumber;\n}\nexport type UnlockedEvent = TypedEvent<[BigNumber], UnlockedEventObject>;\n\nexport type UnlockedEventFilter = TypedEventFilter<UnlockedEvent>;\n\nexport interface CommunitySBT extends BaseContract {\n  connect(signerOrProvider: Signer | Provider | string): this;\n  attach(addressOrName: string): this;\n  deployed(): Promise<this>;\n\n  interface: CommunitySBTInterface;\n\n  queryFilter<TEvent extends TypedEvent>(\n    event: TypedEventFilter<TEvent>,\n    fromBlockOrBlockhash?: string | number | undefined,\n    toBlock?: string | number | undefined\n  ): Promise<Array<TEvent>>;\n\n  listeners<TEvent extends TypedEvent>(\n    eventFilter?: TypedEventFilter<TEvent>\n  ): Array<TypedListener<TEvent>>;\n  listeners(eventName?: string): Array<Listener>;\n  removeAllListeners<TEvent extends TypedEvent>(\n    eventFilter: TypedEventFilter<TEvent>\n  ): this;\n  removeAllListeners(eventName?: string): this;\n  off: OnEvent<this>;\n  on: OnEvent<this>;\n  once: OnEvent<this>;\n  removeListener: OnEvent<this>;\n\n  functions: {\n    addNewRoot(\n      rootInfo: CommunitySBT.RootInfoStruct,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<ContractTransaction>;\n\n    approve(\n      to: PromiseOrValue<string>,\n      tokenId: PromiseOrValue<BigNumberish>,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<ContractTransaction>;\n\n    balanceOf(\n      owner: PromiseOrValue<string>,\n      overrides?: CallOverrides\n    ): Promise<[BigNumber]>;\n\n    getApproved(\n      tokenId: PromiseOrValue<BigNumberish>,\n      overrides?: CallOverrides\n    ): Promise<[string]>;\n\n    getTokenIdHash(\n      account: PromiseOrValue<string>,\n      merkleRoot: PromiseOrValue<BytesLike>,\n      badgeId: PromiseOrValue<BigNumberish>,\n      overrides?: CallOverrides\n    ): Promise<[string]>;\n\n    invalidateRoot(\n      merkleRoot: PromiseOrValue<BytesLike>,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<ContractTransaction>;\n\n    isApprovedForAll(\n      owner: PromiseOrValue<string>,\n      operator: PromiseOrValue<string>,\n      overrides?: CallOverrides\n    ): Promise<[boolean]>;\n\n    locked(\n      tokenId: PromiseOrValue<BigNumberish>,\n      overrides?: CallOverrides\n    ): Promise<[boolean]>;\n\n    multiRedeem(\n      leafInfos: CommunitySBT.LeafInfoStruct[],\n      proofs: PromiseOrValue<BytesLike>[][],\n      merkleRoots: PromiseOrValue<BytesLike>[],\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<ContractTransaction>;\n\n    name(overrides?: CallOverrides): Promise<[string]>;\n\n    owner(overrides?: CallOverrides): Promise<[string]>;\n\n    ownerOf(\n      tokenId: PromiseOrValue<BigNumberish>,\n      overrides?: CallOverrides\n    ): Promise<[string]>;\n\n    redeem(\n      leafInfo: CommunitySBT.LeafInfoStruct,\n      proof: PromiseOrValue<BytesLike>[],\n      merkleRoot: PromiseOrValue<BytesLike>,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<ContractTransaction>;\n\n    renounceOwnership(\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<ContractTransaction>;\n\n    rootData(\n      arg0: PromiseOrValue<BytesLike>,\n      overrides?: CallOverrides\n    ): Promise<[boolean, string] & { isValid: boolean; metadataURI: string }>;\n\n    \"safeTransferFrom(address,address,uint256)\"(\n      from: PromiseOrValue<string>,\n      to: PromiseOrValue<string>,\n      tokenId: PromiseOrValue<BigNumberish>,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<ContractTransaction>;\n\n    \"safeTransferFrom(address,address,uint256,bytes)\"(\n      from: PromiseOrValue<string>,\n      to: PromiseOrValue<string>,\n      tokenId: PromiseOrValue<BigNumberish>,\n      data: PromiseOrValue<BytesLike>,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<ContractTransaction>;\n\n    setApprovalForAll(\n      operator: PromiseOrValue<string>,\n      approved: PromiseOrValue<boolean>,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<ContractTransaction>;\n\n    supportsInterface(\n      interfaceId: PromiseOrValue<BytesLike>,\n      overrides?: CallOverrides\n    ): Promise<[boolean]>;\n\n    symbol(overrides?: CallOverrides): Promise<[string]>;\n\n    tokenData(\n      arg0: PromiseOrValue<BigNumberish>,\n      overrides?: CallOverrides\n    ): Promise<\n      [BigNumber, string] & { badgeId: BigNumber; merkleRoot: string }\n    >;\n\n    tokenURI(\n      tokenId: PromiseOrValue<BigNumberish>,\n      overrides?: CallOverrides\n    ): Promise<[string]>;\n\n    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;\n\n    transferFrom(\n      from: PromiseOrValue<string>,\n      to: PromiseOrValue<string>,\n      tokenId: PromiseOrValue<BigNumberish>,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<ContractTransaction>;\n\n    transferOwnership(\n      newOwner: PromiseOrValue<string>,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<ContractTransaction>;\n  };\n\n  addNewRoot(\n    rootInfo: CommunitySBT.RootInfoStruct,\n    overrides?: Overrides & { from?: PromiseOrValue<string> }\n  ): Promise<ContractTransaction>;\n\n  approve(\n    to: PromiseOrValue<string>,\n    tokenId: PromiseOrValue<BigNumberish>,\n    overrides?: Overrides & { from?: PromiseOrValue<string> }\n  ): Promise<ContractTransaction>;\n\n  balanceOf(\n    owner: PromiseOrValue<string>,\n    overrides?: CallOverrides\n  ): Promise<BigNumber>;\n\n  getApproved(\n    tokenId: PromiseOrValue<BigNumberish>,\n    overrides?: CallOverrides\n  ): Promise<string>;\n\n  getTokenIdHash(\n    account: PromiseOrValue<string>,\n    merkleRoot: PromiseOrValue<BytesLike>,\n    badgeId: PromiseOrValue<BigNumberish>,\n    overrides?: CallOverrides\n  ): Promise<string>;\n\n  invalidateRoot(\n    merkleRoot: PromiseOrValue<BytesLike>,\n    overrides?: Overrides & { from?: PromiseOrValue<string> }\n  ): Promise<ContractTransaction>;\n\n  isApprovedForAll(\n    owner: PromiseOrValue<string>,\n    operator: PromiseOrValue<string>,\n    overrides?: CallOverrides\n  ): Promise<boolean>;\n\n  locked(\n    tokenId: PromiseOrValue<BigNumberish>,\n    overrides?: CallOverrides\n  ): Promise<boolean>;\n\n  multiRedeem(\n    leafInfos: CommunitySBT.LeafInfoStruct[],\n    proofs: PromiseOrValue<BytesLike>[][],\n    merkleRoots: PromiseOrValue<BytesLike>[],\n    overrides?: Overrides & { from?: PromiseOrValue<string> }\n  ): Promise<ContractTransaction>;\n\n  name(overrides?: CallOverrides): Promise<string>;\n\n  owner(overrides?: CallOverrides): Promise<string>;\n\n  ownerOf(\n    tokenId: PromiseOrValue<BigNumberish>,\n    overrides?: CallOverrides\n  ): Promise<string>;\n\n  redeem(\n    leafInfo: CommunitySBT.LeafInfoStruct,\n    proof: PromiseOrValue<BytesLike>[],\n    merkleRoot: PromiseOrValue<BytesLike>,\n    overrides?: Overrides & { from?: PromiseOrValue<string> }\n  ): Promise<ContractTransaction>;\n\n  renounceOwnership(\n    overrides?: Overrides & { from?: PromiseOrValue<string> }\n  ): Promise<ContractTransaction>;\n\n  rootData(\n    arg0: PromiseOrValue<BytesLike>,\n    overrides?: CallOverrides\n  ): Promise<[boolean, string] & { isValid: boolean; metadataURI: string }>;\n\n  \"safeTransferFrom(address,address,uint256)\"(\n    from: PromiseOrValue<string>,\n    to: PromiseOrValue<string>,\n    tokenId: PromiseOrValue<BigNumberish>,\n    overrides?: Overrides & { from?: PromiseOrValue<string> }\n  ): Promise<ContractTransaction>;\n\n  \"safeTransferFrom(address,address,uint256,bytes)\"(\n    from: PromiseOrValue<string>,\n    to: PromiseOrValue<string>,\n    tokenId: PromiseOrValue<BigNumberish>,\n    data: PromiseOrValue<BytesLike>,\n    overrides?: Overrides & { from?: PromiseOrValue<string> }\n  ): Promise<ContractTransaction>;\n\n  setApprovalForAll(\n    operator: PromiseOrValue<string>,\n    approved: PromiseOrValue<boolean>,\n    overrides?: Overrides & { from?: PromiseOrValue<string> }\n  ): Promise<ContractTransaction>;\n\n  supportsInterface(\n    interfaceId: PromiseOrValue<BytesLike>,\n    overrides?: CallOverrides\n  ): Promise<boolean>;\n\n  symbol(overrides?: CallOverrides): Promise<string>;\n\n  tokenData(\n    arg0: PromiseOrValue<BigNumberish>,\n    overrides?: CallOverrides\n  ): Promise<[BigNumber, string] & { badgeId: BigNumber; merkleRoot: string }>;\n\n  tokenURI(\n    tokenId: PromiseOrValue<BigNumberish>,\n    overrides?: CallOverrides\n  ): Promise<string>;\n\n  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;\n\n  transferFrom(\n    from: PromiseOrValue<string>,\n    to: PromiseOrValue<string>,\n    tokenId: PromiseOrValue<BigNumberish>,\n    overrides?: Overrides & { from?: PromiseOrValue<string> }\n  ): Promise<ContractTransaction>;\n\n  transferOwnership(\n    newOwner: PromiseOrValue<string>,\n    overrides?: Overrides & { from?: PromiseOrValue<string> }\n  ): Promise<ContractTransaction>;\n\n  callStatic: {\n    addNewRoot(\n      rootInfo: CommunitySBT.RootInfoStruct,\n      overrides?: CallOverrides\n    ): Promise<void>;\n\n    approve(\n      to: PromiseOrValue<string>,\n      tokenId: PromiseOrValue<BigNumberish>,\n      overrides?: CallOverrides\n    ): Promise<void>;\n\n    balanceOf(\n      owner: PromiseOrValue<string>,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    getApproved(\n      tokenId: PromiseOrValue<BigNumberish>,\n      overrides?: CallOverrides\n    ): Promise<string>;\n\n    getTokenIdHash(\n      account: PromiseOrValue<string>,\n      merkleRoot: PromiseOrValue<BytesLike>,\n      badgeId: PromiseOrValue<BigNumberish>,\n      overrides?: CallOverrides\n    ): Promise<string>;\n\n    invalidateRoot(\n      merkleRoot: PromiseOrValue<BytesLike>,\n      overrides?: CallOverrides\n    ): Promise<void>;\n\n    isApprovedForAll(\n      owner: PromiseOrValue<string>,\n      operator: PromiseOrValue<string>,\n      overrides?: CallOverrides\n    ): Promise<boolean>;\n\n    locked(\n      tokenId: PromiseOrValue<BigNumberish>,\n      overrides?: CallOverrides\n    ): Promise<boolean>;\n\n    multiRedeem(\n      leafInfos: CommunitySBT.LeafInfoStruct[],\n      proofs: PromiseOrValue<BytesLike>[][],\n      merkleRoots: PromiseOrValue<BytesLike>[],\n      overrides?: CallOverrides\n    ): Promise<BigNumber[]>;\n\n    name(overrides?: CallOverrides): Promise<string>;\n\n    owner(overrides?: CallOverrides): Promise<string>;\n\n    ownerOf(\n      tokenId: PromiseOrValue<BigNumberish>,\n      overrides?: CallOverrides\n    ): Promise<string>;\n\n    redeem(\n      leafInfo: CommunitySBT.LeafInfoStruct,\n      proof: PromiseOrValue<BytesLike>[],\n      merkleRoot: PromiseOrValue<BytesLike>,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    renounceOwnership(overrides?: CallOverrides): Promise<void>;\n\n    rootData(\n      arg0: PromiseOrValue<BytesLike>,\n      overrides?: CallOverrides\n    ): Promise<[boolean, string] & { isValid: boolean; metadataURI: string }>;\n\n    \"safeTransferFrom(address,address,uint256)\"(\n      from: PromiseOrValue<string>,\n      to: PromiseOrValue<string>,\n      tokenId: PromiseOrValue<BigNumberish>,\n      overrides?: CallOverrides\n    ): Promise<void>;\n\n    \"safeTransferFrom(address,address,uint256,bytes)\"(\n      from: PromiseOrValue<string>,\n      to: PromiseOrValue<string>,\n      tokenId: PromiseOrValue<BigNumberish>,\n      data: PromiseOrValue<BytesLike>,\n      overrides?: CallOverrides\n    ): Promise<void>;\n\n    setApprovalForAll(\n      operator: PromiseOrValue<string>,\n      approved: PromiseOrValue<boolean>,\n      overrides?: CallOverrides\n    ): Promise<void>;\n\n    supportsInterface(\n      interfaceId: PromiseOrValue<BytesLike>,\n      overrides?: CallOverrides\n    ): Promise<boolean>;\n\n    symbol(overrides?: CallOverrides): Promise<string>;\n\n    tokenData(\n      arg0: PromiseOrValue<BigNumberish>,\n      overrides?: CallOverrides\n    ): Promise<\n      [BigNumber, string] & { badgeId: BigNumber; merkleRoot: string }\n    >;\n\n    tokenURI(\n      tokenId: PromiseOrValue<BigNumberish>,\n      overrides?: CallOverrides\n    ): Promise<string>;\n\n    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;\n\n    transferFrom(\n      from: PromiseOrValue<string>,\n      to: PromiseOrValue<string>,\n      tokenId: PromiseOrValue<BigNumberish>,\n      overrides?: CallOverrides\n    ): Promise<void>;\n\n    transferOwnership(\n      newOwner: PromiseOrValue<string>,\n      overrides?: CallOverrides\n    ): Promise<void>;\n  };\n\n  filters: {\n    \"Approval(address,address,uint256)\"(\n      owner?: PromiseOrValue<string> | null,\n      approved?: PromiseOrValue<string> | null,\n      tokenId?: PromiseOrValue<BigNumberish> | null\n    ): ApprovalEventFilter;\n    Approval(\n      owner?: PromiseOrValue<string> | null,\n      approved?: PromiseOrValue<string> | null,\n      tokenId?: PromiseOrValue<BigNumberish> | null\n    ): ApprovalEventFilter;\n\n    \"ApprovalForAll(address,address,bool)\"(\n      owner?: PromiseOrValue<string> | null,\n      operator?: PromiseOrValue<string> | null,\n      approved?: null\n    ): ApprovalForAllEventFilter;\n    ApprovalForAll(\n      owner?: PromiseOrValue<string> | null,\n      operator?: PromiseOrValue<string> | null,\n      approved?: null\n    ): ApprovalForAllEventFilter;\n\n    \"InvalidatedRoot(bytes32)\"(merkleRoot?: null): InvalidatedRootEventFilter;\n    InvalidatedRoot(merkleRoot?: null): InvalidatedRootEventFilter;\n\n    \"Locked(uint256)\"(tokenId?: null): LockedEventFilter;\n    Locked(tokenId?: null): LockedEventFilter;\n\n    \"NewValidRoot(tuple)\"(rootInfo?: null): NewValidRootEventFilter;\n    NewValidRoot(rootInfo?: null): NewValidRootEventFilter;\n\n    \"OwnershipTransferred(address,address)\"(\n      previousOwner?: PromiseOrValue<string> | null,\n      newOwner?: PromiseOrValue<string> | null\n    ): OwnershipTransferredEventFilter;\n    OwnershipTransferred(\n      previousOwner?: PromiseOrValue<string> | null,\n      newOwner?: PromiseOrValue<string> | null\n    ): OwnershipTransferredEventFilter;\n\n    \"RedeemCommunitySBT(tuple,uint256)\"(\n      leafInfo?: null,\n      tokenId?: null\n    ): RedeemCommunitySBTEventFilter;\n    RedeemCommunitySBT(\n      leafInfo?: null,\n      tokenId?: null\n    ): RedeemCommunitySBTEventFilter;\n\n    \"Transfer(address,address,uint256)\"(\n      from?: PromiseOrValue<string> | null,\n      to?: PromiseOrValue<string> | null,\n      tokenId?: PromiseOrValue<BigNumberish> | null\n    ): TransferEventFilter;\n    Transfer(\n      from?: PromiseOrValue<string> | null,\n      to?: PromiseOrValue<string> | null,\n      tokenId?: PromiseOrValue<BigNumberish> | null\n    ): TransferEventFilter;\n\n    \"Unlocked(uint256)\"(tokenId?: null): UnlockedEventFilter;\n    Unlocked(tokenId?: null): UnlockedEventFilter;\n  };\n\n  estimateGas: {\n    addNewRoot(\n      rootInfo: CommunitySBT.RootInfoStruct,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<BigNumber>;\n\n    approve(\n      to: PromiseOrValue<string>,\n      tokenId: PromiseOrValue<BigNumberish>,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<BigNumber>;\n\n    balanceOf(\n      owner: PromiseOrValue<string>,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    getApproved(\n      tokenId: PromiseOrValue<BigNumberish>,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    getTokenIdHash(\n      account: PromiseOrValue<string>,\n      merkleRoot: PromiseOrValue<BytesLike>,\n      badgeId: PromiseOrValue<BigNumberish>,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    invalidateRoot(\n      merkleRoot: PromiseOrValue<BytesLike>,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<BigNumber>;\n\n    isApprovedForAll(\n      owner: PromiseOrValue<string>,\n      operator: PromiseOrValue<string>,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    locked(\n      tokenId: PromiseOrValue<BigNumberish>,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    multiRedeem(\n      leafInfos: CommunitySBT.LeafInfoStruct[],\n      proofs: PromiseOrValue<BytesLike>[][],\n      merkleRoots: PromiseOrValue<BytesLike>[],\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<BigNumber>;\n\n    name(overrides?: CallOverrides): Promise<BigNumber>;\n\n    owner(overrides?: CallOverrides): Promise<BigNumber>;\n\n    ownerOf(\n      tokenId: PromiseOrValue<BigNumberish>,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    redeem(\n      leafInfo: CommunitySBT.LeafInfoStruct,\n      proof: PromiseOrValue<BytesLike>[],\n      merkleRoot: PromiseOrValue<BytesLike>,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<BigNumber>;\n\n    renounceOwnership(\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<BigNumber>;\n\n    rootData(\n      arg0: PromiseOrValue<BytesLike>,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    \"safeTransferFrom(address,address,uint256)\"(\n      from: PromiseOrValue<string>,\n      to: PromiseOrValue<string>,\n      tokenId: PromiseOrValue<BigNumberish>,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<BigNumber>;\n\n    \"safeTransferFrom(address,address,uint256,bytes)\"(\n      from: PromiseOrValue<string>,\n      to: PromiseOrValue<string>,\n      tokenId: PromiseOrValue<BigNumberish>,\n      data: PromiseOrValue<BytesLike>,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<BigNumber>;\n\n    setApprovalForAll(\n      operator: PromiseOrValue<string>,\n      approved: PromiseOrValue<boolean>,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<BigNumber>;\n\n    supportsInterface(\n      interfaceId: PromiseOrValue<BytesLike>,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    symbol(overrides?: CallOverrides): Promise<BigNumber>;\n\n    tokenData(\n      arg0: PromiseOrValue<BigNumberish>,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    tokenURI(\n      tokenId: PromiseOrValue<BigNumberish>,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;\n\n    transferFrom(\n      from: PromiseOrValue<string>,\n      to: PromiseOrValue<string>,\n      tokenId: PromiseOrValue<BigNumberish>,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<BigNumber>;\n\n    transferOwnership(\n      newOwner: PromiseOrValue<string>,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<BigNumber>;\n  };\n\n  populateTransaction: {\n    addNewRoot(\n      rootInfo: CommunitySBT.RootInfoStruct,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<PopulatedTransaction>;\n\n    approve(\n      to: PromiseOrValue<string>,\n      tokenId: PromiseOrValue<BigNumberish>,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<PopulatedTransaction>;\n\n    balanceOf(\n      owner: PromiseOrValue<string>,\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n\n    getApproved(\n      tokenId: PromiseOrValue<BigNumberish>,\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n\n    getTokenIdHash(\n      account: PromiseOrValue<string>,\n      merkleRoot: PromiseOrValue<BytesLike>,\n      badgeId: PromiseOrValue<BigNumberish>,\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n\n    invalidateRoot(\n      merkleRoot: PromiseOrValue<BytesLike>,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<PopulatedTransaction>;\n\n    isApprovedForAll(\n      owner: PromiseOrValue<string>,\n      operator: PromiseOrValue<string>,\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n\n    locked(\n      tokenId: PromiseOrValue<BigNumberish>,\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n\n    multiRedeem(\n      leafInfos: CommunitySBT.LeafInfoStruct[],\n      proofs: PromiseOrValue<BytesLike>[][],\n      merkleRoots: PromiseOrValue<BytesLike>[],\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<PopulatedTransaction>;\n\n    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    ownerOf(\n      tokenId: PromiseOrValue<BigNumberish>,\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n\n    redeem(\n      leafInfo: CommunitySBT.LeafInfoStruct,\n      proof: PromiseOrValue<BytesLike>[],\n      merkleRoot: PromiseOrValue<BytesLike>,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<PopulatedTransaction>;\n\n    renounceOwnership(\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<PopulatedTransaction>;\n\n    rootData(\n      arg0: PromiseOrValue<BytesLike>,\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n\n    \"safeTransferFrom(address,address,uint256)\"(\n      from: PromiseOrValue<string>,\n      to: PromiseOrValue<string>,\n      tokenId: PromiseOrValue<BigNumberish>,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<PopulatedTransaction>;\n\n    \"safeTransferFrom(address,address,uint256,bytes)\"(\n      from: PromiseOrValue<string>,\n      to: PromiseOrValue<string>,\n      tokenId: PromiseOrValue<BigNumberish>,\n      data: PromiseOrValue<BytesLike>,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<PopulatedTransaction>;\n\n    setApprovalForAll(\n      operator: PromiseOrValue<string>,\n      approved: PromiseOrValue<boolean>,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<PopulatedTransaction>;\n\n    supportsInterface(\n      interfaceId: PromiseOrValue<BytesLike>,\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n\n    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    tokenData(\n      arg0: PromiseOrValue<BigNumberish>,\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n\n    tokenURI(\n      tokenId: PromiseOrValue<BigNumberish>,\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n\n    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    transferFrom(\n      from: PromiseOrValue<string>,\n      to: PromiseOrValue<string>,\n      tokenId: PromiseOrValue<BigNumberish>,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<PopulatedTransaction>;\n\n    transferOwnership(\n      newOwner: PromiseOrValue<string>,\n      overrides?: Overrides & { from?: PromiseOrValue<string> }\n    ): Promise<PopulatedTransaction>;\n  };\n}\n"]}