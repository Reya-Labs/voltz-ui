{"version":3,"file":"common.js","sourceRoot":"/","sources":["typechain-sbt/common.ts"],"names":[],"mappings":"","sourcesContent":["/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport type { Listener } from \"@ethersproject/providers\";\nimport type { Event, EventFilter } from \"ethers\";\n\nexport interface TypedEvent<\n  TArgsArray extends Array<any> = any,\n  TArgsObject = any\n> extends Event {\n  args: TArgsArray & TArgsObject;\n}\n\nexport interface TypedEventFilter<_TEvent extends TypedEvent>\n  extends EventFilter {}\n\nexport interface TypedListener<TEvent extends TypedEvent> {\n  (...listenerArg: [...__TypechainArgsArray<TEvent>, TEvent]): void;\n}\n\ntype __TypechainArgsArray<T> = T extends TypedEvent<infer U> ? U : never;\n\nexport interface OnEvent<TRes> {\n  <TEvent extends TypedEvent>(\n    eventFilter: TypedEventFilter<TEvent>,\n    listener: TypedListener<TEvent>\n  ): TRes;\n  (eventName: string, listener: Listener): TRes;\n}\n\nexport type MinEthersFactory<C, ARGS> = {\n  deploy(...a: ARGS[]): Promise<C>;\n};\n\nexport type GetContractTypeFromFactory<F> = F extends MinEthersFactory<\n  infer C,\n  any\n>\n  ? C\n  : never;\n\nexport type GetARGsTypeFromFactory<F> = F extends MinEthersFactory<any, any>\n  ? Parameters<F[\"deploy\"]>\n  : never;\n\nexport type PromiseOrValue<T> = T | Promise<T>;\n"]}